import tkinter
import tkinter.colorchooser
import tkinter.filedialog
import tkinter.messagebox
import tkinter.font
from win32api import *
import sys
from Alphabet import *
from CodeFunctions import *
from WordFunctions import *
from tkinter import ttk
import tkinter.scrolledtext
#from matplotlib import *
#import matplotlib.pyplot
import matplotlib.pyplot as pyplot
import matplotlib
matplotlib.use("TkAgg")
#from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
#from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbarTkAgg
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import time
import threading
import numpy
import copy
import os
import webbrowser
import pyperclip
from bs4 import BeautifulSoup
#import urllib3
import urllib.request
import TwitterHandler
import datetime
from WebFunctions import *
from InfoFunctions import *
import googletrans
import WordFunctions

BGColour = "#BBBBBB"
#BGColour = "#8faee7"
#BGColour = "#bdebec"

ButtonColour = "#EEEEEE"
#ButtonColour = "#98e0e7"
#ButtonColour = "#d2f1f2"
#ButtonColour = "#bdebec"

#challenge

#CURRENTCIPHERCHALLENGEYEAR = 2019
CURRENTCIPHERCHALLENGEYEAR = 2020

#LanguageToLangCodes = {"english": "en",
#                       "french": "fr",
#                       "german": "ge",
#                       "japanese": "ja",

LANGUAGETOLANGCODES = {}

for i in googletrans.LANGCODES:

    LANGUAGETOLANGCODES[i.lower()] = googletrans.LANGCODES[i]
                       

class Window(tkinter.Tk):

    def __init__(self, *args, **kwargs):

        tkinter.Tk.__init__(self, *args, **kwargs)

        ###Window sizes

        self.ScreenX = GetSystemMetrics(0)
        self.ScreenY = GetSystemMetrics(1)


        ###Window set-up

        self.title("William's Super Awesome Code Cracker")

        self.wm_iconbitmap("Images/Code Creaker Icon.ico")

        self.state("zoomed")

        self.protocol("WM_DELETE_WINDOW", self.Exit)

        #self.config( bg = "#472902")
        #self.config( bg = "#EEEEEE")
        #self.config( bg = "#BBBBBB")
        self.config( bg = BGColour)

        ToolBarHeight = 50

        #self.ToolBar = tkinter.Frame(self, width = self.ScreenX-16, height = 50, bg = ButtonColour, bd = 1, relief = "raised")
        #self.ToolBar = tkinter.Frame(self, width = self.ScreenX-16, height = 50, bg = ButtonColour, bd = 1, relief = "flat")
        #self.ToolBar = tkinter.Frame(self, width = self.ScreenX-20, height = 50, bg = ButtonColour, bd = 1, relief = "flat")
        self.ToolBar = tkinter.Frame(self, width = self.ScreenX-20, height = ToolBarHeight, bg = ButtonColour, bd = 1, relief = "flat")

        #self.EditKeyButton = tkinter.Button(self.ToolBar, text = "Edit Key", bg = ButtonColour, command = self.Exit, font = tkinter.font.Font(size = 10, weight = "bold"))
        self.EditKeyButton = tkinter.Button(self.ToolBar, text = "Edit Key", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = self.EditKey)
        #self.ColourButton.place(x = 10, y = 5)
        #self.EditKeyButton.place(x = 10, y = ToolBarHeight//2-self.EditKeyButton.height//2)
        #self.EditKeyButton.place(x = 10, y = ToolBarHeight//2-self.EditKeyButton.winfo_height()//2)
        #self.EditKeyButton.place(x = 10, y = ToolBarHeight-self.EditKeyButton.winfo_height()//2)
        #self.EditKeyButton.place(x = 10, y = ToolBarHeight//2-self.EditKeyButton.winfo_height())
        #self.EditKeyButton.place(x = 10, y = ToolBarHeight//2-self.EditKeyButton.winfo_height()*2)
        #self.EditKeyButton.place(x = 10, y = ToolBarHeight//2-self.EditKeyButton.winfo_height()//4)
        self.EditKeyButton.place(x = 10, y = 10)

        self.DecodeButton = tkinter.Button(self.ToolBar, text = "Decode", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = self.Decode)
        #self.DecodeButton.place(x = 70, y = 10)
        self.DecodeButton.place(x = 90, y = 10)

        self.EncodeButton = tkinter.Button(self.ToolBar, text = "Encode", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = self.Encode)
        #self.DecodeButton.place(x = 170, y = 10)
        #self.EncodeButton.place(x = 160, y = 10)
        self.EncodeButton.place(x = 165, y = 10)


        self.UsePolyalphabet = tkinter.IntVar()

        #self.EncodeButton = tkinter.Checkbutton(self.ToolBar, text = "Use Polyalphabet", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"))
        self.EncodeButton = tkinter.Checkbutton(self.ToolBar, text = "Use Polyalphabet", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), variable = self.UsePolyalphabet)
        self.EncodeButton.place(x = 240, y = 10)

        self.ReverseButton = tkinter.Button(self.ToolBar, text = "Reverse", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = self.Reverse)
        #self.ReverseButton.place(x = 315, y = 10)
        self.ReverseButton.place(x = 400, y = 10)

        self.SplitIntoWordsButton = tkinter.Button(self.ToolBar, text = "Split Into Words", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = self.SplitIntoWords)
        self.SplitIntoWordsButton.place(x = 500, y = 10)

        self.FindButton = tkinter.Button(self.ToolBar, text = "Find", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = self.FindCommand)
        #self.FindButton.place(x = 800, y = 10)
        self.FindButton.place(x = 900, y = 10)

        #self.FindEntry = tkinter.Entry(self.ToolBar, width = 20)
        self.FindEntry = tkinter.Entry(self.ToolBar, width = 30)
        #self.FindEntry.place(x = 600, y =10)
        self.FindEntry.place(x = 700, y = 15)

        #self.ReverseButton = tkinter.Button(self.ToolBar, text = "Potential Words", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = self.PotentialWordsDisplay)
        #self.ReverseButton.place(x = 1200, y = 10)
        self.PotentialWordsButton = tkinter.Button(self.ToolBar, text = "Potential Words", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = self.PotentialWordsDisplay)
        self.PotentialWordsButton.place(x = 1200, y = 10)

        self.TextBoxButton = tkinter.Button(self.ToolBar, text = "Text Box", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = self.TextBoxDisplay)
        #self.TextBoxButton.place(x = 1160, y = 10)
        self.TextBoxButton.place(x = 1120, y = 10)

        self.TextBoxButton = tkinter.Button(self.ToolBar, text = "Sample Text", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = self.SampleTextCommand)
        #self.TextBoxButton.place(x = 1050, y = 10)
        #self.TextBoxButton.place(x = 950, y = 10)
        self.TextBoxButton.place(x = 1020, y = 10)

        #self.OpenWebsiteLabel = tkinter.Button(self.ToolBar, text = "Open Cipher Challenge Website", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"))
        #self.OpenWebsiteLabel = tkinter.Label(self.ToolBar, text = "Open Cipher Challenge Website", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"))
        self.OpenWebsiteLabel = tkinter.Label(self.ToolBar, text = "Open Cipher Challenge Website:", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"))
        #self.OpenWebsiteLabel.place(x = 1700, y = 10)
        #self.OpenWebsiteLabel.place(x = 1500, y = 10)
        #self.OpenWebsiteLabel.place(x = 1450, y = 10)
        #self.OpenWebsiteLabel.place(x = 1480, y = 10)
        #self.OpenWebsiteLabel.place(x = 1410, y = 10)
        #self.OpenWebsiteLabel.place(x = 1360, y = 10)
        self.OpenWebsiteLabel.place(x = 1310, y = 10)

        self.OpenWebsite2019Button = tkinter.Button(self.ToolBar, text = "2019", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = lambda: self.OpenCipherChallengeWebsite(2019))
        #self.OpenWebsite2019Button.place(x = 1800, y = 10)
        self.OpenWebsite2019Button.place(x = 1700, y = 10)

        self.OpenWebsite2018Button = tkinter.Button(self.ToolBar, text = "2018", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = lambda: self.OpenCipherChallengeWebsite(2018))
        #self.OpenWebsite2018Button.place(x = 1830, y = 10)
        self.OpenWebsite2018Button.place(x = 1750, y = 10)

        self.OpenWebsite2017Button = tkinter.Button(self.ToolBar, text = "2017", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = lambda: self.OpenCipherChallengeWebsite(2017))
        #self.OpenWebsite2017Button.place(x = 1860, y = 10)
        self.OpenWebsite2017Button.place(x = 1800, y = 10)

        self.OpenWebsite2016Button = tkinter.Button(self.ToolBar, text = "2016", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = lambda: self.OpenCipherChallengeWebsite(2016))
        #self.OpenWebsite2016Button.place(x = 1890, y = 10)
        self.OpenWebsite2016Button.place(x = 1850, y = 10)

        self.OpenWebsite2016Button = tkinter.Button(self.ToolBar, text = "2020", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = lambda: self.OpenCipherChallengeWebsite(2020))
        self.OpenWebsite2016Button.place(x = 1650, y = 10)

        #self.OpenWebsite2016Button = tkinter.Button(self.ToolBar, text = "Archive", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = lambda: self.OpenCipherChallengeWebsite("Archive"))
        self.OpenWebsiteArchiveButton = tkinter.Button(self.ToolBar, text = "Archive", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = lambda: self.OpenCipherChallengeWebsite("Archive"))
        #self.OpenWebsite2016Button.place(x = 1630, y = 10)
        #self.OpenWebsiteArchiveButton.place(x = 1630, y = 10)
        self.OpenWebsiteArchiveButton.place(x = 1580, y = 10)

        self.OpenGoogleDriveButton = tkinter.Button(self.ToolBar, text = "Drive", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), command = lambda: self.OpenCipherChallengeWebsite("Drive"))
        #self.OpenGoogleDriveButton.place(x = 1630, y = 10)
        #self.OpenGoogleDriveButton.place(x = 1580, y = 10)
        self.OpenGoogleDriveButton.place(x = 1530, y = 10)
                                               

        self.ToolBar.place(x = 10, y = 10)

        #self.ColourButton = tkinter.Label(self.ToolBar, text = "Input:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.InputLabel = tkinter.Label(self, text = "Input:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.InputLabel.place(x = 10, y = ToolBarHeight+10+10)

        self.PasteInputButton = tkinter.Button(self, text = "Paste", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.PasteInput)
        self.PasteInputButton.place(x = 90, y = ToolBarHeight+20-5)

        self.ClearInputButton = tkinter.Button(self, text = "Clear", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ClearInputButtonCommand)
        #self.ClearInputButton.place(x = 120, y = ToolBarHeight+20-5)
        #self.ClearInputButton.place(x = 200, y = ToolBarHeight+20-5)
        self.ClearInputButton.place(x = 160, y = ToolBarHeight+20-5)

        self.StripInputButton = tkinter.Button(self, text = "Strip", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.RemovePunctAndSpace)
        #self.StripInputButton = tkinter.Button(self, text = "Strip", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.RemoveNewLines)
        self.StripInputButton.place(x = 230, y = ToolBarHeight+20-5)
        
        self.LowerInputButton = tkinter.Button(self, text = "Lower", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.LowerInputCommand)
        self.LowerInputButton.place(x = 300, y = ToolBarHeight+20-5)


        #TextBoxWidth, TextBoxHeight = 100, 60
        #TextBoxWidth, TextBoxHeight = 100, 10
        #TextBoxWidth, TextBoxHeight = 60, 10
        #TextBoxWidth, TextBoxHeight = 60, 12
        #TextBoxWidth, TextBoxHeight = 60, 15
        #TextBoxWidth, TextBoxHeight = 60, 14
        #TextBoxWidth, TextBoxHeight = 40, 14
        TextBoxWidth, TextBoxHeight = 50, 14

        #self.InputBox = tkinter.Text(self, width = TextBoxWidth, height = TextBoxHeight, bg = ButtonColour)
        self.InputBox = tkinter.scrolledtext.ScrolledText(self, width = TextBoxWidth, height = TextBoxHeight, bg = ButtonColour)
        #self.InputBox.place(x = 10, y = self.InputLabel.winfo_y()+10+10)
        #self.InputBox.place(x = 10, y = self.InputLabel.winfo_rooty()+10+10)
        #self.InputBox.place(x = 10, y = ToolBarHeight+40)
        self.InputBox.place(x = 10, y = ToolBarHeight+50)

        #OutputLabelY = 190
        #OutputLabelY = 210
        #OutputLabelY = 230
        #OutputLabelY = 270
        OutputLabelY = 300
        self.OutputLabel = tkinter.Label(self, text = "Output:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.OutputLabel.place(x = 10, y = ToolBarHeight+160)
        self.OutputLabel.place(x = 10, y = ToolBarHeight+OutputLabelY)

        #OutputTextBoxHeight = 15
        OutputTextBoxHeight = 18
        #OutputTextBoxHeight = 20
        #self.OutputBox = tkinter.Text(self, width = TextBoxWidth, height = TextBoxHeight, bg = ButtonColour)
        #self.OutputBox = tkinter.Text(self, width = TextBoxWidth, height = OutputTextBoxHeight, bg = ButtonColour)
        self.OutputBox = tkinter.scrolledtext.ScrolledText(self, width = TextBoxWidth, height = OutputTextBoxHeight, bg = ButtonColour)
        #self.OutputBox.place(x = 10, y = ToolBarHeight+190)
        self.OutputBox.place(x = 10, y = ToolBarHeight+OutputLabelY+30)

        self.OutputLabel = tkinter.Label(self, text = "Output:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.OutputLabel.place(x = 10, y = ToolBarHeight+OutputLabelY)

        self.UpButton = tkinter.Button(self, text = "^", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.MoveTextUp)
        #self.UpButton.place(x = 170, y = ToolBarHeight+OutputLabelY)
        #self.UpButton.place(x = 400, y = ToolBarHeight+OutputLabelY-20)
        self.UpButton.place(x = 380, y = ToolBarHeight+OutputLabelY-15)

        self.DownButton = tkinter.Button(self, text = "v", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.MoveTextDown)
        #self.DownButton.place(x = 380, y = ToolBarHeight+OutputLabelY-20)
        self.DownButton.place(x = 340, y = ToolBarHeight+OutputLabelY-15)

        self.CopyOutputButton = tkinter.Button(self, text = "Copy", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.CopyOutput)
        self.CopyOutputButton.place(x = 90, y = ToolBarHeight+OutputLabelY-5)

        self.ClearOutputButton = tkinter.Button(self, text = "Clear", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ClearOutputButtonCommand)
        #self.ClearOutputButton.place(x = 120, y = ToolBarHeight+OutputLabelY-5)
        self.ClearOutputButton.place(x = 160, y = ToolBarHeight+OutputLabelY-5)

        self.PreviousInputBoxMsg = ""

        #AnalyseTextBoxX = 200
        #AnalyseTextBoxX = 500
        AnalyseTextBoxX = 450
        AnalyseTextBoxHeight = 30
        AnalyseTextBoxWidth = 30
        
        #self.AnalyseTextLabel = tkinter.Text(self, text = "Analyse Text:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.AnalyseTextLabel = tkinter.Label(self, text = "Analyse Text:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.AnalyseTextLabel.place(x = AnalyseTextBoxX, y = ToolBarHeight+20)
        
        #self.AnalyseTextBox = tkinter.Text(self, width = TextBoxWidth, height = AnalyseTextBoxHeight, bg = ButtonColour)
        #self.AnalyseTextBox = tkinter.Text(self, width = AnalyseTextBoxWidth, height = AnalyseTextBoxHeight, bg = ButtonColour)
        self.AnalyseTextBox = tkinter.scrolledtext.ScrolledText(self, width = AnalyseTextBoxWidth, height = AnalyseTextBoxHeight, bg = ButtonColour)
        self.AnalyseTextBox.place(x = AnalyseTextBoxX, y = ToolBarHeight+20+30)

        self.AnalyseTextButton = tkinter.Button(self, text = "Analyse", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.AnalyseText)
        #self.AnalyseTextButton.place(x = AnalyseTextBoxX, y = 700)
        #self.AnalyseTextButton.place(x = AnalyseTextBoxX, y = 630)
        self.AnalyseTextButton.place(x = AnalyseTextBoxX, y = 600)

        self.ExamineTextButton = tkinter.Button(self, text = "Examine", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ExamineTextCommand)
        self.ExamineTextButton.place(x = AnalyseTextBoxX, y = 650)


        #self.AnalyseTextFrame = tkinter.Frame(self, width = 30, height = AnalyseTextBoxHeight, bg = ButtonColour)
        
        #self.AnalyseTextScrollBar = tkinter.Scrollbar(self, height = AnalyseTextBoxHeight, command = self.AnalyseTextBox.yview)
        #self.AnalyseTextScrollBar = tkinter.Scrollbar(self, length = 100, command = self.AnalyseTextBox.yview)
##        self.AnalyseTextScrollBar = tkinter.Scrollbar(self, command = self.AnalyseTextBox.yview)
##        #self.AnalyseTextScrollBar = tkinter.Scrollbar(self.AnalyseTextBox, command = self.AnalyseTextBox.yview)
##        #self.AnalyseTextScrollBar = tkinter.Scrollbar(self.AnalyseTextFrame, command = self.AnalyseTextBox.yview)
##        #self.AnalyseTextScrollBar.grid(row = 0, column = 1, sticky = "nsew")
##        #self.AnalyseTextScrollBar.grid(row = 0, column = 100, sticky = "nsew")
##        #self.AnalyseTextScrollBar.grid(row = 0, column = 100, rowspan = 5)
##        #self.AnalyseTextScrollBar.grid(row = 0, column = 100, sticky = "ns")
##        #self.AnalyseTextScrollBar.grid(row = 0, column = 1, sticky = "nsew")
##        #self.AnalyseTextScrollBar.grid(row = 0, column = 1, sticky = "ns")
##        #self.AnalyseTextScrollBar.grid(row = 0, column = 1, rowspan = 100, ipady = 100)
##        self.AnalyseTextScrollBar.grid(row = 1, column = 6, pady = 100)
##        #self.AnalyseTextScrollBar.place(x = AnalyseTextBoxX+200, y = ToolBarHeight+20+30)
##        #self.AnalyseTextScrollBar.place(x = AnalyseTextBoxX+250, y = ToolBarHeight+20+30)
##        #self.AnalyseTextScrollBar.pack(side = "right", fill = "y")
##        #self.AnalyseTextScrollBar.place(x = AnalyseTextBoxX+200, y = ToolBarHeight+20+30)
##        #self.AnalyseTextScrollBar.place(x = AnalyseTextBoxX+100, y = ToolBarHeight+20+30)
##        #self.AnalyseTextScrollBar.place(x = 0, y = 0)
##        #self.AnalyseTextScrollBar.pack(side = "right", fill = "y")
##        #self.AnalyseTextScrollBar.place(x = AnalyseTextBoxX+240, y = ToolBarHeight+20+30)
##        #self.AnalyseTextScrollBar.place(x = AnalyseTextBoxX+245, y = ToolBarHeight+20+30, fill = "y")
##        self.AnalyseTextBox["yscrollcommand"] = self.AnalyseTextScrollBar.set
##        #self.AnalyseTextScrollBar.place(x = AnalyseTextBoxX+245, y = ToolBarHeight+20+30)
##        self.AnalyseTextScrollBar.pack(side = "right", fill = "y")
##        #self.AnalyseTextBox["yscrollcommand"] = self.AnalyseTextScrollBar.set
##
##        #self.AnalyseTextFrame.place(x = AnalyseTextBoxX+240, y = ToolBarHeight+20+30)


        """self.AttemptSolveButton = tkinter.Button(self, text = "Attempt Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.AttemptSolve)
        #self.AttemptSolveButton.place(x = AnalyseTextBoxX+70, y = 630)
        self.AttemptSolveButton.place(x = AnalyseTextBoxX+90, y = 630)"""

        #self.AnalyseColumnsButton = tkinter.Button(self, text = "Analyse Columns", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.AnalyseColumns)
        self.AnalyseColumnsButton = tkinter.Button(self, text = "Analyse Cipher", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.AnalyseCipher)
        #self.AnalyseColumnsButton.place(x = AnalyseTextBoxX+90, y = 630)
        self.AnalyseColumnsButton.place(x = AnalyseTextBoxX+90, y = 600)

        self.IdentifyCipherButton = tkinter.Button(self, text = "Identify Cipher", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.IdentifyCipherButtonCommand)
        self.IdentifyCipherButton.place(x = AnalyseTextBoxX+90, y = 650)

        self.AutoSolveButton = tkinter.Button(self, text = "Auto Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.AutoSolveCommand)
        self.AutoSolveButton.place(x = 720, y = 450)



        self.SetUpCodeCreaking()



        #self.EditKeyFrame = tkinter.Frame(self, width = 400, height = 310, bg = ButtonColour)
        #self.EditKeyFrame = tkinter.Frame(self, width = 500, height = 300, bg = ButtonColour)
        #self.EditKeyFrame = tkinter.Frame(self, width = 400, height = 280, bg = ButtonColour)
        #self.EditKeyFrame = tkinter.Frame(self, width = 400, height = 290, bg = ButtonColour)
        #self.EditKeyFrame = tkinter.Frame(self, width = 410, height = 290, bg = ButtonColour)
        self.EditKeyFrame = tkinter.Frame(self, width = 500, height = 290, bg = ButtonColour)
        #self.EditKeyFrame.configure(bg = BGColour)

        #self.EditKeyFrame.resizable(False, False)

        """self.KeyEntries = []

        #MaxPerRow = 4
        MaxPerRow = 5

        Width = 100

        Height = 50

        EntryWidth = 10

        for letter in range(0, len(alphabetlist)):
            
            self.KeyEntries.append((tkinter.Entry(self.EditKeyFrame, width = EntryWidth),
                                    tkinter.Label(self.EditKeyFrame, bg = BGColour, text = alphabetlist[letter] + ":")))
            
            self.KeyEntries[-1][0].insert(0, self.Key[alphabetlist[letter]])

            #x = letter%MaxPerRow*Width
            x = letter%MaxPerRow*Width+5

            y = letter//MaxPerRow*Height+10

            self.KeyEntries[-1][1].place(x = x, y = y)
            self.KeyEntries[-1][0].place(x = x+20, y = y)"""

        self.PageNum = 0

        self.ShowKey()


        #self.EditKeyOKButton = tkinter.Button(self.EditKeyFrame, text = "OK", command = self.EditKeyOK, font = tkinter.font.Font(size = 12, weight = "bold"))

        #self.EditKeyOKButton.place(x = 180, y = 350)

        #self.PageNum = 0

        #self.PageNumLabel = tkinter.Entry(self.EditKeyFrame, bg = ButtonColour, width = 5, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.PageNumLabel = tkinter.Entry(self.EditKeyFrame, bg = ButtonColour, width = 1, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.PageNumLabel = tkinter.Entry(self.EditKeyFrame, bg = ButtonColour, width = 2, font = tkinter.font.Font(size = 12, weight = "regular"))
        #self.PageNumLabel = tkinter.Entry(self.EditKeyFrame, bg = ButtonColour, width = 2, font = tkinter.font.Font(size = 12, weight = "normal"))
        """self.PageNumLabel = tkinter.Entry(self.EditKeyFrame, bg = ButtonColour, width = 2, font = tkinter.font.Font(size = 15, weight = "normal"))
        #self.PageNumLabel.insert("1.0", "1")
        self.PageNumLabel.insert(0, "1")
        self.PageNumLabel.place(x = 400, y= 250)
        

        self.PageLeft = tkinter.Button(self.EditKeyFrame, text = "<", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.ChangePage(-1))
        self.PageLeft.place(x = 435, y = 250)

        self.PageRight = tkinter.Button(self.EditKeyFrame, text = ">", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.ChangePage(1))
        self.PageRight.place(x = 470, y = 250)"""

        #EditKeyFrameX = 650
        #EditKeyFrameX = 700
        #EditKeyFrameX = 750
        EditKeyFrameX = 720

        self.EditKeyFrame.place(x = EditKeyFrameX, y = ToolBarHeight+20)


        #self.SetUpCodeCreaking()

        #ShiftKeyY = 600
        #ShiftKeyY = 450
        #ShiftKeyY = 400
        ShiftKeyY = 360
        ShiftKeyY = 380
        #ShiftKeyY = ToolBarHeight+20
        KeyWordY = ToolBarHeight+20
        KeyWordShiftX = 510

        self.ShiftKeyLeftButton = tkinter.Button(self, text = "Shift Left", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.ShiftKey(-1))
        #self.ShiftKeyLeftButton = tkinter.Button(self, text = "Shift Left", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.ShiftKey(1))
        self.ShiftKeyLeftButton.place(x = EditKeyFrameX, y = ShiftKeyY)

        self.ShiftKeyRightButton = tkinter.Button(self, text = "Shift Right", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.ShiftKey(1))
        #self.ShiftKeyRightButton = tkinter.Button(self, text = "Shift Right", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.ShiftKey(-1))
        #self.ShiftKeyRightButton.place(x = EditKeyFrameX+40, y = ShiftKeyY)
        #self.ShiftKeyRightButton.place(x = EditKeyFrameX+140, y = ShiftKeyY)
        #self.ShiftKeyRightButton.place(x = EditKeyFrameX+110, y = ShiftKeyY)
        self.ShiftKeyRightButton.place(x = EditKeyFrameX+100, y = ShiftKeyY)

        self.KeyWordEntry = tkinter.Entry(self)
        #self.KeyWordEntry.place(x = EditKeyFrameX+250, y = ShiftKeyY)
        #self.KeyWordEntry.place(x = EditKeyFrameX+500, y = ShiftKeyY)
        #self.KeyWordEntry.place(x = EditKeyFrameX+500, y = KeyWordY)
        self.KeyWordEntry.place(x = EditKeyFrameX+KeyWordShiftX, y = KeyWordY)
        
        #self.KeyWordButton = tkinter.Button(self, text = "Add", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.CreateKeyWordKey())
        self.KeyWordButton = tkinter.Button(self, text = "Add Keyword", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.CreateKeyWordKey())
        #self.KeyWordButton.place(x = EditKeyFrameX+300, y = ShiftKeyY)
        #self.KeyWordButton.place(x = EditKeyFrameX+500, y = ShiftKeyY+30)
        #self.KeyWordButton.place(x = EditKeyFrameX+500, y = KeyWordY+30)
        #self.KeyWordButton.place(x = EditKeyFrameX+KeyWordShiftX+2, y = KeyWordY+30)
        #self.KeyWordButton.place(x = EditKeyFrameX+KeyWordShiftX+5, y = KeyWordY+30)
        self.KeyWordButton.place(x = EditKeyFrameX+KeyWordShiftX+3, y = KeyWordY+30)

        self.FrequenciesButton = tkinter.Button(self, text = "Frequencies", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.ShowFrequencies())
        self.FrequenciesButton.place(x = EditKeyFrameX+KeyWordShiftX+3, y = KeyWordY+80)

        #self.ShowFrequencies = False
        self.ShowFrequenciesChart = False

        self.ClearKeyButton = tkinter.Button(self, text = "Clear", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ClearKey)
        #self.ClearKeyButton.place(x = EditKeyFrameX+220, y = ShiftKeyY)
        self.ClearKeyButton.place(x = EditKeyFrameX+210, y = ShiftKeyY)


        #self.SolveAsFrame = tkinter.Frame(self, bg = ButtonColour, width = 300, height = 400)
        self.SolveAsFrame = tkinter.Frame(self, bg = ButtonColour, width = 300, height = 300)

        self.SolveAsOption = tkinter.StringVar(self)
        self.SolveAsOption.set("Caesar")

        #self.SolveAsMenu = tkinter.OptionMenu(self.SolveAsFrame, SolveAsOption, "Caesar", "Affine", "Keyword", "Substitution")
        #self.SolveAsMenu = tkinter.OptionMenu(self.SolveAsFrame, SolveAsOption, self.CipherTypes)
        #self.SolveAsMenu = tkinter.OptionMenu(self.SolveAsFrame, SolveAsOption, *self.CipherTypes)
        #self.SolveAsMenu = ttk.Combobox(self.SolveAsFrame, textvariable = self.SolveAsOption, options = self.CipherTypes)
        self.SolveAsMenu = ttk.Combobox(self.SolveAsFrame, textvariable = self.SolveAsOption, values = self.CipherTypes)
        self.SolveAsMenu.bind("<<ComboboxSelected>>", self.ChangeCipherType)
        #self.SolveAsMenu.place(x = 100, y = 50)
        self.SolveAsMenu.place(x = 80, y = 50)

        self.CipherTypeLabel = tkinter.Label(self.SolveAsFrame, text = "Cipher Type:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.CipherTypeLabel.place(x = 10, y = 10)

        #self.CipherTypeInfoButton = tkinter.Button(self.SolveAsFrame, text = "i", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.CipherTypeInfoCommand)
        #self.CipherTypeInfoButton = tkinter.Button(self.SolveAsFrame, text = "i", bg = ButtonColour, command = self.CipherTypeInfoCommand)
        self.CipherTypeInfoButton = tkinter.Button(self.SolveAsFrame, text = "?", bg = ButtonColour, command = self.CipherTypeInfoCommand)
        #self.CipherTypeInfoButton.place(x = 200, y = 50)
        self.CipherTypeInfoButton.place(x = 250, y = 47)

        self.CipherBoxWidgets = []

        """
        self.CalculateKeyButton = tkinter.Button(self.SolveAsFrame, text = "Calculate", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.CalculateKey)
        #self.CalculateKeyButton.place(x = 10, y = 10)
        #self.CalculateKeyButton.place(x = 90, y = 120)
        #self.CalculateKeyButton.place(x = 100, y = 200)
        self.CalculateKeyButton.place(x = 110, y = 250)
        """

        self.ChangeCipherType("<<ComboboxSelected>>")

        #self.SolveAsFrame.place(x = 700, y = 500)
        #self.SolveAsFrame.place(x = 900, y = 450)
        #self.SolveAsFrame.place(x = 1000, y = 400)
        #self.SolveAsFrame.place(x = 1050, y = 370)
        #self.SolveAsFrame.place(x = 1000, y = 370)
        self.SolveAsFrame.place(x = 1010, y = 370)

        #self.CipherTypeOutput = tkinter.Text(self, width = 30, height = 6, bg = BGColour)
        #self.CipherTypeOutput = tkinter.Text(self, width = 30, height = 6, bg = ButtonColour)
        #self.CipherTypeOutput = tkinter.Text(self, width = 30, height = 10, bg = ButtonColour)
        self.CipherTypeOutput = tkinter.scrolledtext.ScrolledText(self, width = 30, height = 10, bg = ButtonColour)
        #self.CipherTypeOutput.place(x = 900, y = 400)
        #self.CipherTypeOutput.place(x = 850, y = 430)
        #self.CipherTypeOutput.place(x = 800, y = 470)
        #self.CipherTypeOutput.place(x = 750, y = 500)
        #self.CipherTypeOutput.place(x = 750, y = 510)
        #self.CipherTypeOutput.place(x = 750, y = 505)
        #self.CipherTypeOutput.place(x = 750, y = 506)
        #self.CipherTypeOutput.place(x = 745, y = 506)
        self.CipherTypeOutput.place(x = 740, y = 506)
        #self.CipherTypeOutput.place(x = 750, y = 506.9)
        #self.CipherTypeOutput.place(x = 750, y = 506.1)
        #self.CipherTypeOutput.place(x = 750, y = 506.5)


        #self.ChallengeFrame = tkinter.Frame(self, bg = ButtonColour, width = 300, height = 200)
        self.ChallengeFrame = tkinter.Frame(self, bg = ButtonColour, width = 300, height = 250)

        self.ChallengePartOption = tkinter.IntVar()
        self.ChallengePartOption.set(1)

        self.ChallengePartOptionAButton = tkinter.Radiobutton(self.ChallengeFrame, text = "A", bg = ButtonColour, variable = self.ChallengePartOption, value = 1)
        self.ChallengePartOptionAButton.place(x = 190, y = 70)

        self.ChallengePartOptionBButton = tkinter.Radiobutton(self.ChallengeFrame, text = "B", bg = ButtonColour, variable = self.ChallengePartOption, value = 2)
        self.ChallengePartOptionBButton.place(x = 240, y = 70)

        self.CipherChallengeLabel = tkinter.Label(self.ChallengeFrame, text = "Cipher Challenge:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.CipherChallengeLabel.place(x = 10, y = 10)

        self.ChallengeTextTypeOptions = ["ciphertext", "plaintext"]

        self.ChallengeTextTypeOption= tkinter.StringVar()
        self.ChallengeTextTypeOption.set("ciphertext")

        self.ChallengeTextType = ttk.Combobox(self.ChallengeFrame, textvariable = self.ChallengeTextTypeOption, values = self.ChallengeTextTypeOptions, width = 10)
        #self.ChallengeTextType.place(x = 230, y = 8)
        self.ChallengeTextType.place(x = 200, y = 8)

        self.ChallengePartLabel = tkinter.Label(self.ChallengeFrame, text = "Part:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.ChallengePartLabel.place(x = 190, y = 40)

        self.ChallengeNumLabel = tkinter.Label(self.ChallengeFrame, text = "Number:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.ChallengeNumLabel.place(x = 40, y = 40)
        #self.ChallengeNumLabel.place(x = 120, y = 40)
        self.ChallengeNumLabel.place(x = 100, y = 40)

        #self.ChallengeNumEntry = tkinter.Entry(self.ChallengeFrame, bg = ButtonColour, width = 4)
        #self.ChallengeNumEntry = tkinter.Entry(self.ChallengeFrame, width = 4, text = "1")
        self.ChallengeNumEntry = tkinter.Entry(self.ChallengeFrame, width = 4)
        #self.ChallengeNumEntry.insert("1.0", "1")
        #self.ChallengeNumEntry.place(x = 40, y = 70)
        self.ChallengeNumEntry.place(x = 120, y = 70)
        #self.ChallengeNumEntry.place(x = 100, y = 70)
        #self.ChallengeNumEntry.insert("1.0", "1")
        #self.ChallengeNumEntry.set("1")
        self.ChallengeNumEntry.insert(0, "1")

        self.ChallengeYearLabel = tkinter.Label(self.ChallengeFrame, text = "Year:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.ChallengeYearLabel.place(x = 40, y = 40)

        self.ChallengeYearEntry = tkinter.Entry(self.ChallengeFrame, width = 5)
        self.ChallengeYearEntry.place(x = 40, y = 70)
        #self.ChallengeYearEntry.insert(0, "2019")
        self.ChallengeYearEntry.insert(0, str(CURRENTCIPHERCHALLENGEYEAR))

        #self.DownloadChallengeButton = tkinter.Button(self.ChallengeFrame, text = "Download", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.DownloadChallenge)
        self.DownloadChallengeButton = tkinter.Button(self.ChallengeFrame, text = "Download", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.DownloadChallengeCommand)
        #self.DownloadChallengeButton.place(x = 40, y = 150)
        self.DownloadChallengeButton.place(x = 40, y = 110)

        #self.UploadChallengeButton = tkinter.Button(self.ChallengeFrame, text = "Upload", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.UploadChallenge)
        self.UploadChallengeButton = tkinter.Button(self.ChallengeFrame, text = "Upload", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.UploadChallengeCommand)
        #self.UploadChallengeButton.place(x = 200, y = 150)
        self.UploadChallengeButton.place(x = 200, y = 110)

        #self.ChallengeTextBox = tkinter.Text(self, width = 20, height = 10, bg = ButtonColour)
        self.ChallengeTextBox = tkinter.scrolledtext.ScrolledText(self, width = 20, height = 10, bg = ButtonColour)
        #self.ChallengeTextBox.insert("1.0", challenge9B)
        self.ChallengeTextBox.place(x = 1720, y = 70)

        self.PutChallengeInInputButton = tkinter.Button(self, text = "Put In Input", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.PutChallengeInInputButtonCommand)
        #self.PutChallengeInInputButton.place(x = 1750, y = 200)
        #self.PutChallengeInInputButton.place(x = 1750, y = 250)
        #self.PutChallengeInInputButton.place(x = 1750, y = 240)
        #self.PutChallengeInInputButton.place(x = 1750, y = 235)
        #self.PutChallengeInInputButton.place(x = 1750, y = 236)
        #self.PutChallengeInInputButton.place(x = 1750, y = 237)
        self.PutChallengeInInputButton.place(x = 1750, y = 240)

        self.ClearChallengeButton = tkinter.Button(self, text = "Clear", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ClearChallengeButtonCommand)
        #self.ClearChallengeButton.place(x = 1755, y = 250)
        #self.ClearChallengeButton.place(x = 1765, y = 280)
        #self.ClearChallengeButton.place(x = 1775, y = 270)
        #self.ClearChallengeButton.place(x = 1770, y = 275)
        #self.ClearChallengeButton.place(x = 1775, y = 275)
        #self.ClearChallengeButton.place(x = 1775, y = 285)
        self.ClearChallengeButton.place(x = 1775, y = 280)

        #ClockX = 70
        ClockX = 150

        self.ChallengeTimerColonLabel = tkinter.Label(self.ChallengeFrame, text = ":", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.ChallengeTimerColonLabel.place(x = 100, y = 160)
        #self.ChallengeTimerColonLabel.place(x = 50, y = 157)
        #self.ChallengeTimerColonLabel.place(x = 60, y = 157)
        self.ChallengeTimerColonLabel.place(x = ClockX + 20, y = 157)

        #self.ChallengeTimerHourEntry = tkinter.Entry(self.ChallengeFrame, width = 2)
        self.ChallengeTimerHourEntry = tkinter.Entry(self.ChallengeFrame, width = 3)
        #self.ChallengeTimerHourEntry.place(x = 70, y = 160)
        #self.ChallengeTimerHourEntry.place(x = 50, y = 160)
        #self.ChallengeTimerHourEntry.place(x = 40, y = 160)
        self.ChallengeTimerHourEntry.place(x = ClockX, y = 160)
        #self.ChallengeTimerHourEntry.insert(0, "15")

        self.ChallengeTimerHour = 15
        
        self.ChallengeTimerHourEntry.insert(0, str(self.ChallengeTimerHour))

        #self.ChallengeTimerMinEntry = tkinter.Entry(self.ChallengeFrame, width = 2)
        self.ChallengeTimerMinEntry = tkinter.Entry(self.ChallengeFrame, width = 3)
        #self.ChallengeTimerMinEntry.place(x = 140, y = 160)
        #self.ChallengeTimerMinEntry.place(x = 60, y = 160)
        #self.ChallengeTimerMinEntry.place(x = 50, y = 160)
        #self.ChallengeTimerMinEntry.place(x = 70, y = 160)
        #self.ChallengeTimerMinEntry.place(x = 70, y = 160)
        self.ChallengeTimerMinEntry.place(x = ClockX + 30, y = 160)
        #self.ChallengeTimerMinEntry.insert(0, "10")
    
        self.ChallengeTimerMin = 10

        self.ChallengeTimerMinEntry.insert(0, str(self.ChallengeTimerMin))

        self.ChallengeTimerActiveCheckboxOption = tkinter.IntVar()

        #self.ChallengeTimerActiveCheckbox = tkinter.Checkbutton(self.ChallengeFrame, text = "Timer Active", bg = ButtonColour, variable = self.ChallengeTimerActiveCheckboxOption)
        #self.ChallengeTimerActiveCheckbox.place(x = 160, y = 160)
        #self.ChallengeTimerActiveCheckbox.place(x = 160, y = 157)
        #self.ChallengeTimerActiveCheckbox.place(x = 200, y = 157)
        #self.ChallengeTimerActiveCheckbox.place(x = 205, y = 157)

        #self.PutChallengeInInputButton = tkinter.Button(self.ChallengeFrame, text = "Set", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.StartAutoSolveTimer)
        self.SetChallengeTimerButton = tkinter.Button(self.ChallengeFrame, text = "Set", bg = ButtonColour, command = self.StartAutoSolveTimer)
        #self.PutChallengeInInputButton.place(x = 205, y = 160)
        #self.SetChallengeTimerButton.place(x = 205, y = 157)
        #self.SetChallengeTimerButton.place(x = 215, y = 157)
        self.SetChallengeTimerButton.place(x = 210, y = 157)

        self.CancelChallengeTimerButton = tkinter.Button(self.ChallengeFrame, text = "Cancel", bg = ButtonColour, command = self.CancelAutoSolveTimer)
        #self.CancelChallengeTimerButton.place(x = 215, y = 157)
        #self.CancelChallengeTimerButton.place(x = 225, y = 157)
        #self.CancelChallengeTimerButton.place(x = 235, y = 157)
        self.CancelChallengeTimerButton.place(x = 245, y = 157)

        self.ChallengeTimerLabel = tkinter.Label(self.ChallengeFrame, text = "Auto-Solve Timer:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.ChallengeTimerLabel.place(x = 30, y = 157)
        #self.ChallengeTimerLabel.place(x = 10, y = 157)
        self.ChallengeTimerLabel.place(x = 5, y = 157)

        self.ChallengeCurrentTimerLabel = tkinter.Label(self.ChallengeFrame, text = "Current Timer:", bg = ButtonColour)
        self.ChallengeCurrentTimerLabel.place(x = 5, y = 180)

        self.ChallengeCurrentTimerInfoLabel = tkinter.Label(self.ChallengeFrame, text = "None", bg = ButtonColour)
        #self.ChallengeCurrentTimerInfoLabel.place(x = 60, y = 180)
        #self.ChallengeCurrentTimerInfoLabel.place(x = 80, y = 180)
        self.ChallengeCurrentTimerInfoLabel.place(x = 90, y = 180)

        self.AutoSolveTimerActivated = False

        #Thread = threading.Thread(target = StartAutoSolveTimer, args = (self))
        #Thread = threading.Thread(target = self.StartAutoSolveTimer)
        #Thread.start()

        self.ChallengeFrame.place(x = 1400, y = 70)


        self.InfoFrame = tkinter.Frame(self, bg = ButtonColour, width = 550, height = 660)

        #self.InfoOptions = ["Morse Code", "VIC Cipher"]
        #self.InfoOptions = ["Websites", "Morse Code", "VIC Cipher"]
        #self.InfoOptions = ["Websites", "William's Super Awesome Code Creaker", "Morse Code", "VIC Cipher"]
        #self.InfoOptions = ["Websites", "William's Super Awesome Code Creaker", "Morse Code", "VIC Cipher", "Levenshtein Metric"]
        #self.InfoOptions = ["Websites", "William's Super Awesome Code Creaker", "Morse Code", "VIC Cipher", "Levenshtein Metric", "Enigma", "Double Transposition", "ASCII", "ADFGVX", "Running Key"]
        #self.InfoOptions = ["Websites", "William's Super Awesome Code Creaker", "Morse Code", "VIC Cipher", "Levenshtein Metric", "Enigma", "Double Transposition", "ASCII", "ADFGVX", "Running Key", "Homophonic Substitution"]
        #self.InfoOptions = ["Websites", "William's Super Awesome Code Creaker", "Morse Code", "VIC Cipher", "Levenshtein Metric", "Enigma", "Double Transposition", "ASCII", "ADFGVX", "Running Key", "Homophonic Substitution", "ABCDEFGHIK"]
        self.InfoOptions = ["Websites", "William's Super Awesome Code Creaker", "Morse Code", "VIC Cipher", "Levenshtein Metric", "Enigma", "Double Transposition", "ASCII", "ADFGVX", "Running Key", "Homophonic Substitution",
                            "ABCDEFGHIK", "Letter Frequencies"]

        self.InfoOptions.sort()

        self.InfoOption = tkinter.StringVar(self)
        #self.InfoOption.set("Caesar")
        #self.InfoOption.set("MorseCode")
        #self.InfoOption.set("Morse Code")
        self.InfoOption.set("Websites")

        self.infoPage = 0

        self.InfoMenu = ttk.Combobox(self.InfoFrame, textvariable = self.InfoOption, values = self.InfoOptions)
        self.InfoMenu.place(x = 80, y = 10)

        self.InfoLabel = tkinter.Label(self.InfoFrame, text = "Info:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.InfoLabel.place(x = 10, y =8)

        #self.InfoBox = tkinter.Text(self.InfoFrame, width = 70, height = 100, bg = ButtonColour)
        #self.InfoBox = tkinter.Text(self.InfoFrame, width = 65, height = 37, bg = "#ffffff")
        self.InfoBox = tkinter.scrolledtext.ScrolledText(self.InfoFrame, width = 65, height = 37, bg = "#ffffff")
        self.InfoBox.place(x = 10, y = 50)

        #self.InfoLoadButton = tkinter.Button(self.ChallengeFrame, text = "Load", bg = ButtonColour, command = self.LoadInfoCommand)
        self.InfoLoadButton = tkinter.Button(self.InfoFrame, text = "Load", bg = ButtonColour, command = self.LoadInfoCommand)
        #self.InfoLoadButton.place(x = 130, y = 10)
        #self.InfoLoadButton.place(x = 200, y = 8)
        self.InfoLoadButton.place(x = 250, y = 7)

        self.InfoPageLeftButton = tkinter.Button(self.InfoFrame, text = "<", bg = ButtonColour, command = lambda: self.ChangeInfoPage(-1))
        #self.InfoPageLeftButton.place(x = 270, y = 7)
        #self.InfoPageLeftButton.place(x = 290, y = 7)
        self.InfoPageLeftButton.place(x = 300, y = 7)

        self.InfoPageRightButton = tkinter.Button(self.InfoFrame, text = ">", bg = ButtonColour, command = lambda: self.ChangeInfoPage(1))
        #self.InfoPageRightButton.place(x = 280, y = 7)
        #self.InfoPageRightButton.place(x = 310, y = 7)
        self.InfoPageRightButton.place(x = 330, y = 7)

        #self.InfoPageTitleLabel = tkinter.Label(self.InfoFrame, text = "", bg = ButtonColour)
        #self.InfoPageTitleLabel = tkinter.Label(self.InfoFrame, text = "", bg = BGColour)
        self.InfoPageTitleLabel = tkinter.Label(self.InfoFrame, text = "", bg = "#FFFFFF")
        #self.InfoPageTitleLabel.place(x = 290, y =8)
        #self.InfoPageTitleLabel.place(x = 330, y =8)
        self.InfoPageTitleLabel.place(x = 360, y =10)

        self.LoadInfoCommand()

        self.InfoFrame.place(x = 1330, y = 340)


        self.CipherMachineFrame = tkinter.Frame(self, bg = ButtonColour, width = 1000, height = 300)
        #self.CipherMachineFrame = tkinter.Canvas(self, bg = ButtonColour, width = 1000, height = 300)

        #self.CipherMachineScrollbar = tkinter.Scrollbar(self, orient = "horizontal", command = self.CipherMachineFrame.xview)
        #self.CipherMachineScrollbar.grid(row = 6, column = 1, padx = 100)
        #self.CipherMachineFrame.configure(yscrollcommand = self.CipherMachineScrollbar.set)
        #self.CipherMachineFrame.configure(xscrollcommand = self.CipherMachineScrollbar.set)
        #self.CipherMachineScrollbar.pack(side = "bottom", fill = "x")
        #self.CipherMachineScrollbar.place(x = 100, y = 100)        

        #self.CipherMachineOptions = ["Enigma", "Fialka", "Custom Enigma", "Lorenz"]
        #self.CipherMachineOptions = ["Running Key", "-----", "Enigma", "Fialka", "Custom Enigma", "Lorenz"]
        #self.CipherMachineOptions = ["Homophonic Substitution", "Running Key", "-----", "Enigma", "Fialka", "Custom Enigma", "Lorenz"]
        self.CipherMachineOptions = ["Translation", "-----", "Homophonic Substitution", "Running Key", "-----", "Enigma", "Fialka", "Custom Enigma", "Lorenz"]

        self.CipherMachineOption = tkinter.StringVar(self)
        #self.CipherMachineOption.set("Enigma")
        #self.CipherMachineOption.set("Running Key")
        #self.CipherMachineOption.set("Homophonic Substitution")
        self.CipherMachineOption.set("Translation")

        #self.SolveAsMenu = ttk.Combobox(self.CipherMachineFrame, textvariable = self.CipherMachineOption, values = self.CipherMachineOptions)
        self.CipherMachineMenu = ttk.Combobox(self.CipherMachineFrame, textvariable = self.CipherMachineOption, values = self.CipherMachineOptions)
        #self.SolveAsMenu.bind("<<ComboboxSelected>>", self.ChangeCipherMachine)
        self.CipherMachineMenu.bind("<<ComboboxSelected>>", self.ChangeCipherMachine)
        #self.SolveAsMenu.place(x = 160, y = 10)
        #self.CipherMachineMenu.place(x = 160, y = 10)
        self.CipherMachineMenu.place(x = 170, y = 10)

        #self.CipherTypeLabel = tkinter.Label(self.CipherMachineFrame, text = "Cipher Machine:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.CipherTypeLabel = tkinter.Label(self.CipherMachineFrame, text = "Cipher Workspace:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.CipherTypeLabel.place(x = 10, y = 10)

        self.CipherTypeInfoButton = tkinter.Button(self.CipherMachineFrame, text = "?", bg = ButtonColour, command = self.CipherMachineInfoCommand)
        #self.CipherTypeInfoButton.place(x = 320, y = 8)
        self.CipherTypeInfoButton.place(x = 330, y = 8)

        #self.CipherMachineFrame.place(x = 10, y = 600)
        self.CipherMachineFrame.place(x = 10, y = 700)

        self.CipherMachineBoxWidgets = []

        self.ChangeCipherMachineType("<<ComboboxSelected>>")

        self.SetBindings()

        self.KeyBox = None



    def Exit(self):

        self.destroy()


    def EditKey(self):

        if True:

            print ("This button has been deprecated")

        else:

            self.EditKeyWindow = tkinter.Tk()

            self.EditKeyWindow.title("Edit Key")
            self.EditKeyWindow.iconbitmap("Images/Code Creaker Icon.ico")
            self.EditKeyWindow.geometry("400x400")
            #self.EditKeyWindow.geometry("400x360")
            #self.EditKeyWindow.bg = BGColour
            self.EditKeyWindow.configure(bg = BGColour)

            self.EditKeyWindow.resizable(False, False)

            self.KeyEntries = []

            MaxPerRow = 4

            #Width = 50
            Width = 100

            Height = 50

            EntryWidth = 10

            for letter in range(0, len(alphabetlist)):
                
                #KeyEntries.append((tkinter.Entry(self.EditKeyWindow), tkinter.Label(self.EditKeyWindow, text = alphabetlist[letter] + ":")))
                #self.KeyEntries.append((tkinter.Entry(self.EditKeyWindow, width = EntryWidth), tkinter.Label(self.EditKeyWindow, text = alphabetlist[letter] + ":")))
                #self.KeyEntries.append((tkinter.Entry(self.EditKeyWindow, width = EntryWidth),
                #                        tkinter.Label(self.EditKeyWindow, bg = ButtonColour, text = alphabetlist[letter])))
                self.KeyEntries.append((tkinter.Entry(self.EditKeyWindow, width = EntryWidth),
                                        tkinter.Label(self.EditKeyWindow, bg = BGColour, text = alphabetlist[letter] + ":")))
                
                #self.KeyEntries.append((tkinter.Entry(self.EditKeyWindow, width = EntryWidth),
                #                        tkinter.Label(self.EditKeyWindow, bg = BGColour, text = alphabetlist[letter])))

                #KeyEntries[-1][0].text = Keys[alphabetlist[letter]]
                #KeyEntries[-1][0].text = Key[alphabetlist[letter]]
                #self.KeyEntries[-1][0].text = self.Key[alphabetlist[letter]]
                self.KeyEntries[-1][0].insert(0, self.Key[alphabetlist[letter]])

                #KeyEntries[-1][0].pack()
                #KeyEntries[-1][1].pack()

                x = letter%MaxPerRow*Width

                #y = letter//MaxPerRow*Height
                #y = letter//MaxPerRow*Height+30
                y = letter//MaxPerRow*Height+10

                self.KeyEntries[-1][1].place(x = x, y = y)
                #KeyEntries[-1][0].place(x = x+10, y = y)
                self.KeyEntries[-1][0].place(x = x+20, y = y)


            self.EditKeyOKButton = tkinter.Button(self.EditKeyWindow, text = "OK", command = self.EditKeyOK, font = tkinter.font.Font(size = 12, weight = "bold"))

            #self.EditKeyOK.pack()
            #self.EditKeyOKButton.place(x = 180, y = 380)
            self.EditKeyOKButton.place(x = 180, y = 350)

        return


    def SetUpCodeCreaking(self):

        self.Key = {}

        for letter in alphabetlist:

            #Key[letter] = letter
            self.Key[letter] = letter

        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Transposition"]
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Vignère", "Transposition"]
            #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Vigenère", "Transposition"]
            #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Vigenère", "Transposition", "Playfair"]
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Vigenère", "Transposition", "Playfair"]
            #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Vigenère", "Transposition", "Playfair", "2x2 Hill"]
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Vigenère", "Transposition", "Playfair", "2x2 Hill", "-----", "Modular Simultaneous Equation Solver"]
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Vigenère", "Transposition", "Playfair", "2x2 Hill", "-----", "Simultaneous Mod Equations"]
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Vigenère", "Transposition", "Playfair", "2x2 Hill", "-----", "Simultaneous Mod"]
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Vigenère", "Transposition", "Playfair", "2x2 Hill", "-----",
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Vigenère", "Nihilist", "Transposition", "Playfair", "2x2 Hill",
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Bifid", "Trifid", "Vigenère", "Nihilist", "Transposition", "Playfair",
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Bifid", "Trifid", "Vigenère", "Nihilist", "Autokey" "Transposition",
        """self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Bifid", "Trifid", "Vigenère", "Nihilist", "Autokey", "Transposition",
                            "Playfair",
                            "2x2 Hill",
                            "-----", "Linear Mod", "Simultaneous Mod"]"""
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Bifid", "Trifid", "Vigenère", "Beaufort", "Nihilist", "Autokey",
        #                    "Transposition", "Playfair", "2x2 Hill",
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Bifid", "Trifid", "Vigenère", "Beaufort", "Nihilist", "Autokey",
        #                    "Transposition", "Playfair", "2-Square", "4-Square", "Digraph Substitution", "2x2 Hill",
        #                    #"Transposition", "TranspoVigen" "Playfair", "2-Square", "4-Square", "Digraph Substitution", "2x2 Hill",
        #                    "Transposition", "TranspoVigen", "Playfair", "2-Square", "4-Square", "Digraph Substitution", "2x2 Hill",
        #                    "-----", "Linear Mod", "Simultaneous Mod"]
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Polybius", "Bifid", "Trifid",
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Custom Substitution", "Polybius", "Bifid", "Trifid", "Straddle Checkerboard", "Homophonic Substitution",
        #self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Custom Substitution", "Polybius", "Bifid", "Trifid", "Straddle Checkerboard", "Homophonic Substitution", "Polyalphabetic Substitution",
        self.CipherTypes = ["Caesar", "Affine", "Keyword", "Substitution", "Custom Substitution", "Polybius", "Straddle Checkerboard", "Homophonic Substitution", "Polyalphabetic Substitution", "Bazeries",
                            #"-----", "Vigenère", "Beaufort", "Nihilist", "Autokey", "Trithemius", "Running Total",
                            #"-----", "Vigenère", "Beaufort", "Nihilist", "Autokey", "Trithemius", "Running Total", "Hutton",
                            #"-----", "Vigenère", "Beaufort", "Autokey", "Trithemius", "Running Key", "Running Total", "Hutton",
                            #"-----", "Vigenère", "Beaufort", "Autokey", "Trithemius", "Running Key", "Running Total", "Hutton", "Straddle Vigenère",
                            #"-----", "Vigenère", "Beaufort", "Autokey", "Trithemius", "Running Key", "Running Total", "Hutton",
                            #"-----", "Vigenère", "Beaufort", "Autokey", "Trithemius", "Running Key", "Running Total", "Hutton", "N-Graph Vigenère",
                            #"-----", "Vigenère", "Beaufort", "Progressive Key", "Autokey", "Interrupted Key", "Ragbaby", "Trithemius", "Running Key", "Running Total", "Hutton", "N-Graph Vigenère",
                            "-----", "Vigenère", "Beaufort", "Progressive Key", "Autokey", "Interrupted Key", "Ragbaby", "Trithemius", "Running Key", "Running Total", "Hutton", "N-Graph Vigenère", "Polybius + Vigenère",
                            #"-----", "Transposition", "TranspoVigen",
                            #"-----", "Transposition", "Myszkowski Transposition", "Double Transposition", "TranspoVigen",
                            #"-----", "Transposition", "Myszkowski Transposition", "Double Transposition", "Vigenère + Transposition",
                            #"-----", "Transposition", "Myszkowski Transposition", "Double Transposition", "Rail Fence", "Vigenère + Transposition",
                            #"-----", "Transposition", "Myszkowski Transposition", "Double Transposition", "Rail Fence", "Substitution + Transposition", "Vigenère + Transposition",
                            #"-----", "Transposition", "Myszkowski Transposition", "Double Transposition", "Rail Fence", "Substitution + Transposition", "Vigenère + Transposition", "Transposition + Vigenère",
                            #"-----", "Transposition", "Myszkowski Transposition", "Double Transposition", "Rail Fence", "AMSCO", "Substitution + Transposition", "Vigenère + Transposition", "Transposition + Vigenère",
                            #"-----", "Transposition", "Specific Transposition", "Myszkowski Transposition", "Double Transposition", "Rail Fence", "AMSCO", "Substitution + Transposition", "Vigenère + Transposition", "Transposition + Vigenère",
                            "-----", "Transposition", "Specific Transposition", "Myszkowski Transposition", "Double Transposition", "Rail Fence", "AMSCO", "Cadenus","Substitution + Transposition", "Vigenère + Transposition",
                            "Transposition + Vigenère", "Nicodemus",
                            #"-----", "Transposition", "Myszkowski Transposition", "Double Transposition", "TranspoVigen", "Hutton",
                            #"-----", "Playfair", "2-Square", "4-Square", "Digraph Substitution", "2x2 Hill",
                            #"-----", "Playfair", "2-Square", "3-Square", "4-Square", "Digraph Substitution", "2x2 Hill",
                            #"-----", "Playfair", "Seriated Playfair", "2-Square", "3-Square", "4-Square", "Digraph Substitution", "2x2 Hill",
                            #"-----", "Playfair", "Seriated Playfair", "2-Square", "3-Square", "4-Square", "Digraph Substitution", "2x2 Hill", "NxN Hill",
                            "-----", "Playfair", "Seriated Playfair", "Slidefair", "Portax", "2-Square", "3-Square", "4-Square", "Digraph Substitution", "2x2 Hill", "NxN Hill",
                            "-----", "Bifid", "Trifid",
                            "-----", "Nihilist", "Straddle Nihilist", "VIC Cipher",
                            #"-----", "ADFGX", "ADFGVX",
                            #"-----", "ADFGX", "ADFGVX", "VIC Cipher",
                            #"-----", "ADFGX", "ADFGVX",
                            "-----", "ADFGX", "ADFGVX", "ABCDEFGHIK",
                            "-----", "Enigma", "Lorenz", "Fialka",
                            #"-----", "Morse Code",
                            #"-----", "Morse Code", "Pollux",
                            "-----", "Morse Code", "Pollux", "Fractionated Morse", "Morbit",
                            #"-----", "Linear Mod", "Simultaneous Mod"]
                            #"-----", "IOC", "Linear Mod", "Simultaneous Mod"]
                            #"-----", "IOC", "N-Gram IOC", "Linear Mod", "Simultaneous Mod"]
                            #"-----", "IOC", "N-Gram IOC", "Linear Mod", "Simultaneous Mod", "Letter <--> Num"]
                            #"-----", "IOC", "N-Gram IOC", "Linear Mod", "Simultaneous Mod", "Letter <--> Num", "Programmable Use"]
                            #"-----", "IOC", "N-Gram IOC", "N-Gram Vigenère IOC", "Linear Mod", "Simultaneous Mod", "Letter <--> Num", "Programmable Use"]
                            #"-----", "IOC", "N-Gram IOC", "N-Gram Vigenère IOC", "Stepped N-Gram Variance", "Linear Mod", "Simultaneous Mod", "Letter <--> Num", "Programmable Use"]
                            #"-----", "IOC", "N-Gram IOC", "N-Gram Vigenère IOC", "N-Gram Vigenère IOC For Key Letter"Stepped N-Gram Variance",
                            "-----", "IOC", "N-Gram IOC", "N-Gram Vigenère IOC", "Stepped N-Gram Variance",
                            #"-----", "Linear Mod", "Simultaneous Mod", "Letter <--> Num", "Cut Into Chunks", "Programmable Use"]
                            #"-----", "Linear Mod", "Simultaneous Mod", "Letter <--> Num", "Base N <--> Letter", "Cut Into Chunks", "Programmable Use"]
                            #"-----", "Chi-Squared",
                            "-----", "Quadgram Score", "Chi-Squared", "Percentage Correct",
                            "-----", "Linear Mod", "Simultaneous Mod",
                            "-----", "Base N --> Base M",
                            #"-----", "Letter <--> Num", "Base N <--> Letter", "Cut Into Chunks", "Reverse Words",
                            #"-----", "Letter <--> Num", "Base N <--> Letter", "Cut Into Chunks", "Reverse Words", "Replace Char(s)",
                            "-----", "Letter <--> Num", "Base N <--> Letter", "ASCII <--> Letter", "Cut Into Chunks", "Reverse Words", "Replace Char(s)", "Remove Punctuation And Spaces",
                            #"-----", "Morse Code",
                            "-----", "Word Count",
                            "-----", "Programmable Use", "Programmable Use 2", "Programmable Use 3", "Programmable Use 4", "Programmable Use 5"]

        self.Keys = []

        self.Keys.append(self.Key)

        self.OldKey = self.Key


    def EditKeyOK(self):

        for letter in range(0, len(alphabetlist)):

            #self.Key[alphabetlist[letter]] = self.KeyEntries[letter][0].get()

            NewLetterKey = self.KeyEntries[letter][0].get().lower()

            if NewLetterKey in alphabetset:

                self.Key[alphabetlist[letter]] = NewLetterKey

            else:

                self.Key[alphabetlist[letter]] = ""

        self.EditKeyWindow.destroy()

        return


    def Decode(self):

        self.UpdateKey()

        #Msg = self.InputBox.get()
        #Msg = self.InputBox.get("1.0", END)
        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        if len(Msg) > 0:

            if isinstance(self.Key, dict):

                #print (Msg)

                if self.UsePolyalphabet.get() == 0:

                    DecodedMsg = Decode(Msg, self.Key)

                elif self.UsePolyalphabet.get() == 1:

                    #DecodedMsg = DecodePolyalphabet(Msg, self.Keys)
                    DecodedMsg = Decode(Msg, self.Keys)

                #self.OutputBox.delete(0, END)
                #self.OutputBox.delete(0, tkinter.END)
                self.OutputBox.delete("1.0", tkinter.END)

                #self.OutputBox.insert(0, DecodedMsg)
                self.OutputBox.insert("1.0", DecodedMsg)

            elif isinstance(self.Key, PlayfairKey):

                #DecodedMsg = self.Key.DecodeMsg(Msg)
                DecodedMsg = self.Key.DecodeMsg(Msg, False)

                self.PlaceText(DecodedMsg, self.OutputBox)

            elif isinstance(self.Key, DigraphSubKey):

                #DecodedMsg = self.Key.DecodeMsg(Msg)
                DecodedMsg = self.Key.Decode(Msg)

                self.PlaceText(DecodedMsg, self.OutputBox)


    def Encode(self):

        self.UpdateKey()

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        if len(Msg) > 0:

            if isinstance(self.Key, dict):

                if self.UsePolyalphabet.get() == 0:

                    EncodedMsg = Encode(Msg, self.Key)

                elif self.UsePolyalphabet.get() == 1:

                    EncodedMsg = Encode(Msg, self.Keys)

                self.OutputBox.delete("1.0", tkinter.END)

                self.OutputBox.insert("1.0", EncodedMsg)

            elif isinstance(self.Key, PlayfairKey):

                #EncodedMsg = self.Key.EncodeMsg(Msg)
                EncodedMsg = self.Key.EncodeMsg(Msg).upper()

                #self.PlaceText(EncodedMsg, OutputBox)
                self.PlaceText(EncodedMsg, self.OutputBox)


    def AnalyseText(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        Report = AnalyseText(Msg)

        self.AnalyseTextBox.delete("1.0", tkinter.END)
        self.AnalyseTextBox.insert("1.0", Report)



    def UpdateKey(self):

        """if self.ShowFrequenciesChart == True:

            self.HideFreqChart()

            self.ShowKey()

            self.UpdateKeyDisplay()

            self.ShowFrequenciesChart = False"""

        if isinstance(self.Key, dict):

            for letter in range(0, len(alphabetlist)):

                NewLetterKey = self.KeyEntries[letter][0].get().lower()

                if NewLetterKey in alphabetset:

                    self.Key[alphabetlist[letter]] = NewLetterKey

                else:

                    self.Key[alphabetlist[letter]] = ""

        elif isinstance(self.Key, PlayfairKey):

            for x in range(0, self.Key.GetWidth()):

                for y in range(0, self.Key.GetHeight()):

                    NewLetterKey = self.KeyEntries[x*self.Key.GetHeight()+y].get().lower()

                    if NewLetterKey in alphabetset:

                        #self.Key.SetItem(x, y, NewLetterKey)
                        self.Key.SetKeyItem(x, y, NewLetterKey)

                    else:

                        #self.Key[alphabetlist[letter]] = ""
                        self.Key.SetKeyItem(x, y, "")


        elif isinstance(self.Key, DigraphSubKey):

            Text = self.KeyBox.get("1.0", tkinter.END)

            self.Key.ParseKey(Text)

            

        self.SaveCurrentKey()


    def UpdateKeyDisplay(self):

        if isinstance(self.Key, dict):

            if isinstance(self.OldKey, dict):

                for letter in range(0, len(alphabetlist)):

                    self.KeyEntries[letter][0].delete(0, tkinter.END)

                    self.KeyEntries[letter][0].insert(0, self.Key[alphabetlist[letter]])

            else:

                #self.HideKey()

                #self.ClearKeyEntries()
                self.ClearKeyDisplay()

                self.ShowKey()

        elif isinstance(self.Key, PlayfairKey):

            if isinstance(self.OldKey, PlayfairKey):

                for x in range(0, self.Key.GetWidth()):

                    for y in range(0, self.Key.GetHeight()):

                        #self.KeyEntries[y*self.Key.GetWidth()+x][0].delete(0, tkinter.END)
                        self.KeyEntries[x*self.Key.GetHeight()+y].delete(0, tkinter.END)

                        #self.KeyEntries[y*self.Key.GetWidth()+x][0].insert(0, self.Key.GetKeyItem(x, y))
                        self.KeyEntries[x*self.Key.GetHeight()+y].insert(0, self.Key.GetKeyItem(x, y))

            else:

                #self.HideKey()

                #self.ClearKeyEntries()

                self.ClearKeyDisplay()

                self.ShowPlayfairKey()


        elif isinstance(self.Key, DigraphSubKey):

            if isinstance(self.OldKey, DigraphSubKey):

                self.PlaceText(self.Key.GetKeyText, self.KeyBox)

            else:

                self.ClearKeyDisplay()

                self.ShowDigraphSubKey()


        self.OldKey = self.Key

        self.SaveCurrentKey()


    def ShiftKey(self, Amount):

        self.UpdateKey()

        self.NewKey = {}

        #for x in self.Key:

            #self.Key[x] = alphabetlist.index(self.Key[x]) + Amount
            #self.NewKey[x] = alphabetlist.index(self.Key[x]) + Amount

            #while self.Key[x] > 25:
            #while self.NewKey[x] > 25:

                #self.Key[x] -= 26
                #self.NewKey[x] -= 26

            #while self.Key[x] < 0:
            #while self.NewKey[x] < 0:

                #self.Key[x] += 26
                #self.NewKey[x] += 26

            #self.Key[x] = alphabetlist.index[self.Key[x]]
            #self.Key[x] = alphabetlist[self.Key[x]]
            #self.NewKey[x] = alphabetlist[self.Key[x]]
            #self.NewKey[x] = alphabetlist[self.NewKey[x]]

            #print (x, self.Key[x], alphabetlist.index(self.Key[x]), alphabetlist.index(self.Key[x]) + Amount)

        for x in self.Key:

            index = alphabetlist.index(x) + Amount

            while index > 25:

                index -= 26

            while index < 0:

                index += 26

            #self.NewKey[index] = self.Key[x]
            self.NewKey[alphabetlist[index]] = self.Key[x]

        self.Key = self.NewKey

        self.UpdateKeyDisplay()


    def CreateKeyWordKey(self):

        #self.KeyWord = self.KeyWordEntry.get().lower()
        self.KeyWord = RemovePunctuation(self.KeyWordEntry.get()).lower()

        KeyWordNoSpaces = ""

        for x in self.KeyWord:

            if x != " ":

                #KeyWordNoSpaces = keyWordNoSpaces + x
                KeyWordNoSpaces = KeyWordNoSpaces + x

        self.KeyWord = KeyWordNoSpaces

        if self.KeyWord != "":

            #UsedLetters = set()

           # for x in range(0, len(alphabetlist)):

           #     if x < len(set(self.KeyWord)):

           #         self.Key[alphabetlist[x]] = self.KeyWord[x]

           #         UsedLetters.append(self.Key[alphabetlist[x]])#

            NewKey = []

            #for x in range(0, len(self.KeyWord)):

                #AlreadyUsed = False

                #for entry in NewKey:

                    #if self.Key

                #if self.KeyWord[x] not in NewKey:

                    #self.NewKey.append(self.KeyWord[x])
                    #NewKey.append(self.KeyWord[x])


            #for x in range(0, len(alphabetlist)):

                #nextletter = alphabetlist[x+alphabetlist.index(NewKey[-1])]
                #nextletter = x+alphabetlist.index(NewKey[-1])

                #while nextletter > 25:

                    #nextletter -= 26

                #nextletter = alphabetlist[nextletter]

                #if alphabetlist[x] not in NewKey:
                #if nextletter not in NewKey:

                    #self.NewKey.append(alphabetlist[x])
                    #NewKey.append(alphabetlist[x])
                    #NewKey.append(nextletter)


            #print (NewKey)

            for x in range(0, len(self.KeyWord)):

                if self.KeyWord[x] not in NewKey:

                    NewKey.append(self.KeyWord[x])


            for x in range(alphabetlist.index(NewKey[-1]), len(alphabetlist)):

                if alphabetlist[x] not in NewKey:
                    
                    NewKey.append(alphabetlist[x])


            for x in range(0, alphabetlist.index(NewKey[-1])):

                if alphabetlist[x] not in NewKey:
                    
                    NewKey.append(alphabetlist[x])


            for x in range(0, len(NewKey)):

                self.Key[alphabetlist[x]] = NewKey[x]

            self.UpdateKeyDisplay()


    def ClearKey(self):

        for x in self.Key:

            self.Key[x] = ""

        self.UpdateKeyDisplay()



    def AttemptSolve(self):

        self.UpdateKey()

        #print (self.Key)

        self.GetDictionary()

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        #print (self.Key)

        #self.Key = AttemptToSolve(Msg, self.Key, self.Dictionary)
        SolveAttempt = AttemptToSolve(Msg, self.Key, self.Dictionary)

        #print (self.Key)

        if SolveAttempt != None:

            self.Key = SolveAttempt

        #print (self.Key)

        self.UpdateKeyDisplay()

        #print (self.Key)



    def GetDictionary(self):

        self.Dictionary = open("Large Dictionary.txt", "r").readlines()

        for item in range(0, len(self.Dictionary)):

            self.Dictionary[item] = RemovePunctuation(self.Dictionary[item].lower())

        self.Dictionary = set(self.Dictionary)



    def CalculateKey(self):

        self.UpdateKey()

        SelectedCipher = self.SolveAsMenu.get()

        #print (SelectedCipher)

        if SelectedCipher == "Caesar":

            Shift = CalculateCaesarShift(self.Key)

            if Shift[0] == True:

                self.Key = CreateCaesarKey(self.Key, Shift[1])

                self.CipherTypeOutput.delete("1.0", tkinter.END)

                self.CipherTypeOutput.insert("1.0", "The shift is " + str(Shift[1]) + ".")

                self.UpdateKeyDisplay()

            else:

                self.CipherTypeOutput.delete("1.0", tkinter.END)

                self.CipherTypeOutput.insert("1.0", "The key does not fit a Caesar Shift pattern.")


        if SelectedCipher == "Affine":

            Shift = CalculateAffineShift(self.Key)

            if Shift[0] == True:

                #self.Key = CreateAffineKey(self.Key, Shift[1], Shift[2])

                ReturnedKey = CreateAffineKey(self.Key, Shift[1], Shift[2])

                if ReturnedKey != False:
                #if ReturnedKey or not ReturnedKey:

                    self.Key = ReturnedKey

                    self.CipherTypeOutput.delete("1.0", tkinter.END)

                    #self.CipherTypeOutput.insert("1.0", "The shift is " + str(Shift[1]) + "x + " + str(Shift[2]) + ".")
                    #self.CipherTypeOutput.insert("1.0", "The shift is " + str(Shift[1]) + "x + " + str(Shift[2]-Shift[1]+1) + ".")

                    #b = Shift[2]-Shift[1]+1
                    #b = (Shift[2]-Shift[1]-1)%26
                    b = Shift[2]%26

                    #print (Shift[2], Shift[1], b)

                    a = Shift[1]

                    #if Shift[1] == 1:
                    if a == 1:

                        #Shift[1] = ""
                        a = ""

                    if b > 0:

                        #self.CipherTypeOutput.insert("1.0", "The shift is " + str(Shift[1]) + "x + " + str(b) + ".")
                        self.CipherTypeOutput.insert("1.0", "The shift is x -> " + str(a) + "x + " + str(b) + ".")

                    elif b < 0:

                        #self.CipherTypeOutput.insert("1.0", "The shift is " + str(Shift[1]) + "x - " + str(b) + ".")
                        #self.CipherTypeOutput.insert("1.0", "The shift is " + str(Shift[1]) + "x - " + str(abs(b)) + ".")
                        self.CipherTypeOutput.insert("1.0", "The shift is x -> " + str(a) + "x - " + str(abs(b)) + ".")

                    elif b == 0:

                        #self.CipherTypeOutput.insert("1.0", "The shift is " + str(Shift[1]) + "x.")
                        self.CipherTypeOutput.insert("1.0", "The shift is x -> " + str(a) + "x.")

                    self.UpdateKeyDisplay()

                else:

                    self.CipherTypeOutput.delete("1.0", tkinter.END)

                    #self.CipherTypeOutput.insert("1.0", "The key does not fit an Affine Shift pattern.")

                    #self.CipherTypeOutput.insert("1.0", "The key does not fit an Affine Shift pattern. The calculated multiplier of " + str(Shift[1]) + " has no multiplicative inverse.")
                    #self.CipherTypeOutput.insert("1.0", "The key does not fit an Affine Shift pattern. The calculate shift gives duplicate letters.")
                    #self.CipherTypeOutput.insert("1.0", "The key does not fit an Affine Shift pattern.\nThe calculate shift gives duplicate letters.")
                    #self.CipherTypeOutput.insert("1.0", "The key does not fit an Affine Shift pattern.\nThe calculated shift gives duplicate letters.")
                    self.CipherTypeOutput.insert("1.0", "The key does not fit an Affine Shift pattern.\nThe calculated shift gives duplicate letters, or doesn't match all given keys.")

            else:

                self.CipherTypeOutput.delete("1.0", tkinter.END)

                #self.CipherTypeOutput.insert("1.0", "The key does not fit an Affine Shift pattern.")

                if Shift[1] == 1:
                    
                    #self.CipherTypeOutput.insert("1.0", "The key does not fit an Affine Shift pattern. Probably not enough given variables.")
                    self.CipherTypeOutput.insert("1.0", "The key does not fit an Affine Shift pattern.\nProbably not enough given variables.")

                else:

                    #self.CipherTypeOutput.insert("1.0", "The key does not fit an Affine Shift pattern. The calculated multiplier of " + str(Shift[1]) + " has no multiplicative inverse.")
                    self.CipherTypeOutput.insert("1.0", "The key does not fit an Affine Shift pattern.\nThe calculated multiplier of " + str(Shift[1]) + " has no multiplicative inverse.")


        """#elif CipherType == "Transposition":
        elif SelectedCipher == "Transposition":

            print ("Let's TRANSPOSE!")

            RowOrColumn = ["Row", "Column"][self.RowsOrColumns.get()]

            Length = int(self.RowColumnLengthEntryButton.get())

            Msg = self.InputBox.get("1.0", tkinter.END)

            Msg = Transpose(Msg, RowOrColumn, Length)

            self.OutputBox.delete("1.0", tkinter.END)

            self.OutputBox.insert("1.0", Msg)"""


    def ChangeCipherType(self, event):

        CipherType = self.SolveAsMenu.get()

        self.ClearCipherBox()

        if CipherType == "Caesar":

            self.CalculateKeyButton = tkinter.Button(self.SolveAsFrame, text = "Calculate", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.CalculateKey)
            self.CalculateKeyButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.CalculateKeyButton)


        elif CipherType == "Affine":

            self.CalculateKeyButton = tkinter.Button(self.SolveAsFrame, text = "Calculate", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.CalculateKey)
            self.CalculateKeyButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.CalculateKeyButton)

            self.CalculateKeyButton = tkinter.Button(self.SolveAsFrame, text = "Add Key", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.AddAffineKey)
            #self.CalculateKeyButton.place(x = 120, y = 160)
            self.CalculateKeyButton.place(x = 115, y = 160)

            self.CipherBoxWidgets.append(self.CalculateKeyButton)

            self.AffineAEntry = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.AffineAEntry.place(x = 60, y = 100)

            self.CipherBoxWidgets.append(self.AffineAEntry)
            
            self.AffineALabel = tkinter.Label(self.SolveAsFrame, text = "x  + ", bg = ButtonColour)
            self.AffineALabel.place(x = 90, y = 100)

            self.CipherBoxWidgets.append(self.AffineALabel)

            self.AffineBEntry = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.AffineBEntry.place(x = 140, y = 100)

            self.CipherBoxWidgets.append(self.AffineBEntry)
            
            self.AffineBLabel = tkinter.Label(self.SolveAsFrame, text = "   (mod 26) ", bg = ButtonColour)
            self.AffineBLabel.place(x = 170, y = 100)

            self.CipherBoxWidgets.append(self.AffineBLabel)


        if CipherType == "Transposition":

            self.CalculateKeyButton = tkinter.Button(self.SolveAsFrame, text = "Transpose", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.TransposeText)
            #self.CalculateKeyButton.place(x = 110, y = 250)
            self.CalculateKeyButton.place(x = 30, y = 250)

            self.CipherBoxWidgets.append(self.CalculateKeyButton)

            self.RowsOrColumns = tkinter.IntVar()

            self.RowRadioButton = tkinter.Radiobutton(self.SolveAsFrame, text = "Rows", bg = ButtonColour, variable = self.RowsOrColumns, value = 1)
            #self.RowRadioButton.place(x = 30, y = 300)
            self.RowRadioButton.place(x = 30, y = 100)

            self.ColumnRadioButton = tkinter.Radiobutton(self.SolveAsFrame, text = "Columns", bg = ButtonColour, variable = self.RowsOrColumns, value = 2)
            #self.ColumnRadioButton.place(x = 230, y = 300)
            #self.ColumnRadioButton.place(x = 230, y = 100)
            #self.ColumnRadioButton.place(x = 130, y = 100)
            self.ColumnRadioButton.place(x = 100, y = 100)

            self.SwitchColumnsRadioButton = tkinter.Radiobutton(self.SolveAsFrame, text = "Switch Columns", bg = ButtonColour, variable = self.RowsOrColumns, value = 3)
            self.SwitchColumnsRadioButton.place(x = 170, y = 100)

            self.CipherBoxWidgets.append(self.RowRadioButton)
            self.CipherBoxWidgets.append(self.ColumnRadioButton)
            #self.SwitchColumnsRadioButton.append(self.ColumnRadioButton)
            self.CipherBoxWidgets.append(self.SwitchColumnsRadioButton)

            self.RowsOrColumns.set(1)

            #self.RowColumnLengthEntryButton = tkinter.Entry(self.SolveAsFrame, width = 20)
            self.RowColumnLengthEntryButton = tkinter.Entry(self.SolveAsFrame, width = 15)
            #self.RowColumnLengthEntryButton.place(x = 100, y = 400)
            self.RowColumnLengthEntryButton.place(x = 100, y = 150)

            self.CipherBoxWidgets.append(self.RowColumnLengthEntryButton)


            self.TranspositionDistanceButton = tkinter.Button(self.SolveAsFrame, text = "Distances", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.CipherTranspositionDistance)
            #self.TranspositionDistanceButton.place(x = 110, y = 250)
            #self.TranspositionDistanceButton.place(x = 110, y = 200)
            self.TranspositionDistanceButton.place(x = 30, y = 200)

            self.CipherBoxWidgets.append(self.TranspositionDistanceButton)

            #self.SolveTransposeButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveTransoseCipher)
            #//self.SolveTransposeButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveTransposeCipher)
            #self.CrackTransposeButton = tkinter.Button(self.SolveAsFrame, text = "Crack", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.CrackTransposeCipher)
            self.CrackTransposeButton = tkinter.Button(self.SolveAsFrame, text = "Anagram", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.CrackTransposeCipher)
            #self.SolveTransposeButton.place(x = 190, y = 250)
            self.CrackTransposeButton.place(x = 190, y = 200)

            self.CipherBoxWidgets.append(self.CrackTransposeButton)

            #self.SolveTransposeButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveTransposeCipher)
            self.SolveTransposeButton = tkinter.Button(self.SolveAsFrame, text = "Solve C++", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveTransposeCipher)
            #self.SolveTransposeButton.place(x = 190, y = 250)
            #self.SolveTransposeButton.place(x = 170, y = 250)
            self.SolveTransposeButton.place(x = 120, y = 250)

            self.CipherBoxWidgets.append(self.SolveTransposeButton)

            self.SolveTransposeButton = tkinter.Button(self.SolveAsFrame, text = "Solve C#", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveTransposeCSharpCipher)
            self.SolveTransposeButton.place(x = 210, y = 250)

            self.CipherBoxWidgets.append(self.SolveTransposeButton)


        elif CipherType == "Substitution":

            self.SolveSubstitutionButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveSubstitutionCipher)
            self.SolveSubstitutionButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.SolveSubstitutionButton)

            self.SolveMonoSubMethod = tkinter.IntVar()

            self.SubWordRadioButton = tkinter.Radiobutton(self.SolveAsFrame, text = "Words", bg = ButtonColour, variable = self.SolveMonoSubMethod, value = 1)
            #self.SubWordRadioButton.place(x = 70, y = 170)
            self.SubWordRadioButton.place(x = 70, y = 160)

            self.SubQuadgramsRadioButton = tkinter.Radiobutton(self.SolveAsFrame, text = "Quadgrams", bg = ButtonColour, variable = self.SolveMonoSubMethod, value = 2)
            #self.SubQuadgramsRadioButton.place(x = 70, y = 200)
            self.SubQuadgramsRadioButton.place(x = 70, y = 190)

            #self.SubBigramRadioButton = tkinter.Radiobutton(self.SolveAsFrame, text = "Bigram", bg = ButtonColour, variable = self.SolveMonoSubMethod, value = 3)
            self.SubBigramRadioButton = tkinter.Radiobutton(self.SolveAsFrame, text = "Bigrams / Fast", bg = ButtonColour, variable = self.SolveMonoSubMethod, value = 3)
            #self.SubBigramRadioButton.place(x = 70, y = 230)
            self.SubBigramRadioButton.place(x = 70, y = 220)

            self.CipherBoxWidgets.append(self.SubWordRadioButton)
            self.CipherBoxWidgets.append(self.SubQuadgramsRadioButton)
            self.CipherBoxWidgets.append(self.SubBigramRadioButton)

            self.SolveMonoSubMethod.set(1)


        elif CipherType == "Polybius":

            self.ReplacePolybiusButton = tkinter.Button(self.SolveAsFrame, text = "Replace", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ReplacePolybiusCipher)
            self.ReplacePolybiusButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.ReplacePolybiusButton)

            self.PolybiusNGramLengthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.PolybiusNGramLengthEntry.place(x = 160, y = 170)

            self.CipherBoxWidgets.append(self.PolybiusNGramLengthEntry)
            
            #self.PolybiusNGramLengthLabel = tkinter.Label(self.SolveAsFrame, text = "N-Gran Length:", bg = ButtonColour)
            self.PolybiusNGramLengthLabel = tkinter.Label(self.SolveAsFrame, text = "N-Gram Length:", bg = ButtonColour)
            self.PolybiusNGramLengthLabel.place(x = 50, y = 170)

            self.CipherBoxWidgets.append(self.PolybiusNGramLengthLabel)


        elif CipherType == "Playfair":

            self.SolvePlayfairButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolvePlayfairCipher)
            self.SolvePlayfairButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.SolvePlayfairButton)

            self.CreatePlayfairKeyButton = tkinter.Button(self.SolveAsFrame, text = "Create Key", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.CreatePlayfairKey)
            #self.CreatePlayfairKeyButton.place(x = 100, y = 170)
            #self.CreatePlayfairKeyButton.place(x = 100, y = 120)
            #self.CreatePlayfairKeyButton.place(x = 100, y = 80)
            self.CreatePlayfairKeyButton.place(x = 100, y = 90)

            self.CipherBoxWidgets.append(self.CreatePlayfairKeyButton)
            
##            #self.TemperatureEntryButton = tkinter.Entry(self.SolveAsFrame, width = 15)
##            self.TemperatureEntryButton = tkinter.Entry(self.SolveAsFrame, width = 7)
##            #self.TemperatureEntryButton.place(x = 160, y = 120)
##            #self.TemperatureEntryButton.place(x = 170, y = 120)
##            self.TemperatureEntryButton.place(x = 180, y = 170)
##            self.TemperatureEntryButton.insert(0, "20")
##
##            self.CipherBoxWidgets.append(self.TemperatureEntryButton)
##
##            #self.TemperatureLabel = tkinter.Entry(self.SolveAsFrame, text = "Starting Temperature", bg = ButtonColour)
##            #self.TemperatureLabel = tkinter.Label(self.SolveAsFrame, text = "Starting Temperature", bg = ButtonColour)
##            self.TemperatureLabel = tkinter.Label(self.SolveAsFrame, text = "Starting Temperature:", bg = ButtonColour)
##            #self.TemperatureLabel.place(x = 800, y = 120)
##            #self.TemperatureLabel.place(x = 70, y = 120)
##            #self.TemperatureLabel.place(x = 50, y = 120)
##            self.TemperatureLabel.place(x = 50, y = 170)
##
##            self.CipherBoxWidgets.append(self.TemperatureLabel)
##
##            self.StepEntryButton = tkinter.Entry(self.SolveAsFrame, width = 7)
##            #self.StepEntryButton.place(x = 100, y = 170)
##            #self.StepEntryButton.place(x = 100, y = 190)
##            self.StepEntryButton.place(x = 100, y = 195)
##            self.StepEntryButton.insert(0, "0.2")
##
##            self.CipherBoxWidgets.append(self.StepEntryButton)
##
##            #self.StepLabel = tkinter.Label(self.SolveAsFrame, text = "StepEntryButton:", bg = ButtonColour)
##            self.StepLabel = tkinter.Label(self.SolveAsFrame, text = "Step:", bg = ButtonColour)
##            #self.StepLabel.place(x = 50, y = 170)
##            #self.StepLabel.place(x = 50, y = 190)
##            self.StepLabel.place(x = 50, y = 195)
##            #self.StepLabel.place(x = 90, y = 195)
##
##            self.CipherBoxWidgets.append(self.StepLabel)
##
##            self.CountEntryButton = tkinter.Entry(self.SolveAsFrame, width = 10)
##            #self.CountEntryButton.place(x = 110, y = 210)
##            self.CountEntryButton.place(x = 100, y = 220)
##            self.CountEntryButton.insert(0, "10000")
##
##            self.CipherBoxWidgets.append(self.CountEntryButton)
##
##            self.CountLabel = tkinter.Label(self.SolveAsFrame, text = "Count:", bg = ButtonColour)
##            #self.CountLabel.place(x = 50, y = 210)
##            self.CountLabel.place(x = 50, y = 220)
##
##            self.CipherBoxWidgets.append(self.CountLabel)

            self.PlayfairAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            #self.PlayfairAlphabetEntry.place(x = 50, y = 170)
            self.PlayfairAlphabetEntry.place(x = 30, y = 170)
            self.PlayfairAlphabetEntry.insert(0, "abcdefghiklmnopqrstuvwxyz")
            self.CipherBoxWidgets.append(self.PlayfairAlphabetEntry)

            self.PlayfairAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Alphabet:", bg = ButtonColour)
            #self.PlayfairAlphabetLabel.place(x = 10, y = 170)
            #self.PlayfairAlphabetLabel.place(x = 10, y = 150)
            self.PlayfairAlphabetLabel.place(x = 10, y = 140)
            self.CipherBoxWidgets.append(self.PlayfairAlphabetLabel)

            self.PlayfairHeightEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.PlayfairHeightEntry.place(x = 100, y = 195)
            self.PlayfairHeightEntry.insert(0, "5")
            self.CipherBoxWidgets.append(self.PlayfairHeightEntry)

            self.PlayfairHeightLabel = tkinter.Label(self.SolveAsFrame, text = "Height:", bg = ButtonColour)
            self.PlayfairHeightLabel.place(x = 50, y = 195)
            self.CipherBoxWidgets.append(self.PlayfairHeightLabel)

            #self.PlayfairWidthEntry = tkinter.Entry(self.SolveAsFrame, width = 10)
            self.PlayfairWidthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.PlayfairWidthEntry.place(x = 100, y = 220)
            self.PlayfairWidthEntry.insert(0, "5")
            self.CipherBoxWidgets.append(self.PlayfairWidthEntry)

            self.PlayfairWidthLabel = tkinter.Label(self.SolveAsFrame, text = "Width:", bg = ButtonColour)
            self.PlayfairWidthLabel.place(x = 50, y = 220)
            self.CipherBoxWidgets.append(self.PlayfairWidthLabel)


        elif CipherType == "2x2 Hill":

            #self.Solve2x2HillButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveSolve2x2HillCipher)
            self.Solve2x2HillButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.Solve2x2HillCipher)
            self.Solve2x2HillButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.Solve2x2HillButton)


        elif CipherType == "Vigenère":

            #self.SolveVigenèreButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolvePlayfairCipher)
            #self.SolveVigenèreButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveVigenereCipher)
            self.SolveVigenèreButton = tkinter.Button(self.SolveAsFrame, text = "Solve Keyed", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveVigenereCipher)
            #self.SolveVigenèreButton.place(x = 110, y = 250)
            #self.SolveVigenèreButton.place(x = 50, y = 250)
            self.SolveVigenèreButton.place(x = 30, y = 250)

            self.CipherBoxWidgets.append(self.SolveVigenèreButton)
            
            self.KeyWordLengthEntryButton = tkinter.Entry(self.SolveAsFrame, width = 7)
            #//self.KeyWordLengthEntryButton.place(x = 140, y = 170)
            self.KeyWordLengthEntryButton.place(x = 160, y = 170)

            self.CipherBoxWidgets.append(self.KeyWordLengthEntryButton)
            
            self.KeyWordLengthLabel = tkinter.Label(self.SolveAsFrame, text = "Key Word Length:", bg = ButtonColour)
            ######################################################################################
            self.KeyWordLengthLabel.place(x = 50, y = 170)

            self.CipherBoxWidgets.append(self.KeyWordLengthLabel)

            self.KeyWordLetterEntryButton = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.KeyWordLetterEntryButton.place(x = 140, y = 195)
            self.KeyWordLetterEntryButton.place(x = 160, y = 195)

            self.CipherBoxWidgets.append(self.KeyWordLetterEntryButton)
            
            self.KeyWordLetterLabel = tkinter.Label(self.SolveAsFrame, text = "Key Word Letter:", bg = ButtonColour)
            self.KeyWordLetterLabel.place(x = 50, y = 195)

            self.CipherBoxWidgets.append(self.KeyWordLetterLabel)

            self.VigenèreFreqKeyButton = tkinter.Button(self.SolveAsFrame, text = "Create Frequency Key", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.CreateVignereFreqKey)
            #self.VigenèreFreqKeyButton.place(x = 70, y = 130)
            self.VigenèreFreqKeyButton.place(x = 70, y = 120)

            self.CipherBoxWidgets.append(self.VigenèreFreqKeyButton)

            self.SolveNormalVigenèreButton = tkinter.Button(self.SolveAsFrame, text = "Solve Normal", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveNormalVigenereCipher)
            #self.SolveNormalVigenèreButton.place(x = 200, y = 250)
            self.SolveNormalVigenèreButton.place(x = 150, y = 250)

            self.CipherBoxWidgets.append(self.SolveNormalVigenèreButton)


        elif CipherType == "Simultaneous Mod":

            self.SolveModButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveMod26Simultaneous)
            self.SolveModButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.SolveModButton)
            
            self.SolveModX1Entry = tkinter.Entry(self.SolveAsFrame, width = 3)
            #self.SolveModX1Entry.place(x = 20, y = 50)
            self.SolveModX1Entry.place(x = 20, y = 100)

            self.CipherBoxWidgets.append(self.SolveModX1Entry)
            
            self.SolveModX1Label = tkinter.Label(self.SolveAsFrame, text = "x  + ", bg = ButtonColour)
            #self.SolveModX1Label.place(x = 50, y = 170)
            self.SolveModX1Label.place(x = 50, y = 100)

            self.CipherBoxWidgets.append(self.SolveModX1Label)

            self.SolveModY1Entry = tkinter.Entry(self.SolveAsFrame, width = 3)
            #self.SolveModY1Entry.place(x = 100, y = 50)
            self.SolveModY1Entry.place(x = 100, y = 100)

            self.CipherBoxWidgets.append(self.SolveModY1Entry)
            
            #self.SolveModY1Label = tkinter.Label(self.SolveAsFrame, text = "y  + ", bg = ButtonColour)
            self.SolveModY1Label = tkinter.Label(self.SolveAsFrame, text = "y  = ", bg = ButtonColour)
            #self.SolveModY1Label.place(x = 130, y = 170)
            self.SolveModY1Label.place(x = 130, y = 100)

            #self.CipherBoxWidgets.append(self.SolveModX1Label)
            self.CipherBoxWidgets.append(self.SolveModY1Label)

            self.SolveModC1Entry = tkinter.Entry(self.SolveAsFrame, width = 3)
            #self.SolveModC1Entry.place(x = 180, y = 50)
            self.SolveModC1Entry.place(x = 180, y = 100)

            self.CipherBoxWidgets.append(self.SolveModC1Entry)
            
            self.SolveModC1Label = tkinter.Label(self.SolveAsFrame, text = "   (mod 26) ", bg = ButtonColour)
            #self.SolveModC1Label.place(x = 210, y = 170)
            self.SolveModC1Label.place(x = 210, y = 100)

            self.CipherBoxWidgets.append(self.SolveModC1Label)



            self.SolveModX2Entry = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.SolveModX2Entry.place(x = 20, y = 160)

            self.CipherBoxWidgets.append(self.SolveModX2Entry)
            
            self.SolveModX2Label = tkinter.Label(self.SolveAsFrame, text = "x  + ", bg = ButtonColour)
            self.SolveModX2Label.place(x = 50, y = 160)

            #self.CipherBoxWidgets.append(self.SolveModX1Label)
            self.CipherBoxWidgets.append(self.SolveModX2Label)

            self.SolveModY2Entry = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.SolveModY2Entry.place(x = 100, y = 160)

            self.CipherBoxWidgets.append(self.SolveModY2Entry)
            
            self.SolveModY2Label = tkinter.Label(self.SolveAsFrame, text = "y  = ", bg = ButtonColour)
            self.SolveModY2Label.place(x = 130, y = 160)

            self.CipherBoxWidgets.append(self.SolveModY2Label)

            self.SolveModC2Entry = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.SolveModC2Entry.place(x = 180, y = 160)

            self.CipherBoxWidgets.append(self.SolveModC2Entry)
            
            self.SolveModC2Label = tkinter.Label(self.SolveAsFrame, text = "   (mod 26) ", bg = ButtonColour)
            self.SolveModC2Label.place(x = 210, y = 160)

            self.CipherBoxWidgets.append(self.SolveModC2Label)



        elif CipherType == "Linear Mod":

            self.SolveModButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveMod26Linear)
            self.SolveModButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.SolveModButton)
            
            self.SolveModXEntry = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.SolveModXEntry.place(x = 20, y = 100)

            #self.CipherBoxWidgets.append(self.SolveModX1Entry)
            self.CipherBoxWidgets.append(self.SolveModXEntry)
            
            self.SolveModXLabel = tkinter.Label(self.SolveAsFrame, text = "x  + ", bg = ButtonColour)
            self.SolveModXLabel.place(x = 50, y = 100)

            #self.CipherBoxWidgets.append(self.SolveModX1Label)
            self.CipherBoxWidgets.append(self.SolveModXLabel)

            self.SolveModBEntry = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.SolveModBEntry.place(x = 100, y = 100)

            self.CipherBoxWidgets.append(self.SolveModBEntry)
            
            self.SolveModBLabel = tkinter.Label(self.SolveAsFrame, text = " = ", bg = ButtonColour)
            self.SolveModBLabel.place(x = 130, y = 100)

            self.CipherBoxWidgets.append(self.SolveModBLabel)

            #self.SolveModC1Entry = tkinter.Entry(self.SolveAsFrame, width = 3)
            #self.SolveModC1Entry.place(x = 180, y = 100)
            self.SolveModCEntry = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.SolveModCEntry.place(x = 180, y = 100)

            #self.CipherBoxWidgets.append(self.SolveModC1Entry)
            self.CipherBoxWidgets.append(self.SolveModCEntry)
            
            #self.SolveModC1Label = tkinter.Label(self.SolveAsFrame, text = "   (mod 26) ", bg = ButtonColour)
            #self.SolveModC1Label.place(x = 210, y = 100)
            self.SolveModCLabel = tkinter.Label(self.SolveAsFrame, text = "   (mod 26) ", bg = ButtonColour)
            self.SolveModCLabel.place(x = 210, y = 100)

            #self.CipherBoxWidgets.append(self.SolveModC1Label)
            self.CipherBoxWidgets.append(self.SolveModCLabel)


        elif CipherType == "Nihilist":

            self.ReplaceNihilistButton = tkinter.Button(self.SolveAsFrame, text = "Replace", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ReplaceNihilistCipher)
            self.ReplaceNihilistButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.ReplaceNihilistButton)

            self.NormaliseNihilistButton = tkinter.Button(self.SolveAsFrame, text = "Normalise", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.NormaliseNihilistCommand)
            #self.NormaliseNihilistButton.place(x = 110, y = 220)
            self.NormaliseNihilistButton.place(x = 110, y = 210)

            self.CipherBoxWidgets.append(self.NormaliseNihilistButton)


        elif CipherType == "Bifid":

            """self.ReplaceBifidButton = tkinter.Button(self.SolveAsFrame, text = "Replace", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ReplaceBifidCipher)
            self.ReplaceBifidButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.ReplaceBifidButton)"""

            self.SolveBifidButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveBifidCipher)
            self.SolveBifidButton.place(x = 110, y = 250)

            #self.CipherBoxWidgets.append(self.ReplaceBifidButton)
            self.CipherBoxWidgets.append(self.SolveBifidButton)

            self.BifidPeriodLengthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.BifidPeriodLengthEntry.place(x = 160, y = 170)
            self.BifidPeriodLengthEntry.place(x = 160, y = 200)

            self.CipherBoxWidgets.append(self.BifidPeriodLengthEntry)
            
            self.BifidPeriodLengthLabel = tkinter.Label(self.SolveAsFrame, text = "Period:", bg = ButtonColour)
            self.BifidPeriodLengthLabel.place(x = 50, y = 170)
            self.BifidPeriodLengthLabel.place(x = 50, y = 200)

            self.CipherBoxWidgets.append(self.BifidPeriodLengthLabel)

            self.SteppedBigramButton = tkinter.Button(self.SolveAsFrame, text = "Stepped Bigram Graph", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SteppedBigramGraph)
            self.SteppedBigramButton.place(x = 50, y = 100)

            self.CipherBoxWidgets.append(self.SteppedBigramButton)

            """self.NumToLetterButton = tkinter.Button(self.SolveAsFrame, text = "Num To Letter", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ReplaceNumLetter)
            self.NumToLetterButton.place(x = 110, y = 100)

            self.CipherBoxWidgets.append(self.NumToLetterButton)

            self.LetterToNumButton = tkinter.Button(self.SolveAsFrame, text = "Letter To Num", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ReplaceLetterNum)
            self.LetterToNumButton.place(x = 110, y = 150)

            self.CipherBoxWidgets.append(self.LetterToNumButton)"""


        elif CipherType == "Autokey":

            self.SolveAutokeyButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveAutokeyCipher)
            self.SolveAutokeyButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.SolveAutokeyButton)

            self.AutokeyRangeStartEntry = tkinter.Entry(self.SolveAsFrame, width = 6)
            #self.AutokeyRangeStartEntry.place(x = 110, y = 200)
            #self.AutokeyRangeStartEntry.place(x = 150, y = 200)
            #self.AutokeyRangeStartEntry.place(x = 150, y = 150)
            self.AutokeyRangeStartEntry.place(x = 150, y = 170)
            self.CipherBoxWidgets.append(self.AutokeyRangeStartEntry)

            self.AutoKeyRangeStartLabel = tkinter.Label(self.SolveAsFrame, text = "Min Key Length:", bg = ButtonColour)
            #self.AutoKeyRangeStartLabel.place(x = 20, y = 200)
            #self.AutoKeyRangeStartLabel.place(x = 40, y = 150)
            self.AutoKeyRangeStartLabel.place(x = 40, y = 170)
            self.CipherBoxWidgets.append(self.AutoKeyRangeStartLabel)

            self.AutokeyRangeEndEntry = tkinter.Entry(self.SolveAsFrame, width = 6)
            #self.AutokeyRangeEndEntry.place(x = 110, y = 225)
            #self.AutokeyRangeEndEntry.place(x = 150, y = 225)
            #self.AutokeyRangeEndEntry.place(x = 150, y = 175)
            self.AutokeyRangeEndEntry.place(x = 150, y = 195)
            self.CipherBoxWidgets.append(self.AutokeyRangeEndEntry)

            self.AutoKeyRangeEndLabel = tkinter.Label(self.SolveAsFrame, text = "Max Key Length:", bg = ButtonColour)
            #self.AutoKeyRangeEndLabel.place(x = 20, y = 225)
            #self.AutoKeyRangeEndLabel.place(x = 40, y = 175)
            self.AutoKeyRangeEndLabel.place(x = 40, y = 195)
            self.CipherBoxWidgets.append(self.AutoKeyRangeEndLabel)

            self.SolveAutokeyCSharpButton = tkinter.Button(self.SolveAsFrame, text = "Solve C#", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveAutokeyCipherCSharp)
            self.SolveAutokeyCSharpButton.place(x = 200, y = 250)
            self.CipherBoxWidgets.append(self.SolveAutokeyCSharpButton)

            self.AutokeyAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            self.AutokeyAlphabetEntry.place(x = 30, y = 140)
            self.AutokeyAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz")
            self.CipherBoxWidgets.append(self.AutokeyAlphabetEntry)

            self.AutokeyAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Plaintext Alphabet:", bg = ButtonColour)
            self.AutokeyAlphabetLabel.place(x = 10, y = 110)
            self.CipherBoxWidgets.append(self.AutokeyAlphabetLabel)


        elif CipherType == "Beaufort":

            self.ReplaceBeaufortButton = tkinter.Button(self.SolveAsFrame, text = "Replace", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ReplaceBeaufortCipher)
            self.ReplaceBeaufortButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.ReplaceBeaufortButton)


        elif CipherType == "4-Square":

            self.Solve4SquareButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.Solve4SquareCipher)
            self.Solve4SquareButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.Solve4SquareButton)

            self.UseNormalAlphabetButton = tkinter.IntVar()

            #self.UseNormalAlphabetButtonYes = tkinter.Radiobutton(self.SolveAsFrame, text = "Normal", bg = ButtonColour, variable = self.RowsOrColumns, value = 0)
            #self.UseNormalAlphabetButtonYes = tkinter.Radiobutton(self.SolveAsFrame, text = "Normal", bg = ButtonColour, variable = self.UseNormalAlphabetButton, value = 0)
            self.UseNormalAlphabetButtonYes = tkinter.Radiobutton(self.SolveAsFrame, text = "Normal", bg = ButtonColour, variable = self.UseNormalAlphabetButton, value = 1)
            #self.UseNormalAlphabetButtonYes.place(x = 100, y = 200)
            self.UseNormalAlphabetButtonYes.place(x = 40, y = 200)

            self.CipherBoxWidgets.append(self.UseNormalAlphabetButtonYes)

            #self.UseNormalAlphabetButtonNo = tkinter.Radiobutton(self.SolveAsFrame, text = "Abnormal", bg = ButtonColour, variable = self.RowsOrColumns, value = 1)
###            self.UseNormalAlphabetButtonNo = tkinter.Radiobutton(self.SolveAsFrame, text = "Abnormal", bg = ButtonColour, variable = self.UseNormalAlphabetButton, value = 1)
            self.UseNormalAlphabetButtonNo = tkinter.Radiobutton(self.SolveAsFrame, text = "Abnormal", bg = ButtonColour, variable = self.UseNormalAlphabetButton, value = 0)
            #self.UseNormalAlphabetButtonNo.place(x = 200, y = 200)
            self.UseNormalAlphabetButtonNo.place(x = 160, y = 200)

            self.UseNormalAlphabetButton.set(1)

            self.CipherBoxWidgets.append(self.UseNormalAlphabetButtonNo)


        elif CipherType == "Digraph Substitution":

            self.SolveDigraphSubButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveDigraphSubCipher)
            self.SolveDigraphSubButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.SolveDigraphSubButton)
            

            self.CreateDigraphKeyButton = tkinter.Button(self.SolveAsFrame, text = "Create Key", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.CreateDigraphKey)
            self.CreateDigraphKeyButton.place(x = 100, y = 120)

            self.CipherBoxWidgets.append(self.CreateDigraphKeyButton)


        #elif CipherType == "TranspoVigen":
        elif CipherType == "Vigenère + Transposition":

            #self.RearrangeTranspoVigenButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.RearrangeTranspoVigenCipher)
            #self.RearrangeTranspoVigenButton = tkinter.Button(self.SolveAsFrame, text = "Rearrange", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.RearrangeTranspoVigenCipher)
            self.VigenTranspoRearrangeButton = tkinter.Button(self.SolveAsFrame, text = "Rearrange", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.RearrangeVigenTranspoCipher)
            #self.RearrangeTranspoVigenButton.place(x = 110, y = 250)
            self.VigenTranspoRearrangeButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.VigenTranspoRearrangeButton)
            #self.CipherBoxWidgets.append(self.RearrangeTranspoVigenButton)

##            #self.KeyLengthEntryButton = tkinter.Entry(self.SolveAsFrame, width = 15)
##            self.KeyLengthEntryButton = tkinter.Entry(self.SolveAsFrame, width = 8)
##            #self.KeyLengthEntryButton.place(x = 100, y = 190)
##            #self.KeyLengthEntryButton.place(x = 150, y = 190)
##            self.KeyLengthEntryButton.place(x = 200, y = 190)
##
##            self.CipherBoxWidgets.append(self.KeyLengthEntryButton)
##
##            self.TranspoVigenKeyLengthLabel = tkinter.Label(self.SolveAsFrame, text = "Transposition Key Length:", bg = ButtonColour)
##            self.TranspoVigenKeyLengthLabel.place(x = 50, y = 190)
##            self.CipherBoxWidgets.append(self.TranspoVigenKeyLengthLabel)
##
##            self.TranspoVigenTypeOptions = ["Row","Column","Myszkowski"]
##
##            self.TranspoVigenTypeOption = tkinter.StringVar(self)
##            self.TranspoVigenTypeOption.set("Row")
##
##            #self.TranspoVigenTypeBox = ttk.Combobox(self.SolveAsFrame, width = 1, textvariable = self.TranspoVigenTypeOption, values = self.TranspoVigenTypeOptions)
##            #self.TranspoVigenTypeBox = ttk.Combobox(self.SolveAsFrame, width = 10, textvariable = self.TranspoVigenTypeOption, values = self.TranspoVigenTypeOptions)
##            #self.TranspoVigenTypeBox = ttk.Combobox(self.SolveAsFrame, width = 12, textvariable = self.TranspoVigenTypeOption, values = self.TranspoVigenTypeOptions)
##            #self.TranspoVigenTypeBox.place(x = 70, y = 200)
##            #self.TranspoVigenTypeBox.place(x = 100, y = 100)
##            #self.CipherBoxWidgets.append(self.TranspoVigenTypeBox)

            self.VigenTranspoBruteButton = tkinter.Button(self.SolveAsFrame, text = "Brute", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.BruteTranspoVigenCommand)
            self.VigenTranspoBruteButton.place(x = 10, y = 250)
            self.CipherBoxWidgets.append(self.VigenTranspoBruteButton)

            #self.VigenTranspoSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveTranspoVigenCommand)
            self.VigenTranspoSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveVigenTranspoCommand)
            #self.VigenTranspoSolveButton.place(x = 180, y = 250)
            self.VigenTranspoSolveButton.place(x = 210, y = 250)
            self.CipherBoxWidgets.append(self.VigenTranspoSolveButton)

            self.VigenTranspoColumnNumLabel = tkinter.Label(self.SolveAsFrame, text = "Num Of Columns:", bg = ButtonColour)
            self.VigenTranspoColumnNumLabel.place(x = 50, y = 160)
            self.CipherBoxWidgets.append(self.VigenTranspoColumnNumLabel)
            
            self.VigenTranspoColumnNumEntry = tkinter.Entry(self.SolveAsFrame, width = 6)
            self.VigenTranspoColumnNumEntry.place(x = 160, y = 160)
            self.CipherBoxWidgets.append(self.VigenTranspoColumnNumEntry)

            self.VigenTranspoTranspoTypeOptions = ["row", "column"]

            self.VigenTranspoTranspoTypeOption = tkinter.StringVar()
            self.VigenTranspoTranspoTypeOption.set("column")

            self.VigenTranspoTranspoTypeComboBox = ttk.Combobox(self.SolveAsFrame, width = 10, textvariable = self.VigenTranspoTranspoTypeOption, values = self.VigenTranspoTranspoTypeOptions)
            self.VigenTranspoTranspoTypeComboBox.place(x = 150, y = 110)
            self.CipherBoxWidgets.append(self.VigenTranspoTranspoTypeComboBox)

            self.VigenTranspoTranspoTypeLabel = tkinter.Label(self.SolveAsFrame, text = "Transposition Type:", bg = ButtonColour)
            self.VigenTranspoTranspoTypeLabel.place(x = 30, y = 110)
            self.CipherBoxWidgets.append(self.VigenTranspoTranspoTypeLabel)


        elif CipherType == "Trithemius":

            self.DecodeTrithemiusButton = tkinter.Button(self.SolveAsFrame, text = "Decode", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.DecodeTrithemiusCipher)
            self.DecodeTrithemiusButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.DecodeTrithemiusButton)

            self.ThrithemiusMode = tkinter.IntVar()

            self.TrithemiusButtonNormal = tkinter.Radiobutton(self.SolveAsFrame, text = "Normal", bg = ButtonColour, variable = self.ThrithemiusMode, value = 0)
            self.TrithemiusButtonNormal.place(x = 100, y = 200)

            self.CipherBoxWidgets.append(self.TrithemiusButtonNormal)

            self.TrithemiusButtonReversed = tkinter.Radiobutton(self.SolveAsFrame, text = "Reversed", bg = ButtonColour, variable = self.ThrithemiusMode, value = 1)
            self.TrithemiusButtonReversed.place(x = 100, y = 220)

            self.CipherBoxWidgets.append(self.TrithemiusButtonReversed)


        elif CipherType == "IOC":

            self.GetIOCButton = tkinter.Button(self.SolveAsFrame, text = "Calculate", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.IOCCipher)
            self.GetIOCButton.place(x = 100, y = 250)

            self.CipherBoxWidgets.append(self.GetIOCButton)

            self.IOCKeyLength = tkinter.Entry(self.SolveAsFrame, width = 15)
            self.IOCKeyLength.place(x = 100, y = 200)

            self.CipherBoxWidgets.append(self.IOCKeyLength)

            self.IOCKeyLengthLabel = tkinter.Label(self.SolveAsFrame, text = "Key Length:", bg = ButtonColour)
            #self.IOCKeyLengthLabel.place(x = 50, y = 200)
            self.IOCKeyLengthLabel.place(x = 30, y = 200)
            self.CipherBoxWidgets.append(self.IOCKeyLengthLabel)


        elif CipherType == "Running Total":

            self.SolveRunTotButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveRunTotCipher)
            #self.SolveRunTotButton.place(x = 100, y = 250)
            self.SolveRunTotButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.SolveRunTotButton)


        elif CipherType == "2-Square":

            self.Solve2SquareButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.Solve2SquareCipher)
            self.Solve2SquareButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.Solve2SquareButton)

            self.Horizontal2Square = tkinter.IntVar()

            #self.Horizontal2-SquareButton = tkinter.Radiobutton(self.SolveAsFrame, text = "Normal", bg = ButtonColour, variable = self.UseNormalAlphabetButton, value = 1)
            #self.Horizontal2SquareButtonYes = tkinter.Radiobutton(self.SolveAsFrame, text = "Horizontal", bg = ButtonColour, variable = self.UseNormalAlphabetButton, value = 1)
            self.Horizontal2SquareButtonYes = tkinter.Radiobutton(self.SolveAsFrame, text = "Horizontal", bg = ButtonColour, variable = self.Horizontal2Square, value = 1)
            self.Horizontal2SquareButtonYes.place(x = 40, y = 200)

            self.CipherBoxWidgets.append(self.Horizontal2SquareButtonYes)

            #self.Horizontal2SquareButtonNo = tkinter.Radiobutton(self.SolveAsFrame, text = "Vertical", bg = ButtonColour, variable = self.UseNormalAlphabetButton, value = 0)
            self.Horizontal2SquareButtonNo = tkinter.Radiobutton(self.SolveAsFrame, text = "Vertical", bg = ButtonColour, variable = self.Horizontal2Square, value = 0)
            self.Horizontal2SquareButtonNo.place(x = 40, y = 220)

            #self.UseNormalAlphabetButton.set(1)
            self.Horizontal2Square.set(1)

            self.CipherBoxWidgets.append(self.Horizontal2SquareButtonNo)

            #self.SwapDigramsSquare = tkinter.IntVar()
            self.SwapDigrams2Square = tkinter.IntVar()

            #self.SwapDigrams2SquareButton = tkinter.Checkbutton(self.SolveAsFrame, text = "Swap Digrams", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), variable = self.SwapDigrams2Square)
            self.SwapDigrams2SquareButton = tkinter.Checkbutton(self.SolveAsFrame, text = "Swap Digrams", bg = ButtonColour, variable = self.SwapDigrams2Square)
            self.SwapDigrams2SquareButton.place(x = 160, y = 200)
            self.CipherBoxWidgets.append(self.SwapDigrams2SquareButton)


        elif CipherType == "N-Gram IOC":

            self.GetNGramIOCButton = tkinter.Button(self.SolveAsFrame, text = "Calculate", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.NGramIOCCipher)
            self.GetNGramIOCButton.place(x = 100, y = 250)

            self.CipherBoxWidgets.append(self.GetNGramIOCButton)

            self.NGramIOCKeyLength = tkinter.Entry(self.SolveAsFrame, width = 15)
            self.NGramIOCKeyLength.place(x = 100, y = 200)

            self.CipherBoxWidgets.append(self.NGramIOCKeyLength)

            self.NGramIOCNLabel = tkinter.Label(self.SolveAsFrame, text = "N:", bg = ButtonColour)
            self.NGramIOCNLabel.place(x = 50, y = 200)
            self.CipherBoxWidgets.append(self.NGramIOCNLabel)

        elif CipherType == "3-Square":

            #3SquareOrderOptions = ["1","2","3"]
            """self.3SquareOrderOptions = ["1","2","3"]

            self.3SquareOrderBox1 = ttk.Combobox(self.SolveAsFrame, textvariable = self.SolveAsOption, values = self.3SquareOrderOptions)
            self.3SquareOrderBox1.place(x = 90, y = 200)
            self.CipherBoxWidgets.append(self.3SquareOrderBox1)

            self.3SquareOrderBox2 = ttk.Combobox(self.SolveAsFrame, textvariable = self.SolveAsOption, values = self.3SquareOrderOptions)
            self.3SquareOrderBox2.place(x = 180, y = 200)
            self.CipherBoxWidgets.append(self.3SquareOrderBox2)

            self.3SquareOrderBox3 = ttk.Combobox(self.SolveAsFrame, textvariable = self.SolveAsOption, values = self.3SquareOrderOptions)
            self.3SquareOrderBox3.place(x = 270, y = 200)
            self.CipherBoxWidgets.append(self.3SquareOrderBox3)"""

            self.ThreeSquareOrderOptions = ["1","2","3"]

            self.ThreeSquareOrderOption1 = tkinter.StringVar(self)
            self.ThreeSquareOrderOption1.set("1")

            self.ThreeSquareOrderOption2 = tkinter.StringVar(self)
            self.ThreeSquareOrderOption2.set("3")

            self.ThreeSquareOrderOption3 = tkinter.StringVar(self)
            self.ThreeSquareOrderOption3.set("2")

            #self.ThreeSquareOrderBox1 = ttk.Combobox(self.SolveAsFrame, textvariable = self.SolveAsOption, values = self.ThreeSquareOrderOptions)
            #self.ThreeSquareOrderBox1.place(x = 90, y = 200)
            #self.ThreeSquareOrderBox1 = ttk.Combobox(self.SolveAsFrame, width = 10, textvariable = self.ThreeSquareOrderOption1, values = self.ThreeSquareOrderOptions)
            self.ThreeSquareOrderBox1 = ttk.Combobox(self.SolveAsFrame, width = 1, textvariable = self.ThreeSquareOrderOption1, values = self.ThreeSquareOrderOptions)
            self.ThreeSquareOrderBox1.place(x = 70, y = 200)
            self.CipherBoxWidgets.append(self.ThreeSquareOrderBox1)

            #self.ThreeSquareOrderBox2 = ttk.Combobox(self.SolveAsFrame, textvariable = self.SolveAsOption, values = self.ThreeSquareOrderOptions)
            #self.ThreeSquareOrderBox2.place(x = 180, y = 200)
            self.ThreeSquareOrderBox2 = ttk.Combobox(self.SolveAsFrame, width = 1, textvariable = self.ThreeSquareOrderOption2, values = self.ThreeSquareOrderOptions)
            self.ThreeSquareOrderBox2.place(x = 145, y = 200)
            self.CipherBoxWidgets.append(self.ThreeSquareOrderBox2)

            #self.ThreeSquareOrderBox3 = ttk.Combobox(self.SolveAsFrame, textvariable = self.SolveAsOption, values = self.ThreeSquareOrderOptions)
            #self.ThreeSquareOrderBox3.place(x = 270, y = 200)
            self.ThreeSquareOrderBox3 = ttk.Combobox(self.SolveAsFrame, width = 1, textvariable = self.ThreeSquareOrderOption3, values = self.ThreeSquareOrderOptions)
            self.ThreeSquareOrderBox3.place(x = 220, y = 200)
            self.CipherBoxWidgets.append(self.ThreeSquareOrderBox3)

            self.Solve3SquareButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.Solve3SquareCipher)
            self.Solve3SquareButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.Solve3SquareButton)


        elif CipherType == "Letter <--> Num":

            self.NumToLetterButton = tkinter.Button(self.SolveAsFrame, text = "Num To Letter", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ReplaceNumLetter)
            self.NumToLetterButton.place(x = 110, y = 200)

            self.CipherBoxWidgets.append(self.NumToLetterButton)

            self.LetterToNumButton = tkinter.Button(self.SolveAsFrame, text = "Letter To Num", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ReplaceLetterNum)
            self.LetterToNumButton.place(x = 110, y = 150)

            self.CipherBoxWidgets.append(self.LetterToNumButton)


        elif CipherType == "Programmable Use":

            self.ProgrammableUseButton = tkinter.Button(self.SolveAsFrame, text = "Do Something", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ProgrammableUseCommand)
            self.ProgrammableUseButton.place(x = 70, y = 250)

            self.CipherBoxWidgets.append(self.ProgrammableUseButton)

        elif CipherType == "Programmable Use 2":

            self.ProgrammableUseButton = tkinter.Button(self.SolveAsFrame, text = "Do Something", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ProgrammableUseCommand2)
            self.ProgrammableUseButton.place(x = 70, y = 250)

            self.CipherBoxWidgets.append(self.ProgrammableUseButton)

        elif CipherType == "Programmable Use 3":

            self.ProgrammableUseButton = tkinter.Button(self.SolveAsFrame, text = "Do Something", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ProgrammableUseCommand3)
            self.ProgrammableUseButton.place(x = 70, y = 250)

            self.CipherBoxWidgets.append(self.ProgrammableUseButton)

        elif CipherType == "Programmable Use 4":

            self.ProgrammableUseButton = tkinter.Button(self.SolveAsFrame, text = "Do Something", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ProgrammableUseCommand4)
            self.ProgrammableUseButton.place(x = 70, y = 250)

            self.CipherBoxWidgets.append(self.ProgrammableUseButton)

        elif CipherType == "Programmable Use 5":

            self.ProgrammableUseButton = tkinter.Button(self.SolveAsFrame, text = "Do Something", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ProgrammableUseCommand5)
            self.ProgrammableUseButton.place(x = 70, y = 250)

            self.CipherBoxWidgets.append(self.ProgrammableUseButton)


        elif CipherType == "Double Transposition":

            self.SolveDoubleTranspositionButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveDoubleTranspoCipher)
            #self.SolveDoubleTranspositionButton.place(x = 110, y = 250)
            #self.SolveDoubleTranspositionButton.place(x = 160, y = 250)
            self.SolveDoubleTranspositionButton.place(x = 60, y = 250)

            self.CipherBoxWidgets.append(self.SolveDoubleTranspositionButton)

            self.DoubleTranspoOptions = ["Row", "Column"]

            self.DoubleTranspoTypeOption1 = tkinter.StringVar(self)
            self.DoubleTranspoTypeOption1.set("Column")

            self.DoubleTranspoTypeOption2 = tkinter.StringVar(self)
            self.DoubleTranspoTypeOption2.set("Column")

            #Width = 6
            Width = 7

            #self.DoubleTranspoTypeBox1 = ttk.Combobox(self.SolveAsFrame, width = 6, textvariable = self.DoubleTranspoTypeOption1, values = self.DoubleTranspoOptions)
            self.DoubleTranspoTypeBox1 = ttk.Combobox(self.SolveAsFrame, width = Width, textvariable = self.DoubleTranspoTypeOption1, values = self.DoubleTranspoOptions)
            self.DoubleTranspoTypeBox1.place(x = 110, y = 100)
            self.CipherBoxWidgets.append(self.DoubleTranspoTypeBox1)

            """self.DoubleTranspoLengthBox2 = tkinter.Entry(self.SolveAsFrame, width = 6)
            self.DoubleTranspoLengthBox2.place(x = 100, y = 125)
            self.CipherBoxWidgets.append(self.DoubleTranspoLengthBox2)"""
            self.DoubleTranspoLengthBox1 = tkinter.Entry(self.SolveAsFrame, width = 6)
            self.DoubleTranspoLengthBox1.place(x = 100, y = 125)
            self.CipherBoxWidgets.append(self.DoubleTranspoLengthBox1)

            """self.DoubleTranspoTypeBox1 = ttk.Combobox(self.SolveAsFrame, width = 6, textvariable = self.DoubleTranspoTypeOption2, values = self.DoubleTranspoOptions)
            self.DoubleTranspoTypeBox1.place(x = 110, y = 160)
            self.CipherBoxWidgets.append(self.DoubleTranspoTypeBox1)"""
            #self.DoubleTranspoTypeBox2 = ttk.Combobox(self.SolveAsFrame, width = 6, textvariable = self.DoubleTranspoTypeOption2, values = self.DoubleTranspoOptions)
            self.DoubleTranspoTypeBox2 = ttk.Combobox(self.SolveAsFrame, width = Width, textvariable = self.DoubleTranspoTypeOption2, values = self.DoubleTranspoOptions)
            self.DoubleTranspoTypeBox2.place(x = 110, y = 180)
            self.CipherBoxWidgets.append(self.DoubleTranspoTypeBox2)

            self.DoubleTranspoLengthBox2 = tkinter.Entry(self.SolveAsFrame, width = 6)
            #self.DoubleTranspoLengthBox2.place(x = 100, y = 185)
            self.DoubleTranspoLengthBox2.place(x = 100, y = 205)
            self.CipherBoxWidgets.append(self.DoubleTranspoLengthBox2)

            self.BruteDoubleTranspositionButton = tkinter.Button(self.SolveAsFrame, text = "Brute", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.BruteDoubleTranspoCipher)
            self.BruteDoubleTranspositionButton.place(x = 150, y = 250)

            self.CipherBoxWidgets.append(self.BruteDoubleTranspositionButton)


        elif CipherType == "N-Gram Vigenère IOC":

            self.GetNGramIOCButton = tkinter.Button(self.SolveAsFrame, text = "Calculate", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.NGramVigenereIOCCipher)
            self.GetNGramIOCButton.place(x = 100, y = 250)

            self.CipherBoxWidgets.append(self.GetNGramIOCButton)

            #self.NGramIOCKeyLength = tkinter.Entry(self.SolveAsFrame, width = 15)
            self.NGramIOCKeyLength = tkinter.Entry(self.SolveAsFrame, width = 5)
            #self.NGramIOCKeyLength.place(x = 100, y = 200)
            #self.NGramIOCKeyLength.place(x = 200, y = 200)
            self.NGramIOCKeyLength.place(x = 200, y = 150)

            self.CipherBoxWidgets.append(self.NGramIOCKeyLength)

            #self.NGramLength = tkinter.Entry(self.SolveAsFrame, width = 15)
            self.NGramLength = tkinter.Entry(self.SolveAsFrame, width = 5)
            #self.NGramLength.place(x = 100, y = 150)
            #self.NGramLength.place(x = 200, y = 150)
            self.NGramLength.place(x = 200, y = 100)

            self.CipherBoxWidgets.append(self.NGramLength)

            self.NGramLengthLabel = tkinter.Label(self.SolveAsFrame, text = "N-Gram Length:", bg = ButtonColour)
            #self.NGramLengthLabel.place(x = 50, y = 150)
            self.NGramLengthLabel.place(x = 50, y = 100)

            self.CipherBoxWidgets.append(self.NGramLengthLabel)

            self.KeyLengthLabel = tkinter.Label(self.SolveAsFrame, text = "Key Length:", bg = ButtonColour)
            #self.KeyLengthLabel.place(x = 50, y = 200)
            self.KeyLengthLabel.place(x = 50, y = 150)

            self.CipherBoxWidgets.append(self.KeyLengthLabel)

            #self.KeyLetterLabel = tkinter.Label(self.SolveAsFrame, text = "Key Letter:", bg = ButtonColour)
            self.KeyLetterLabel = tkinter.Label(self.SolveAsFrame, text = "Key Letter(s):", bg = ButtonColour)
            self.KeyLetterLabel.place(x = 50, y = 200)

            self.CipherBoxWidgets.append(self.KeyLetterLabel)

            self.NGramIOCKeyLetterFrom = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.NGramIOCKeyLetterFrom.place(x = 200, y = 200)

            self.CipherBoxWidgets.append(self.NGramIOCKeyLetterFrom)

            self.NGramIOCKeyLetterTo = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.NGramIOCKeyLetterTo.place(x = 250, y = 200)

            self.CipherBoxWidgets.append(self.NGramIOCKeyLetterTo)

            self.KeyLetterToTextLabel = tkinter.Label(self.SolveAsFrame, text = "to", bg = ButtonColour)
            #self.KeyLetterToTextLabel.place(x = 255, y = 200)
            #self.KeyLetterToTextLabel.place(x = 225, y = 200)
            self.KeyLetterToTextLabel.place(x = 228, y = 200)

            self.CipherBoxWidgets.append(self.KeyLetterToTextLabel)


        elif CipherType == "Straddle Checkerboard":

            self.StraddleCheckerboardButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.StraddleCheckerboardCipher)
            self.StraddleCheckerboardButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.StraddleCheckerboardButton)


        elif CipherType == "Trifid":

            self.SolveTrifidButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveTrifidCipher)
            self.SolveTrifidButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.SolveTrifidButton)

            self.TrifidPeriodLengthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.TrifidPeriodLengthLabel.place(x = 160, y = 200)
            self.TrifidPeriodLengthEntry.place(x = 160, y = 200)

            #~self.CipherBoxWidgets.append(self.TrifidPeriodLengthLabel)
            self.CipherBoxWidgets.append(self.TrifidPeriodLengthEntry)
            
            self.TrifidPeriodLengthLabel = tkinter.Label(self.SolveAsFrame, text = "Period:", bg = ButtonColour)
            self.TrifidPeriodLengthLabel.place(x = 50, y = 200)

            self.CipherBoxWidgets.append(self.TrifidPeriodLengthLabel)

            self.SteppedTrigramButton = tkinter.Button(self.SolveAsFrame, text = "Stepped Trigram Graph", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SteppedTrigramGraph)
            self.SteppedTrigramButton.place(x = 50, y = 100)

            self.CipherBoxWidgets.append(self.SteppedTrigramButton)


        elif CipherType == "Seriated Playfair":

            self.SolveSerialPlayfairButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveSerialPlayfairCipher)
            self.SolveSerialPlayfairButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.SolveSerialPlayfairButton)

            self.SerialPlayfairPeriodLengthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.SerialPlayfairPeriodLengthEntry.place(x = 160, y = 170)
            self.SerialPlayfairPeriodLengthEntry.place(x = 160, y = 200)

            self.CipherBoxWidgets.append(self.SerialPlayfairPeriodLengthEntry)
            
            self.SerialPlayfairPeriodLengthLabel = tkinter.Label(self.SolveAsFrame, text = "Period:", bg = ButtonColour)
            self.SerialPlayfairPeriodLengthLabel.place(x = 50, y = 170)
            self.SerialPlayfairPeriodLengthLabel.place(x = 50, y = 200)

            self.CipherBoxWidgets.append(self.SerialPlayfairPeriodLengthLabel)

            self.SteppedBigramButton = tkinter.Button(self.SolveAsFrame, text = "Stepped Bigram Graph", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SteppedBigramGraph)
            self.SteppedBigramButton.place(x = 50, y = 100)

            self.CipherBoxWidgets.append(self.SteppedBigramButton)

        elif CipherType == "Stepped N-Gram Variance":

            self.SteppedNGramButton = tkinter.Button(self.SolveAsFrame, text = "Stepped N-Gram Graph", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SteppedNGramGraph)
            self.SteppedNGramButton.place(x = 50, y = 100)

            self.CipherBoxWidgets.append(self.SteppedNGramButton)

            self.NGramLengthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.NGramLengthEntry.place(x = 160, y = 170)

            self.CipherBoxWidgets.append(self.NGramLengthEntry)

            self.NGramLengthLabel = tkinter.Label(self.SolveAsFrame, text = "N-Gram Length:", bg = ButtonColour)
            self.NGramLengthLabel.place(x = 50, y = 170)

            self.CipherBoxWidgets.append(self.NGramLengthLabel)


        elif CipherType == "Cut Into Chunks":

            self.ChunkButton = tkinter.Button(self.SolveAsFrame, text = "Chop", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ChunkCipher)
            self.ChunkButton.place(x = 120, y = 100)

            self.CipherBoxWidgets.append(self.ChunkButton)

            self.ChunkLengthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.ChunkLengthEntry.place(x = 160, y = 170)

            self.CipherBoxWidgets.append(self.ChunkLengthEntry)

            self.ChunkLengthLabel = tkinter.Label(self.SolveAsFrame, text = "Chunk Length:", bg = ButtonColour)
            self.ChunkLengthLabel.place(x = 50, y = 170)

            #self.CipherBoxWidgets.append(self.ChunkLengthLabels)
            self.CipherBoxWidgets.append(self.ChunkLengthLabel)


        elif CipherType == "Base N <--> Letter":

            self.BaseNToLetterButton = tkinter.Button(self.SolveAsFrame, text = "Base N To Letter", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ReplaceBaseNLetter)
            #self.BaseNToLetterButton.place(x = 110, y = 220)
            #self.BaseNToLetterButton.place(x = 60, y = 200)
            self.BaseNToLetterButton.place(x = 80, y = 200)

            self.CipherBoxWidgets.append(self.BaseNToLetterButton)

            self.LetterToBaseNButton = tkinter.Button(self.SolveAsFrame, text = "Letter To Base N", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ReplaceLetterBaseN)
            #self.LetterToBaseNButton.place(x = 110, y = 250)
            #self.LetterToBaseNButton.place(x = 60, y = 250)
            self.LetterToBaseNButton.place(x = 80, y = 250)

            self.CipherBoxWidgets.append(self.LetterToBaseNButton)

            self.StringLengthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.StringLengthEntry.place(x = 160, y = 170)

            self.CipherBoxWidgets.append(self.StringLengthEntry)

            self.StringLengthLabel = tkinter.Label(self.SolveAsFrame, text = "String Length:", bg = ButtonColour)
            self.StringLengthLabel.place(x = 50, y = 170)

            self.CipherBoxWidgets.append(self.StringLengthLabel)

            self.BaseEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.BaseEntry.place(x = 160, y = 140)

            self.CipherBoxWidgets.append(self.BaseEntry)

            self.BaseLabel = tkinter.Label(self.SolveAsFrame, text = "Number Base:", bg = ButtonColour)
            self.BaseLabel.place(x = 50, y = 140)

            self.CipherBoxWidgets.append(self.BaseLabel)

            #AEqualsOptions = ["0", "1"]
            self.AEqualsOptions = ["0", "1"]

            self.AEqualsOption = tkinter.StringVar(self)
            #self.AEqualsOptions.set("0")
            self.AEqualsOption.set("0")

            Width = 3

            self.AEqualsBox = ttk.Combobox(self.SolveAsFrame, width = Width, textvariable = self.AEqualsOption, values = self.AEqualsOptions)
            #self.AEqualsBox.place(x = 160, y = 140)
            self.AEqualsBox.place(x = 160, y = 110)
            self.CipherBoxWidgets.append(self.AEqualsBox)

            self.BaseLabel = tkinter.Label(self.SolveAsFrame, text = "A Equals:", bg = ButtonColour)
            #self.BaseLabel.place(x = 50, y = 140)
            self.BaseLabel.place(x = 50, y = 110)

            self.CipherBoxWidgets.append(self.BaseLabel)


        elif CipherType == "ASCII <--> Letter":

            self.ASCIIToLetterButton = tkinter.Button(self.SolveAsFrame, text = "ASCII To Letter", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ASCIIToLetterCommand)
            self.ASCIIToLetterButton.place(x = 80, y = 200)
            self.CipherBoxWidgets.append(self.ASCIIToLetterButton)

            self.LetterToBaseNButton = tkinter.Button(self.SolveAsFrame, text = "Letter To ASCII", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.LetterToASCIICommand)
            self.LetterToBaseNButton.place(x = 80, y = 250)
            self.CipherBoxWidgets.append(self.LetterToBaseNButton)

            self.BaseEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.BaseEntry.place(x = 160, y = 140)
            self.BaseEntry.insert(0, "2")
            self.CipherBoxWidgets.append(self.BaseEntry)

            self.BaseLabel = tkinter.Label(self.SolveAsFrame, text = "Number Base:", bg = ButtonColour)
            self.BaseLabel.place(x = 50, y = 140)
            self.CipherBoxWidgets.append(self.BaseLabel)


        elif CipherType == "Reverse Words":

            self.ReverseWordsButton = tkinter.Button(self.SolveAsFrame, text = "Reverse", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ReverseWordsCipher)
            self.ReverseWordsButton.place(x = 105, y = 200)

            self.CipherBoxWidgets.append(self.ReverseWordsButton)

        elif CipherType == "Hutton":

            #self.SolveHuttonButton = tkinter.Button(self.SolveAsFrame, text = "Encode", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.EncodeHuttonCipher)
            self.EncodeHuttonButton = tkinter.Button(self.SolveAsFrame, text = "Encode", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.EncodeHuttonCipher)
            #self.SolveHuttonButton.place(x = 120, y = 200)
            #self.SolveHuttonButton.place(x = 120, y = 250)
            self.EncodeHuttonButton.place(x = 60, y = 250)

            #self.CipherBoxWidgets.append(self.SolveHuttonButton)
            self.CipherBoxWidgets.append(self.EncodeHuttonButton)

            self.DecodeHuttonButton = tkinter.Button(self.SolveAsFrame, text = "Decode", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.DecodeHuttonCipher)
            self.DecodeHuttonButton.place(x = 180, y = 250)

            self.CipherBoxWidgets.append(self.DecodeHuttonButton)

            self.HuttonPasswordEntry = tkinter.Entry(self.SolveAsFrame, width = 26)
            #self.HuttonPasswordEntry.place(x = 160, y = 80)
            #self.HuttonPasswordEntry.place(x = 50, y = 80)
            #self.HuttonPasswordEntry.place(x = 80, y = 80)
            self.HuttonPasswordEntry.place(x = 80, y = 130)

            self.CipherBoxWidgets.append(self.HuttonPasswordEntry)

            #self.HuttonPasswordLabel = tkinter.Label(self.SolveAsFrame, text = "Password:", bg = ButtonColour)
            self.HuttonPasswordLabel = tkinter.Label(self.SolveAsFrame, text = "Key:", bg = ButtonColour)
            #self.HuttonPasswordLabel.place(x = 50, y = 80)
            #self.HuttonPasswordLabel.place(x = 20, y = 80)
            self.HuttonPasswordLabel.place(x = 20, y = 130)

            self.CipherBoxWidgets.append(self.HuttonPasswordLabel)

            #self.HuttonKeyEntry = tkinter.Entry(self.SolveAsFrame, width = 26)
            self.HuttonKeyEntry = tkinter.Entry(self.SolveAsFrame, width = 16)
            #self.HuttonKeyEntry.place(x = 160, y = 140)
            #self.HuttonKeyEntry.place(x = 50, y = 140)
            #self.HuttonKeyEntry.place(x = 80, y = 140)
            self.HuttonKeyEntry.place(x = 80, y = 190)

            self.CipherBoxWidgets.append(self.HuttonKeyEntry)

            #self.HuttonKeyLabel = tkinter.Label(self.SolveAsFrame, text = "Key:", bg = ButtonColour)
            self.HuttonKeyLabel = tkinter.Label(self.SolveAsFrame, text = "Password:", bg = ButtonColour)
            #self.HuttonKeyLabel.place(x = 50, y = 140)
            #self.HuttonKeyLabel.place(x = 20, y = 140)
            self.HuttonKeyLabel.place(x = 20, y = 190)

            self.CipherBoxWidgets.append(self.HuttonKeyLabel)

        #elif CipherType == "Replace Char":
        elif CipherType == "Replace Char(s)":

            self.ReplaceCharButton = tkinter.Button(self.SolveAsFrame, text = "Replace", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ReplaceCharCipher)
            self.ReplaceCharButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.ReplaceCharButton)
            
            self.ReplaceCharCharEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.ReplaceCharCharEntry.place(x = 160, y = 170)

            self.CipherBoxWidgets.append(self.ReplaceCharCharEntry)
            
            self.ReplaceCharCharLabel = tkinter.Label(self.SolveAsFrame, text = "Replace:", bg = ButtonColour)
            self.ReplaceCharCharLabel.place(x = 50, y = 170)

            self.CipherBoxWidgets.append(self.ReplaceCharCharLabel)

            self.ReplaceCharWithEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.ReplaceCharWithEntry.place(x = 160, y = 195)

            self.CipherBoxWidgets.append(self.ReplaceCharWithEntry)
            
            self.ReplaceCharWithLabel = tkinter.Label(self.SolveAsFrame, text = "With:", bg = ButtonColour)
            self.ReplaceCharWithLabel.place(x = 50, y = 195)

            self.CipherBoxWidgets.append(self.ReplaceCharWithLabel)

        elif CipherType == "Chi-Squared":

            self.ChiSquaredButton = tkinter.Button(self.SolveAsFrame, text = "Calculate", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.ChiSquaredCipher)
            self.ChiSquaredButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.ChiSquaredButton)
            
            self.ChiDistributionOptions = ["English", "..."]

            self.ChiDistributionOption = tkinter.StringVar(self)
            self.ChiDistributionOption.set("English")

            Width = 10

            self.ChiDistributionBox = ttk.Combobox(self.SolveAsFrame, width = Width, textvariable = self.ChiDistributionOption, values = self.ChiDistributionOptions)
            self.ChiDistributionBox.place(x = 160, y = 110)
            self.CipherBoxWidgets.append(self.ChiDistributionBox)

            self.ChiDistributionLabel = tkinter.Label(self.SolveAsFrame, text = "Distribution:", bg = ButtonColour)
            self.ChiDistributionLabel.place(x = 50, y = 110)

            self.CipherBoxWidgets.append(self.ChiDistributionLabel)

        elif CipherType == "Remove Punctuation And Spaces":

            #self.StripButton = tkinter.Button(self.SolveAsFrame, text = "Strip", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.RemovePunctAndSpace)
            self.StripButton = tkinter.Button(self.SolveAsFrame, text = "Strip All", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.RemovePunctAndSpace)
            self.StripButton.place(x = 110, y = 250)            

            self.CipherBoxWidgets.append(self.StripButton)

            self.StripPunctuationButton = tkinter.Button(self.SolveAsFrame, text = "Remove Punctuation", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.RemovePunctCommand)
            #self.StripPunctuationButton.place(x = 110, y = 230)
            self.StripPunctuationButton.place(x = 70, y = 210)
            self.CipherBoxWidgets.append(self.StripPunctuationButton)
            
            self.StripSpacesButton = tkinter.Button(self.SolveAsFrame, text = "Remove Spaces", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.RemoveSpacesCommand)
            #self.StripSpacesButton.place(x = 110, y = 210)
            self.StripSpacesButton.place(x = 80, y = 170)
            self.CipherBoxWidgets.append(self.StripSpacesButton)

        elif CipherType == "ADFGX":

            self.SolveADFGXButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveADFGXCipher)
            self.SolveADFGXButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.SolveADFGXButton)

            self.ADFGXKeyLengthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.ADFGXKeyLengthEntry.place(x = 160, y = 200)

            self.CipherBoxWidgets.append(self.ADFGXKeyLengthEntry)
            
            self.ADFGXKeyLengthLabel = tkinter.Label(self.SolveAsFrame, text = "No. Of Columns:", bg = ButtonColour)
            self.ADFGXKeyLengthLabel.place(x = 50, y = 200)

            self.CipherBoxWidgets.append(self.ADFGXKeyLengthLabel)

            self.ADFGXMissingLetterEntry = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.ADFGXMissingLetterEntry.place(x = 160, y = 170)
            self.CipherBoxWidgets.append(self.ADFGXMissingLetterEntry)
            self.ADFGXMissingLetterEntry.insert(0, "j")
            
            self.ADFGXMissingLetterLabel = tkinter.Label(self.SolveAsFrame, text = "Missing Letter:", bg = ButtonColour)
            self.ADFGXMissingLetterLabel.place(x = 50, y = 170)
            self.CipherBoxWidgets.append(self.ADFGXMissingLetterLabel)


        elif CipherType == "NxN Hill":

            self.NxNHillKeyLengthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.NxNHillKeyLengthEntry.place(x = 120, y = 200)

            self.CipherBoxWidgets.append(self.NxNHillKeyLengthEntry)
            
            self.NxNHillKeyLengthLabel = tkinter.Label(self.SolveAsFrame, text = "N:", bg = ButtonColour)
            #self.NxNHillKeyLengthLabel.place(x = 50, y = 200)
            self.NxNHillKeyLengthLabel.place(x = 90, y = 200)

            self.CipherBoxWidgets.append(self.NxNHillKeyLengthLabel)

            self.SolveNxNHillButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveNxNHillCommand)
            self.SolveNxNHillButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.SolveNxNHillButton)


        #elif CipherType == "Quadgram Scores":
        elif CipherType == "Quadgram Score":

            self.QuadgramScoreButton = tkinter.Button(self.SolveAsFrame, text = "Calculate", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.QuadgramScoreButtonCommand)
            self.QuadgramScoreButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.QuadgramScoreButton)


        elif CipherType == "Rail Fence":

            self.SolveRailFenceButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveRailFenceButtonCommand)
            self.SolveRailFenceButton.place(x = 110, y = 250)

            self.CipherBoxWidgets.append(self.SolveRailFenceButton)

            self.RailFenceMaxRowNumEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.RailFenceMaxRowNumEntry.place(x = 160, y = 200)

            self.CipherBoxWidgets.append(self.RailFenceMaxRowNumEntry)
            
            self.RailFenceMaxRowNumLabel = tkinter.Label(self.SolveAsFrame, text = "Max Row Num:", bg = ButtonColour)
            self.RailFenceMaxRowNumLabel.place(x = 50, y = 200)
            self.CipherBoxWidgets.append(self.RailFenceMaxRowNumLabel)

            self.RailFenceStartAtOptions = ["Top", "Bottom"]

            self.RailFenceStartAtOption = tkinter.StringVar(self)
            self.RailFenceStartAtOption.set("Top")

            self.RailFenceStartAtComboBox = ttk.Combobox(self.SolveAsFrame, width = 10, textvariable = self.RailFenceStartAtOption, values = self.RailFenceStartAtOptions)
            self.RailFenceStartAtComboBox.place(x = 160, y = 150)

            self.CipherBoxWidgets.append(self.RailFenceStartAtComboBox)

            self.RailFenceStartAtLabel = tkinter.Label(self.SolveAsFrame, text = "Start At:", bg = ButtonColour)
            self.RailFenceStartAtLabel.place(x = 50, y = 150)
            self.CipherBoxWidgets.append(self.RailFenceStartAtLabel)


        elif CipherType == "VIC Cipher":

            self.EncryptVICButton = tkinter.Button(self.SolveAsFrame, text = "Encrypt", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.EncryptVICCommand)
            self.EncryptVICButton.place(x = 50, y = 250)
            self.CipherBoxWidgets.append(self.EncryptVICButton)

            self.DecryptVICButton = tkinter.Button(self.SolveAsFrame, text = "Decrypt", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.DecryptVICCommand)
            #self.DecryptVICButton.place(x = 120, y = 250)
            self.DecryptVICButton.place(x = 160, y = 250)
            self.CipherBoxWidgets.append(self.DecryptVICButton)
            
            #self.VICKeyPhraseEntry = tkinter.Entry(self.SolveAsFrame, width = 30)
            #self.VICKeyPhraseEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            self.VICKeyPhraseEntry = tkinter.Entry(self.SolveAsFrame, width = 35)
            #self.VICKeyPhraseEntry.place(x = 100, y = 170)
            #self.VICKeyPhraseEntry.place(x = 100, y = 100)
            #self.VICKeyPhraseEntry.place(x = 50, y = 100)
            #self.VICKeyPhraseEntry.place(x = 70, y = 100)
            #self.VICKeyPhraseEntry.place(x = 90, y = 100)
            self.VICKeyPhraseEntry.place(x = 80, y = 100)
            self.CipherBoxWidgets.append(self.VICKeyPhraseEntry)
            #self.VICKeyPhraseEntry.insert(0, "I dream of Jeannie with t")
            self.VICKeyPhraseEntry.insert(0, "all the people are dead but I'm gonna keep dancing")

            self.VICKeyPhraseLabel = tkinter.Label(self.SolveAsFrame, text = "Key Phrase:", bg = ButtonColour)
            #self.VICKeyPhraseLabel.place(x = 30, y = 170)
            #self.VICKeyPhraseLabel.place(x = 30, y = 100)
            self.VICKeyPhraseLabel.place(x = 10, y = 100)
            self.CipherBoxWidgets.append(self.VICKeyPhraseLabel)

            #self.VICDateEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.VICDateEntry = tkinter.Entry(self.SolveAsFrame, width = 10)
            #self.VICDateEntry.place(x = 170, y = 195)
            #self.VICDateEntry.place(x = 160, y = 195)
            #self.VICDateEntry.place(x = 150, y = 195)
            self.VICDateEntry.place(x = 150, y = 125)
            self.CipherBoxWidgets.append(self.VICDateEntry)
            #self.VICDateEntry.insert(0, "7/4/1776")
            self.VICDateEntry.insert(0, "3/9/1752")

            self.VICDateLabel = tkinter.Label(self.SolveAsFrame, text = "Six Digits (Date):", bg = ButtonColour)
            #self.VICDateLabel.place(x = 50, y = 195)
            self.VICDateLabel.place(x = 50, y = 125)
            self.CipherBoxWidgets.append(self.VICDateLabel)

            self.VICMessageIndicatorEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.VICMessageIndicatorEntry.place(x = 200, y = 220)
            #self.VICMessageIndicatorEntry.place(x = 150, y = 220)
            #self.VICMessageIndicatorEntry.place(x = 170, y = 220)
            self.VICMessageIndicatorEntry.place(x = 170, y = 150)
            self.CipherBoxWidgets.append(self.VICMessageIndicatorEntry)
            #self.VICMessageIndicatorEntry.insert(0, "77651")
            self.VICMessageIndicatorEntry.insert(0, "60115")

            self.VICMessageIndicatorLabel = tkinter.Label(self.SolveAsFrame, text = "Message Indicator (5 digits):", bg = ButtonColour)
            #self.VICMessageIndicatorLabel.place(x = 10, y = 220)
            self.VICMessageIndicatorLabel.place(x = 10, y = 150)
            self.CipherBoxWidgets.append(self.VICMessageIndicatorLabel)

            self.VICPersonalNumberEntry = tkinter.Entry(self.SolveAsFrame, width = 3)
            #self.VICPersonalNumberEntry.place(x = 170, y = 175)
            self.VICPersonalNumberEntry.place(x = 175, y = 175)
            self.CipherBoxWidgets.append(self.VICPersonalNumberEntry)
            #self.VICPersonalNumberEntry.insert(0, "8")
            self.VICPersonalNumberEntry.insert(0, "15")

            self.VICPersonalNumberLabel = tkinter.Label(self.SolveAsFrame, text = "Personal Number:", bg = ButtonColour)
            self.VICPersonalNumberLabel.place(x = 70, y = 175)
            #self.VICPersonalNumberLabel.place(x = 75, y = 175)
            self.CipherBoxWidgets.append(self.VICPersonalNumberLabel)

            #self.VICCheckerboardKeyEntry = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.VICCheckerboardKeyEntry = tkinter.Entry(self.SolveAsFrame, width = 14)
            #self.VICCheckerboardKeyEntry.place(x = 175, y = 200)
            self.VICCheckerboardKeyEntry.place(x = 125, y = 200)
            self.CipherBoxWidgets.append(self.VICCheckerboardKeyEntry)
            #self.VICCheckerboardKeyEntry.insert(0, "at one sir")
            self.VICCheckerboardKeyEntry.insert(0, "a sin to err")
            #self.VICCheckerboardKeyEntry.insert(0, "A S I N T O E R B D G J L P U W Y . C F H K M Q V X Z #")

            self.VICCheckerboardKeyLabel = tkinter.Label(self.SolveAsFrame, text = "Checkerboard Key:", bg = ButtonColour)
            #self.VICCheckerboardKeyLabel.place(x = 70, y = 200)
            self.VICCheckerboardKeyLabel.place(x = 20, y = 200)
            self.CipherBoxWidgets.append(self.VICCheckerboardKeyLabel)


        elif CipherType == "Word Count":

            self.WordCountButton = tkinter.Button(self.SolveAsFrame, text = "Count", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.WordCountButtonCommand)
            self.WordCountButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.WordCountButton)

        elif CipherType == "Morse Code":

            self.EncryptVICButton = tkinter.Button(self.SolveAsFrame, text = "Encode", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.EncodeMorseCommand)
            self.EncryptVICButton.place(x = 50, y = 250)
            self.CipherBoxWidgets.append(self.EncryptVICButton)

            self.DecryptVICButton = tkinter.Button(self.SolveAsFrame, text = "Decode", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.DecodeMorseCommand)
            self.DecryptVICButton.place(x = 160, y = 250)
            self.CipherBoxWidgets.append(self.DecryptVICButton)
            
            self.MorseDotEntry = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.MorseDotEntry.place(x = 150, y = 100)
            self.CipherBoxWidgets.append(self.MorseDotEntry)
            self.MorseDotEntry.insert(0, ".")

            self.MorseDotLabel = tkinter.Label(self.SolveAsFrame, text = "Dot:", bg = ButtonColour)
            #self.MorseDotLabel.place(x = 120, y = 100)
            self.MorseDotLabel.place(x = 110, y = 100)
            self.CipherBoxWidgets.append(self.MorseDotLabel)


            self.MorseDashEntry = tkinter.Entry(self.SolveAsFrame, width = 3)
            self.MorseDashEntry.place(x = 150, y = 130)
            self.CipherBoxWidgets.append(self.MorseDashEntry)
            self.MorseDashEntry.insert(0, "-")

            self.MorseDashLabel = tkinter.Label(self.SolveAsFrame, text = "Dash:", bg = ButtonColour)
            self.MorseDashLabel.place(x = 100, y = 130)
            self.CipherBoxWidgets.append(self.MorseDashLabel)


            #self.MorseDelimEntry = tkinter.Entry(self.SolveAsFrame, width = 3)
            #self.MorseDelimEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.MorseBlipDelimEntry = tkinter.Entry(self.SolveAsFrame, width = 8)
            #self.MorseDelimEntry.place(x = 150, y = 130)
            self.MorseBlipDelimEntry.place(x = 150, y = 160)
            self.CipherBoxWidgets.append(self.MorseBlipDelimEntry)
            #self.MorseDelimEntry.insert(0, " ")
            #self.MorseDelimEntry.insert(0, "<SPACE>")
            self.MorseBlipDelimEntry.insert(0, "<s>")

            self.MorseBlipDelimLabel = tkinter.Label(self.SolveAsFrame, text = "Blip Delimiter:", bg = ButtonColour)
            #self.MorseDelimLabel.place(x = 80, y = 130)
            #self.MorseBlipDelimLabel.place(x = 80, y = 160)
            self.MorseBlipDelimLabel.place(x = 50, y = 160)
            self.CipherBoxWidgets.append(self.MorseBlipDelimLabel)

            self.MorseCharDelimEntry = tkinter.Entry(self.SolveAsFrame, width = 8)
            self.MorseCharDelimEntry.place(x = 150, y = 190)
            self.CipherBoxWidgets.append(self.MorseCharDelimEntry)
            self.MorseCharDelimEntry.insert(0, "<3s>")

            self.MorseCharDelimLabel = tkinter.Label(self.SolveAsFrame, text = "Char Delimiter:", bg = ButtonColour)
            self.MorseCharDelimLabel.place(x = 50, y = 190)
            self.CipherBoxWidgets.append(self.MorseCharDelimLabel)

            self.MorseWordDelimEntry = tkinter.Entry(self.SolveAsFrame, width = 8)
            self.MorseWordDelimEntry.place(x = 150, y = 220)
            self.CipherBoxWidgets.append(self.MorseWordDelimEntry)
            self.MorseWordDelimEntry.insert(0, "<7s>")

            self.MorseWordDelimLabel = tkinter.Label(self.SolveAsFrame, text = "Word Delimiter:", bg = ButtonColour)
            self.MorseWordDelimLabel.place(x = 50, y = 220)
            self.CipherBoxWidgets.append(self.MorseWordDelimLabel)


            self.MorseSpaceInfoLabel = tkinter.Label(self.SolveAsFrame, text = "(<ns>, where n is a positive integer, denotes n spaces)", bg = ButtonColour)
            #self.MorseSpaceInfoLabel.place(x = 60, y = 70)
            #self.MorseSpaceInfoLabel.place(x = 20, y = 70)
            #self.MorseSpaceInfoLabel.place(x = 5, y = 70)
            #self.MorseSpaceInfoLabel.place(x = 5, y = 80)
            self.MorseSpaceInfoLabel.place(x = 5, y = 75)
            self.CipherBoxWidgets.append(self.MorseSpaceInfoLabel)


        elif CipherType == "Enigma":

            #self.EncryptEnigmaButton = tkinter.Button(self.SolveAsFrame, text = "Encrypt", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.EncryptEnigmaCommand)
            #self.EncryptEnigmaButton.place(x = 50, y = 250)
            #self.CipherBoxWidgets.append(self.EncryptEnigmaButton)

            #self.DecryptEnigmaButton = tkinter.Button(self.SolveAsFrame, text = "Decrypt", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.DecryptEnigmaCommand)
            #self.DecryptEnigmaButton.place(x = 160, y = 250)
            #self.CipherBoxWidgets.append(self.DecryptEnigmaButton)

            self.EncryptDecryptEnigmaButton = tkinter.Button(self.SolveAsFrame, text = "Encrypt / Decrypt", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.EncryptEnigmaCommand)
            self.EncryptDecryptEnigmaButton.place(x = 50, y = 250)
            self.CipherBoxWidgets.append(self.EncryptDecryptEnigmaButton)
            
            self.EnigmaRotorOrderEntry = tkinter.Entry(self.SolveAsFrame, width = 4)
            self.EnigmaRotorOrderEntry.place(x = 110, y = 100)
            self.CipherBoxWidgets.append(self.EnigmaRotorOrderEntry)
            #self.EnigmaRotorOrderEntry.insert(0, "134")
            #self.EnigmaRotorOrderEntry.insert(0, "431")
            self.EnigmaRotorOrderEntry.insert(0, "123")

            self.EnigmaRotorOrderLabel = tkinter.Label(self.SolveAsFrame, text = "Rotor Order:", bg = ButtonColour)
            self.EnigmaRotorOrderLabel.place(x = 30, y = 100)
            self.CipherBoxWidgets.append(self.EnigmaRotorOrderLabel)

            self.EnigmaRotorPositionsEntry = tkinter.Entry(self.SolveAsFrame, width = 5)
            self.EnigmaRotorPositionsEntry.place(x = 150, y = 125)
            self.CipherBoxWidgets.append(self.EnigmaRotorPositionsEntry)
            #self.EnigmaRotorPositionsEntry.insert(0, "FLI")
            #self.EnigmaRotorPositionsEntry.insert(0, "ILF")
            self.EnigmaRotorPositionsEntry.insert(0, "AAA")

            self.EnigmaRotorPositionsLabel = tkinter.Label(self.SolveAsFrame, text = "Rotor Start Positions:", bg = ButtonColour)
            self.EnigmaRotorPositionsLabel.place(x = 30, y = 125)
            self.CipherBoxWidgets.append(self.EnigmaRotorPositionsLabel)

            self.EnigmaRingKeyEntry = tkinter.Entry(self.SolveAsFrame, width = 5)
            self.EnigmaRingKeyEntry.place(x = 100, y = 150)
            self.CipherBoxWidgets.append(self.EnigmaRingKeyEntry)
            #self.EnigmaRingKeyEntry.insert(0, "POO")
            #self.EnigmaRingKeyEntry.insert(0, "OOP")
            self.EnigmaRingKeyEntry.insert(0, "AAA")

            self.EnigmaRingKeyLabel = tkinter.Label(self.SolveAsFrame, text = "Ring Key:", bg = ButtonColour)
            self.EnigmaRingKeyLabel.place(x = 30, y = 150)
            self.CipherBoxWidgets.append(self.EnigmaRingKeyLabel)

            self.EnigmaPlugboardEntry = tkinter.Entry(self.SolveAsFrame, width = 30)
            self.EnigmaPlugboardEntry.place(x = 100, y = 175)
            self.CipherBoxWidgets.append(self.EnigmaPlugboardEntry)
            #self.EnigmaPlugboardEntry.insert(0, "PO ML IU KJ NH YT GB VF RE DC")
            self.EnigmaPlugboardEntry.insert(0, "AA BB")

            self.EnigmaPlugboardLabel = tkinter.Label(self.SolveAsFrame, text = "Plugboard:", bg = ButtonColour)
            self.EnigmaPlugboardLabel.place(x = 30, y = 175)
            self.CipherBoxWidgets.append(self.EnigmaPlugboardLabel)

            self.EnigmaReflectorLabel = tkinter.Label(self.SolveAsFrame, text = "Reflector:", bg = ButtonColour)
            self.EnigmaReflectorLabel.place(x = 30, y = 200)
            self.CipherBoxWidgets.append(self.EnigmaReflectorLabel)

            self.EnigmaReflectorOptions = [x for x in ENIGMA_REFLECTORS]
            #self.EnigmaReflectorOptions = [x for x in ENIGMA_REFLECTORS.keys()]
            #self.EnigmaReflectorOptions = ["a", "b", "b-thin", "c", "c-thin"]

            self.EnigmaReflectorOption = tkinter.StringVar(self)
            self.EnigmaReflectorOption.set("b")

            #self.EnigmaReflectorComboBox = ttk.Combobox(self.SolveAsFrame, width = 7, textvariable = self.EnigmaReflectorOption, values = self.EnigmaReflectorLabel)
            self.EnigmaReflectorComboBox = ttk.Combobox(self.SolveAsFrame, width = 7, textvariable = self.EnigmaReflectorOption, values = self.EnigmaReflectorOptions)
            #self.EnigmaReflectorComboBox.place(x = 110, y = 200)
            self.EnigmaReflectorComboBox.place(x = 100, y = 200)
            self.CipherBoxWidgets.append(self.EnigmaReflectorComboBox)


        elif CipherType == "Custom Substitution":

            self.EncryptCustomSubButton = tkinter.Button(self.SolveAsFrame, text = "Encrypt", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.EncryptCustomSubCommand)
            #self.EncryptCustomSubButton.place(x = 50, y = 250)
            self.EncryptCustomSubButton.place(x = 30, y = 250)
            self.CipherBoxWidgets.append(self.EncryptCustomSubButton)

            self.DecryptCustomSubButton = tkinter.Button(self.SolveAsFrame, text = "Decrypt", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.DecryptCustomSubCommand)
            #self.DecryptCustomSubButton.place(x = 160, y = 250)
            #self.DecryptCustomSubButton.place(x = 100, y = 250)
            self.DecryptCustomSubButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.DecryptCustomSubButton)
            
            self.SolveCustomSubButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveCustomSubCommand)
            self.SolveCustomSubButton.place(x = 190, y = 250)
            self.CipherBoxWidgets.append(self.SolveCustomSubButton)

            self.SolveCustomSubCSharpButton = tkinter.Button(self.SolveAsFrame, text = "C#", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveCustomSubCSharpCommand)
            #self.SolveCustomSubCSharpButton.place(x = 20, y = 250)
            #self.SolveCustomSubCSharpButton.place(x = 220, y = 250)
            self.SolveCustomSubCSharpButton.place(x = 260, y = 250)
            self.CipherBoxWidgets.append(self.SolveCustomSubCSharpButton)
            
            self.CustomSubAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            #self.CustomSubAlphabetEntry.place(x = 10, y = 100)
            #self.CustomSubAlphabetEntry.place(x = 10, y = 110)
            self.CustomSubAlphabetEntry.place(x = 10, y = 105)
            self.CipherBoxWidgets.append(self.CustomSubAlphabetEntry)
            #self.CustomSubAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz0123456789")
            self.CustomSubAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz")

            self.CustomSubAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Alphabet:", bg = ButtonColour)
            self.CustomSubAlphabetLabel.place(x = 10, y = 80)
            self.CipherBoxWidgets.append(self.CustomSubAlphabetLabel)

            self.CustomSubKeyEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            #self.CustomSubKeyEntry.place(x = 10, y = 150)
            #self.CustomSubKeyEntry.place(x = 10, y = 160)
            self.CustomSubKeyEntry.place(x = 10, y = 155)
            self.CipherBoxWidgets.append(self.CustomSubKeyEntry)
            #self.CustomSubKeyEntry.insert(0, "abcdefghijklmnopqrstuvwxyz0123456789")
            self.CustomSubKeyEntry.insert(0, "abcdefghijklmnopqrstuvwxyz")

            self.CustomSubKeyLabel = tkinter.Label(self.SolveAsFrame, text = "Key:", bg = ButtonColour)
            self.CustomSubKeyLabel.place(x = 10, y = 130)
            self.CipherBoxWidgets.append(self.CustomSubKeyLabel)

            self.CustomSubAlphabetOptions = ["Alphabet", "Alphanumeric", "Numbers"]

            self.CustomSubAlphabetOption = tkinter.StringVar(self)
            #self.CustomSubAlphabetOption.bind("<<ComboboxSelected>>", self.ChangeCustomSubAlphabetCommand)
            #self.CustomSubAlphabetOption.set("Alphanumeric")
            self.CustomSubAlphabetOption.set("Alphabet")

            self.CustomSubRandomKeyButton = tkinter.Button(self.SolveAsFrame, text = "Randomise", bg = ButtonColour, command = self.GetRandomCustomSubKeyCommand)
            #self.CustomSubRandomKeyButton.place(x = 100, y = 130)
            self.CustomSubRandomKeyButton.place(x = 60, y = 127)
            self.CipherBoxWidgets.append(self.CustomSubRandomKeyButton)

            #self.CustomSubAlphabetComboBox = ttk.Combobox(self.SolveAsFrame, width = 7, textvariable = self.CustomSubAlphabetOption, values = self.CustomSubAlphabetOptions)
            self.CustomSubAlphabetComboBox = ttk.Combobox(self.SolveAsFrame, width = 15, textvariable = self.CustomSubAlphabetOption, values = self.CustomSubAlphabetOptions)
            self.CustomSubAlphabetComboBox.bind("<<ComboboxSelected>>", self.ChangeCustomSubAlphabetCommand)
            #self.CustomSubAlphabetComboBox.place(x = 150, y = 80)
            self.CustomSubAlphabetComboBox.place(x = 100, y = 80)
            self.CipherBoxWidgets.append(self.CustomSubAlphabetComboBox)

            self.CustomSubCaseSensitiveOption = tkinter.IntVar()

            self.CustomSubCaseSensitiveButton = tkinter.Checkbutton(self.SolveAsFrame, text = "Case Sensitive", bg = ButtonColour, variable = self.CustomSubCaseSensitiveOption)
            self.CustomSubCaseSensitiveButton.place(x = 10, y = 200)
            self.CipherBoxWidgets.append(self.CustomSubCaseSensitiveButton)

            self.CustomSubTrialNumEntry = tkinter.Entry(self.SolveAsFrame, width = 6)
            self.CustomSubTrialNumEntry.place(x = 200, y = 200)
            self.CipherBoxWidgets.append(self.CustomSubTrialNumEntry)
            #self.CustomSubTrialNumEntry.insert(0, "1000")
            self.CustomSubTrialNumEntry.insert(0, "10000")

            self.CustomSubTrialNumLabel = tkinter.Label(self.SolveAsFrame, text = "No. Of Trials:", bg = ButtonColour)
            #self.CustomSubTrialNumLabel.place(x = 10, y = 175)
            #self.CustomSubTrialNumLabel.place(x = 200, y = 175)
            self.CustomSubTrialNumLabel.place(x = 180, y = 175)
            self.CipherBoxWidgets.append(self.CustomSubTrialNumLabel)


        elif CipherType == "ADFGVX":

            self.SolveADFGVXButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveADFGVXCipher)
            self.SolveADFGVXButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.SolveADFGVXButton)

            self.BruteADFGVXButton = tkinter.Button(self.SolveAsFrame, text = "Brute", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.BruteADFGVXCommand)
            self.BruteADFGVXButton.place(x = 200, y = 250)
            self.CipherBoxWidgets.append(self.BruteADFGVXButton)

            self.ADFGVXKeyLengthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.ADFGVXKeyLengthEntry.place(x = 160, y = 200)
            self.CipherBoxWidgets.append(self.ADFGVXKeyLengthEntry)
            
            self.ADFGVXKeyLengthLabel = tkinter.Label(self.SolveAsFrame, text = "No. Of Columns:", bg = ButtonColour)
            self.ADFGVXKeyLengthLabel.place(x = 50, y = 200)
            self.CipherBoxWidgets.append(self.ADFGVXKeyLengthLabel)

            self.ADFGVXTranspoTypeOptions = ["row", "column"]

            self.ADFGVXTranspoTypeOption = tkinter.StringVar()
            self.ADFGVXTranspoTypeOption.set("column")

            #self.ADFGVXTranspoTypeComboBox = ttk.Combobox(self.SolveAsFrame, width = 15, textvariable = self.ADFGVXTranspoTypeOption, values = self.ADFGVXTranspoTypeOptions)
            self.ADFGVXTranspoTypeComboBox = ttk.Combobox(self.SolveAsFrame, width = 10, textvariable = self.ADFGVXTranspoTypeOption, values = self.ADFGVXTranspoTypeOptions)
            self.ADFGVXTranspoTypeComboBox.place(x = 150, y = 170)
            self.CipherBoxWidgets.append(self.ADFGVXTranspoTypeComboBox)

            self.ADFGVXTranspoTypeLabel = tkinter.Label(self.SolveAsFrame, text = "Transposition Type:", bg = ButtonColour)
            #self.ADFGVXTranspoTypeLabel.place(x = 60, y = 170)
            self.ADFGVXTranspoTypeLabel.place(x = 30, y = 170)
            self.CipherBoxWidgets.append(self.ADFGVXTranspoTypeLabel)


        elif CipherType == "Base N --> Base M":

            self.BaseNToBaseMConvertButton = tkinter.Button(self.SolveAsFrame, text = "Base N --> Base M", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.BaseNToBaseMCommand)
            self.BaseNToBaseMConvertButton.place(x = 80, y = 250)
            self.CipherBoxWidgets.append(self.BaseNToBaseMConvertButton)

            self.BaseNToBaseMNumberEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.BaseNToBaseMNumberEntry.place(x = 160, y = 210)
            self.CipherBoxWidgets.append(self.BaseNToBaseMNumberEntry)

            self.BaseNToBaseMNumberLabel = tkinter.Label(self.SolveAsFrame, text = "Number:", bg = ButtonColour)
            self.BaseNToBaseMNumberLabel.place(x = 50, y = 210)
            self.CipherBoxWidgets.append(self.BaseNToBaseMNumberLabel)

            self.BaseNToBaseMBaseNEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.BaseNToBaseMBaseNEntry.place(x = 160, y = 140)
            self.CipherBoxWidgets.append(self.BaseNToBaseMBaseNEntry)
            self.BaseNToBaseMBaseNEntry.insert(0, "10")

            self.BaseNToBaseMBaseNLabel = tkinter.Label(self.SolveAsFrame, text = "(Base) N:", bg = ButtonColour)
            self.BaseNToBaseMBaseNLabel.place(x = 50, y = 140)
            self.CipherBoxWidgets.append(self.BaseNToBaseMBaseNLabel)

            self.BaseNToBaseMBaseMEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.BaseNToBaseMBaseMEntry.place(x = 160, y = 170)
            self.CipherBoxWidgets.append(self.BaseNToBaseMBaseMEntry)

            self.BaseNToBaseMBaseMLabel = tkinter.Label(self.SolveAsFrame, text = "(Base) M:", bg = ButtonColour)
            self.BaseNToBaseMBaseMLabel.place(x = 50, y = 170)
            self.CipherBoxWidgets.append(self.BaseNToBaseMBaseMLabel)


        elif CipherType == "Running Key":

            self.RunningKeyWorkspaceButton = tkinter.Button(self.SolveAsFrame, text = "Workspace", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.RunningKeyWorkspaceCommand)
            self.RunningKeyWorkspaceButton.place(x = 30, y = 250)
            self.CipherBoxWidgets.append(self.RunningKeyWorkspaceButton)

        elif CipherType == "Percentage Correct":

            self.PercentageCorrectButton = tkinter.Button(self.SolveAsFrame, text = "Calculate", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.PercentageCorrectCommand)
            self.PercentageCorrectButton.place(x = 80, y = 250)
            self.CipherBoxWidgets.append(self.PercentageCorrectButton)

            self.PercentageCorrectText1Label = tkinter.Label(self.SolveAsFrame, text = "Text 1:", bg = ButtonColour)
            #self.PercentageCorrectText1Label.place(x = 50, y = 200)
            self.PercentageCorrectText1Label.place(x = 50, y = 140)
            self.CipherBoxWidgets.append(self.PercentageCorrectText1Label)
            
            #self.PercentageCorrectText1Entry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.PercentageCorrectText1Entry = tkinter.Entry(self.SolveAsFrame, width = 15)
            self.PercentageCorrectText1Entry = tkinter.Entry(self.SolveAsFrame, width = 25)
            #self.PercentageCorrectText1Entry.place(x = 160, y = 200)
            #self.PercentageCorrectText1Entry.place(x = 100, y = 200)
            self.PercentageCorrectText1Entry.place(x = 100, y = 140)
            self.CipherBoxWidgets.append(self.PercentageCorrectText1Entry)

            self.PercentageCorrectText2Entry = tkinter.Label(self.SolveAsFrame, text = "Text 2:", bg = ButtonColour)
            #self.PercentageCorrectText2Entry.place(x = 50, y = 140)
            self.PercentageCorrectText2Entry.place(x = 50, y = 200)
            self.CipherBoxWidgets.append(self.PercentageCorrectText2Entry)

            #self.PercentageCorrectText2Entry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.PercentageCorrectText2Entry = tkinter.Entry(self.SolveAsFrame, width = 15)
            self.PercentageCorrectText2Entry = tkinter.Entry(self.SolveAsFrame, width = 25)
            #self.PercentageCorrectText2Entry.place(x = 160, y = 140)
            #self.PercentageCorrectText2Entry.place(x = 100, y = 140)
            self.PercentageCorrectText2Entry.place(x = 100, y = 200)
            self.CipherBoxWidgets.append(self.PercentageCorrectText2Entry)

        elif CipherType == "Homophonic Substitution":

            #self.HomoSubSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveHomoSubCommand)
            self.HomoSubSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve Bigram", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveHomoSubCommand)
            #self.HomoSubSolveButton.place(x = 80, y = 250)
            self.HomoSubSolveButton.place(x = 30, y = 250)
            self.CipherBoxWidgets.append(self.HomoSubSolveButton)

            #self.HomoSubLongSolveButton = tkinter.Button(self.SolveAsFrame, text = "Thorough Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.LongSolveHomoSubCommand)
            self.HomoSubLongSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve Quadgram", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveHomoSubQuadgramCommand)
            self.HomoSubLongSolveButton.place(x = 150, y = 250)
            self.CipherBoxWidgets.append(self.HomoSubLongSolveButton)

        elif CipherType == "Substitution + Transposition":

            self.TranspoSubSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveTranspoSubCommand)
            self.TranspoSubSolveButton.place(x = 80, y = 250)
            self.CipherBoxWidgets.append(self.TranspoSubSolveButton)

            self.TranspoSubColumnNumLabel = tkinter.Label(self.SolveAsFrame, text = "Num Of Columns:", bg = ButtonColour)
            self.TranspoSubColumnNumLabel.place(x = 50, y = 190)
            self.CipherBoxWidgets.append(self.TranspoSubColumnNumLabel)
            
            self.TranspoSubColumnNumEntry = tkinter.Entry(self.SolveAsFrame, width = 6)
            #self.TranspoSubColumnNumEntry.place(x = 110, y = 190)
            #self.TranspoSubColumnNumEntry.place(x = 140, y = 190)
            self.TranspoSubColumnNumEntry.place(x = 160, y = 190)
            self.CipherBoxWidgets.append(self.TranspoSubColumnNumEntry)

            #self.TranspoSubTranspoTypeOptions = ["row", "column"]
            self.TranspoSubTranspoTypeOptions = ["row", "column", "myszkowski", "amsco"]

            self.TranspoSubTranspoTypeOption = tkinter.StringVar()
            self.TranspoSubTranspoTypeOption.set("column")

            self.TranspoSubTranspoTypeComboBox = ttk.Combobox(self.SolveAsFrame, width = 10, textvariable = self.TranspoSubTranspoTypeOption, values = self.TranspoSubTranspoTypeOptions)
            self.TranspoSubTranspoTypeComboBox.place(x = 150, y = 140)
            self.CipherBoxWidgets.append(self.TranspoSubTranspoTypeComboBox)

            self.TranspoSubTranspoTypeLabel = tkinter.Label(self.SolveAsFrame, text = "Transposition Type:", bg = ButtonColour)
            self.TranspoSubTranspoTypeLabel.place(x = 30, y = 140)
            self.CipherBoxWidgets.append(self.TranspoSubTranspoTypeLabel)


        elif CipherType == "Transposition + Vigenère":

            self.TranspoVigenSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveTranspoVigenCommand)
            self.TranspoVigenSolveButton.place(x = 80, y = 250)
            self.CipherBoxWidgets.append(self.TranspoVigenSolveButton)

            self.TranspoVigenColumnNumLabel = tkinter.Label(self.SolveAsFrame, text = "Num Of Columns:", bg = ButtonColour)
            self.TranspoVigenColumnNumLabel.place(x = 50, y = 160)
            self.CipherBoxWidgets.append(self.TranspoVigenColumnNumLabel)
            
            self.TranspoVigenColumnNumEntry = tkinter.Entry(self.SolveAsFrame, width = 6)
            self.TranspoVigenColumnNumEntry.place(x = 160, y = 160)
            self.CipherBoxWidgets.append(self.TranspoVigenColumnNumEntry)

            self.TranspoVigenTranspoTypeOptions = ["row", "column"]

            self.TranspoVigenTranspoTypeOption = tkinter.StringVar()
            self.TranspoVigenTranspoTypeOption.set("column")

            self.TranspoVigenTranspoTypeComboBox = ttk.Combobox(self.SolveAsFrame, width = 10, textvariable = self.TranspoVigenTranspoTypeOption, values = self.TranspoVigenTranspoTypeOptions)
            self.TranspoVigenTranspoTypeComboBox.place(x = 150, y = 110)
            self.CipherBoxWidgets.append(self.TranspoVigenTranspoTypeComboBox)

            self.TranspoVigenTranspoTypeLabel = tkinter.Label(self.SolveAsFrame, text = "Transposition Type:", bg = ButtonColour)
            self.TranspoVigenTranspoTypeLabel.place(x = 30, y = 110)
            self.CipherBoxWidgets.append(self.TranspoVigenTranspoTypeLabel)

            self.TranspoVigenPeriodLabel = tkinter.Label(self.SolveAsFrame, text = "Vigenère Period:", bg = ButtonColour)
            self.TranspoVigenPeriodLabel.place(x = 50, y = 210)
            self.CipherBoxWidgets.append(self.TranspoVigenPeriodLabel)
            
            self.TranspoVigenPeriodEntry = tkinter.Entry(self.SolveAsFrame, width = 6)
            self.TranspoVigenPeriodEntry.place(x = 160, y = 210)
            self.CipherBoxWidgets.append(self.TranspoVigenPeriodEntry)


        elif CipherType == "Myszkowski Transposition":

            self.MyszSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveMyszCommand)
            self.MyszSolveButton.place(x = 80, y = 250)
            self.CipherBoxWidgets.append(self.MyszSolveButton)

            self.MyszColumnNumLabel = tkinter.Label(self.SolveAsFrame, text = "Num Of Columns:", bg = ButtonColour)
            self.MyszColumnNumLabel.place(x = 50, y = 160)
            self.CipherBoxWidgets.append(self.MyszColumnNumLabel)
            
            self.MyszColumnNumEntry = tkinter.Entry(self.SolveAsFrame, width = 6)
            self.MyszColumnNumEntry.place(x = 160, y = 160)
            self.CipherBoxWidgets.append(self.MyszColumnNumEntry)


        elif CipherType == "AMSCO":

            self.AMSCOSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveAMSCOCommand)
            self.AMSCOSolveButton.place(x = 80, y = 250)
            self.CipherBoxWidgets.append(self.AMSCOSolveButton)

            self.AMSCOColumnNumLabel = tkinter.Label(self.SolveAsFrame, text = "Num Of Columns:", bg = ButtonColour)
            self.AMSCOColumnNumLabel.place(x = 50, y = 160)
            self.CipherBoxWidgets.append(self.AMSCOColumnNumLabel)
            
            self.AMSCOColumnNumEntry = tkinter.Entry(self.SolveAsFrame, width = 6)
            self.AMSCOColumnNumEntry.place(x = 160, y = 160)
            self.CipherBoxWidgets.append(self.AMSCOColumnNumEntry)

            self.AMSCOChunkSizeLabel = tkinter.Label(self.SolveAsFrame, text = "(Max) Chunk Size:", bg = ButtonColour)
            self.AMSCOChunkSizeLabel.place(x = 50, y = 200)
            self.CipherBoxWidgets.append(self.AMSCOChunkSizeLabel)
            
            self.AMSCOChunkSizeEntry = tkinter.Entry(self.SolveAsFrame, width = 6)
            self.AMSCOChunkSizeEntry.place(x = 160, y = 200)
            self.CipherBoxWidgets.append(self.AMSCOChunkSizeEntry)


        #elif CipherType == "Straddle Vigenère":
        elif CipherType == "Straddle Nihilist":

            self.StraddleVigenereSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveStraddleVigenereCommand)
            self.StraddleVigenereSolveButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.StraddleVigenereSolveButton)
            
            self.StraddleVigenerePeriodEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.StraddleVigenerePeriodEntry.place(x = 100, y = 115)
            self.StraddleVigenerePeriodEntry.place(x = 120, y = 115)
            self.CipherBoxWidgets.append(self.StraddleVigenerePeriodEntry)

            self.StraddleVigenerePeriodLabel = tkinter.Label(self.SolveAsFrame, text = "Period:", bg = ButtonColour)
            self.StraddleVigenerePeriodLabel.place(x = 50, y = 115)
            self.CipherBoxWidgets.append(self.StraddleVigenerePeriodLabel)

            self.StraddleVigenereAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            self.StraddleVigenereAlphabetEntry.place(x = 30, y = 170)
            self.StraddleVigenereAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz#/")
            self.CipherBoxWidgets.append(self.StraddleVigenereAlphabetEntry)

            self.StraddleVigenereAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Alphabet:", bg = ButtonColour)
            self.StraddleVigenereAlphabetLabel.place(x = 10, y = 140)
            self.CipherBoxWidgets.append(self.StraddleVigenereAlphabetLabel)

            self.StraddleVigenereHeightEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.StraddleVigenereHeightEntry.place(x = 100, y = 195)
            self.StraddleVigenereHeightEntry.place(x = 120, y = 195)
            self.StraddleVigenereHeightEntry.insert(0, "3")
            self.CipherBoxWidgets.append(self.StraddleVigenereHeightEntry)

            self.StraddleVigenereHeightLabel = tkinter.Label(self.SolveAsFrame, text = "Rows:", bg = ButtonColour)
            self.StraddleVigenereHeightLabel.place(x = 50, y = 195)
            self.CipherBoxWidgets.append(self.StraddleVigenereHeightLabel)

            self.StraddleVigenereWidthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.StraddleVigenereWidthEntry.place(x = 100, y = 220)
            self.StraddleVigenereWidthEntry.place(x = 120, y = 220)
            self.StraddleVigenereWidthEntry.insert(0, "10")
            self.CipherBoxWidgets.append(self.StraddleVigenereWidthEntry)

            self.StraddleVigenereWidthLabel = tkinter.Label(self.SolveAsFrame, text = "Columns:", bg = ButtonColour)
            self.StraddleVigenereWidthLabel.place(x = 50, y = 220)
            self.CipherBoxWidgets.append(self.StraddleVigenereWidthLabel)


        elif CipherType == "N-Graph Vigenère":

            self.NGraphVigenereSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveNGraphVigenereCommand)
            self.NGraphVigenereSolveButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.NGraphVigenereSolveButton)
            
            self.NGraphVigenereNEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.NGraphVigenereNEntry.place(x = 120, y = 115)
            self.CipherBoxWidgets.append(self.NGraphVigenereNEntry)

            self.NGraphVigenereNLabel = tkinter.Label(self.SolveAsFrame, text = "N:", bg = ButtonColour)
            self.NGraphVigenereNLabel.place(x = 50, y = 115)
            self.CipherBoxWidgets.append(self.NGraphVigenereNLabel)

            self.NGraphVigenerePeriodEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.NGraphVigenerePeriodEntry.place(x = 120, y = 140)
            self.CipherBoxWidgets.append(self.NGraphVigenerePeriodEntry)

            self.NGraphVigenerePeriodLabel = tkinter.Label(self.SolveAsFrame, text = "Period:", bg = ButtonColour)
            self.NGraphVigenerePeriodLabel.place(x = 50, y = 140)
            self.CipherBoxWidgets.append(self.NGraphVigenerePeriodLabel)

            self.NGraphVigenereAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            self.NGraphVigenereAlphabetEntry.place(x = 30, y = 200)
            self.NGraphVigenereAlphabetEntry.insert(0, "")
            self.CipherBoxWidgets.append(self.NGraphVigenereAlphabetEntry)

            self.NGraphVigenereAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Alphabet:", bg = ButtonColour)
            self.NGraphVigenereAlphabetLabel.place(x = 10, y = 170)
            self.CipherBoxWidgets.append(self.NGraphVigenereAlphabetLabel)


        elif CipherType == "Pollux":

            self.PolluxSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolvePolluxCommand)
            self.PolluxSolveButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.PolluxSolveButton)

            self.PolluxAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            #self.PolluxAlphabetEntry.place(x = 30, y = 200)
            self.PolluxAlphabetEntry.place(x = 30, y = 220)
            #self.PolluxAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz0123456789")
            self.PolluxAlphabetEntry.insert(0, "0123456789")
            self.CipherBoxWidgets.append(self.PolluxAlphabetEntry)

            self.PolluxAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Alphabet:", bg = ButtonColour)
            #self.PolluxAlphabetLabel.place(x = 10, y = 170)
            self.PolluxAlphabetLabel.place(x = 10, y = 190)
            self.CipherBoxWidgets.append(self.PolluxAlphabetLabel)

            self.PolluxNumDashEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.PolluxNumDashEntry.place(x = 120, y = 100)
            #self.PolluxNumDashEntry.place(x = 120, y = 90)
            #self.PolluxNumDashEntry.place(x = 130, y = 90)
            self.PolluxNumDashEntry.place(x = 140, y = 90)
            self.PolluxNumDashEntry.insert(0, "3")
            self.CipherBoxWidgets.append(self.PolluxNumDashEntry)

            self.PolluxNumDashLabel = tkinter.Label(self.SolveAsFrame, text = "Num Of Dash:", bg = ButtonColour)
            #self.PolluxNumDashLabel.place(x = 50, y = 100)
            self.PolluxNumDashLabel.place(x = 50, y = 90)
            self.CipherBoxWidgets.append(self.PolluxNumDashLabel)

            self.PolluxNumDotEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.PolluxNumDotEntry.place(x = 120, y = 140)
            #self.PolluxNumDotEntry.place(x = 120, y = 130)
            self.PolluxNumDotEntry.place(x = 140, y = 130)
            self.PolluxNumDotEntry.insert(0, "4")
            self.CipherBoxWidgets.append(self.PolluxNumDotEntry)

            self.PolluxNumDotLabel = tkinter.Label(self.SolveAsFrame, text = "Num Of Dot:", bg = ButtonColour)
            #self.PolluxNumDotLabel.place(x = 50, y = 140)
            self.PolluxNumDotLabel.place(x = 50, y = 130)
            self.CipherBoxWidgets.append(self.PolluxNumDotLabel)

            self.PolluxNumSepEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.PolluxNumSepEntry.place(x = 120, y = 180)
            #self.PolluxNumSepEntry.place(x = 120, y = 170)
            #self.PolluxNumSepEntry.place(x = 130, y = 170)
            self.PolluxNumSepEntry.place(x = 140, y = 170)
            self.PolluxNumSepEntry.insert(0, "3")
            self.CipherBoxWidgets.append(self.PolluxNumSepEntry)

            self.PolluxNumSepLabel = tkinter.Label(self.SolveAsFrame, text = "Num Of Sep:", bg = ButtonColour)
            #self.PolluxNumSepLabel.place(x = 50, y = 180)
            self.PolluxNumSepLabel.place(x = 50, y = 170)
            self.CipherBoxWidgets.append(self.PolluxNumSepLabel)


        elif CipherType == "ABCDEFGHIK":

            self.ABCDEFGHIKAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            #self.ABCDEFGHIKAlphabetEntry.place(x = 30, y = 150)
            self.ABCDEFGHIKAlphabetEntry.place(x = 30, y = 140)
            #self.ABCDEFGHIKAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz")
            self.ABCDEFGHIKAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz0123456789")
            self.CipherBoxWidgets.append(self.ABCDEFGHIKAlphabetEntry)

            self.ABCDEFGHIKAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Plaintext Alphabet:", bg = ButtonColour)
            #self.ABCDEFGHIKAlphabetLabel.place(x = 10, y = 120)
            self.ABCDEFGHIKAlphabetLabel.place(x = 10, y = 110)
            self.CipherBoxWidgets.append(self.ABCDEFGHIKAlphabetLabel)

            self.BruteABCDEFGHIKButton = tkinter.Button(self.SolveAsFrame, text = "Brute", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.BruteABCDEFGHIKCommand)
            self.BruteABCDEFGHIKButton.place(x = 200, y = 250)
            self.CipherBoxWidgets.append(self.BruteABCDEFGHIKButton)

            self.ABCDEFGHIKKeyLengthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.ABCDEFGHIKKeyLengthEntry.place(x = 160, y = 200)
            self.CipherBoxWidgets.append(self.ABCDEFGHIKKeyLengthEntry)
            
            self.ABCDEFGHIKKeyLengthLabel = tkinter.Label(self.SolveAsFrame, text = "No. Of Columns:", bg = ButtonColour)
            self.ABCDEFGHIKKeyLengthLabel.place(x = 50, y = 200)
            self.CipherBoxWidgets.append(self.ABCDEFGHIKKeyLengthLabel)

            self.ABCDEFGHIKTranspoTypeOptions = ["row", "column"]

            self.ABCDEFGHIKTranspoTypeOption = tkinter.StringVar()
            self.ABCDEFGHIKTranspoTypeOption.set("column")

            self.ABCDEFGHIKTranspoTypeComboBox = ttk.Combobox(self.SolveAsFrame, width = 10, textvariable = self.ABCDEFGHIKTranspoTypeOption, values = self.ABCDEFGHIKTranspoTypeOptions)
            self.ABCDEFGHIKTranspoTypeComboBox.place(x = 150, y = 170)
            self.CipherBoxWidgets.append(self.ABCDEFGHIKTranspoTypeComboBox)

            self.ABCDEFGHIKTranspoTypeLabel = tkinter.Label(self.SolveAsFrame, text = "Transposition Type:", bg = ButtonColour)
            self.ABCDEFGHIKTranspoTypeLabel.place(x = 30, y = 170)
            self.CipherBoxWidgets.append(self.ABCDEFGHIKTranspoTypeLabel)

            self.ABCDEFGHIKNGramLengthEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.ABCDEFGHIKNGramLengthEntry.place(x = 130, y = 230)
            self.ABCDEFGHIKNGramLengthEntry.insert(0, "2")
            self.CipherBoxWidgets.append(self.ABCDEFGHIKNGramLengthEntry)
            
            self.ABCDEFGHIKNGramLengthLabel = tkinter.Label(self.SolveAsFrame, text = "Ngram Length:", bg = ButtonColour)
            self.ABCDEFGHIKNGramLengthLabel.place(x = 20, y = 230)
            self.CipherBoxWidgets.append(self.ABCDEFGHIKNGramLengthLabel)


        elif CipherType == "Polyalphabetic Substitution":

            self.PolyalphabeticAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            #self.PolyalphabeticAlphabetEntry.place(x = 30, y = 140)
            self.PolyalphabeticAlphabetEntry.place(x = 30, y = 120)
            self.PolyalphabeticAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz")
            self.CipherBoxWidgets.append(self.PolyalphabeticAlphabetEntry)

            self.PolyalpabeticAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Plaintext Alphabet:", bg = ButtonColour)
            #self.PolyalpabeticAlphabetLabel.place(x = 10, y = 110)
            self.PolyalpabeticAlphabetLabel.place(x = 10, y = 90)
            self.CipherBoxWidgets.append(self.PolyalpabeticAlphabetLabel)

            self.SolvePolyalphabeticButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolvePolyalphabeticCommand)
            self.SolvePolyalphabeticButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.SolvePolyalphabeticButton)

            self.PolyalphabeticPeriodEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.PolyalphabeticPeriodEntry.place(x = 160, y = 200)
            #self.PolyalphabeticPeriodEntry.place(x = 160, y = 170)
            self.PolyalphabeticPeriodEntry.place(x = 160, y = 150)
            self.CipherBoxWidgets.append(self.PolyalphabeticPeriodEntry)
            
            self.PolyalphabeticPeriodLabel = tkinter.Label(self.SolveAsFrame, text = "Period:", bg = ButtonColour)
            #self.PolyalphabeticPeriodLabel.place(x = 50, y = 200)
            #self.PolyalphabeticPeriodLabel.place(x = 50, y = 170)
            self.PolyalphabeticPeriodLabel.place(x = 50, y = 150)
            self.CipherBoxWidgets.append(self.PolyalphabeticPeriodLabel)

            self.PolyalphabeticStepEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.PolyalphabeticStepEntry.place(x = 160, y = 200)
            self.PolyalphabeticStepEntry.place(x = 160, y = 180)
            self.PolyalphabeticStepEntry.insert(0, "2")
            self.CipherBoxWidgets.append(self.PolyalphabeticStepEntry)
            
            self.PolyalphabeticStepLabel = tkinter.Label(self.SolveAsFrame, text = "Step:", bg = ButtonColour)
            #self.PolyalphabeticStepLabel.place(x = 50, y = 200)
            self.PolyalphabeticStepLabel.place(x = 50, y = 180)
            self.CipherBoxWidgets.append(self.PolyalphabeticStepLabel)

            self.PolyalphabeticAlphabetChangePeriodEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.PolyalphabeticAlphabetChangePeriodEntry.place(x = 160, y = 210)
            self.PolyalphabeticAlphabetChangePeriodEntry.insert(0, "1")
            self.CipherBoxWidgets.append(self.PolyalphabeticAlphabetChangePeriodEntry)
            
            self.PolyalphabeticAlphabetChangePeriodLabel = tkinter.Label(self.SolveAsFrame, text = "Alphabet Change Period:", bg = ButtonColour)
            self.PolyalphabeticAlphabetChangePeriodLabel.place(x = 20, y = 210)
            self.CipherBoxWidgets.append(self.PolyalphabeticAlphabetChangePeriodLabel)



        elif CipherType == "Specific Transposition":

            self.TranspoSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveTranspoCommand)
            self.TranspoSolveButton.place(x = 200, y = 250)
            self.CipherBoxWidgets.append(self.TranspoSolveButton)

            self.TranspoColumnNumEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.TranspoColumnNumEntry.place(x = 160, y = 200)
            self.CipherBoxWidgets.append(self.TranspoColumnNumEntry)
            
            self.TranspoColumnNumLabel = tkinter.Label(self.SolveAsFrame, text = "No. Of Columns:", bg = ButtonColour)
            self.TranspoColumnNumLabel.place(x = 50, y = 200)
            self.CipherBoxWidgets.append(self.TranspoColumnNumLabel)

            self.TranspoTranspoTypeOptions = ["row", "column", "myszkowski", "amsco"]

            self.TranspoTranspoTypeOption = tkinter.StringVar()
            self.TranspoTranspoTypeOption.set("column")

            self.TranspoTranspoTypeComboBox = ttk.Combobox(self.SolveAsFrame, width = 10, textvariable = self.TranspoTranspoTypeOption, values = self.TranspoTranspoTypeOptions)
            self.TranspoTranspoTypeComboBox.place(x = 150, y = 170)
            self.CipherBoxWidgets.append(self.TranspoTranspoTypeComboBox)

            self.TranspoTranspoTypeLabel = tkinter.Label(self.SolveAsFrame, text = "Transposition Type:", bg = ButtonColour)
            self.TranspoTranspoTypeLabel.place(x = 30, y = 170)
            self.CipherBoxWidgets.append(self.TranspoTranspoTypeLabel)


        elif CipherType == "Bazeries":

            self.BazeriesAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            self.BazeriesAlphabetEntry.place(x = 30, y = 120)
            self.BazeriesAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz")
            self.CipherBoxWidgets.append(self.BazeriesAlphabetEntry)

            self.BazeriesAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Alphabet:", bg = ButtonColour)
            self.BazeriesAlphabetLabel.place(x = 10, y = 90)
            self.CipherBoxWidgets.append(self.BazeriesAlphabetLabel)

            self.SolveBazeriesButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveBazeriesCommand)
            self.SolveBazeriesButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.SolveBazeriesButton)


        elif CipherType == "Nicodemus":

            self.NicodemusSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveNicodemusCommand)
            self.NicodemusSolveButton.place(x = 200, y = 250)
            self.CipherBoxWidgets.append(self.NicodemusSolveButton)

            self.NicodemusColumnNumEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.NicodemusColumnNumEntry.place(x = 160, y = 150)
            self.CipherBoxWidgets.append(self.NicodemusColumnNumEntry)
            
            self.NicodemusColumnNumLabel = tkinter.Label(self.SolveAsFrame, text = "No. Of Columns:", bg = ButtonColour)
            self.NicodemusColumnNumLabel.place(x = 50, y = 150)
            self.CipherBoxWidgets.append(self.NicodemusColumnNumLabel)

            self.NicodemusAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            self.NicodemusAlphabetEntry.place(x = 30, y = 120)
            self.NicodemusAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz")
            self.CipherBoxWidgets.append(self.NicodemusAlphabetEntry)

            self.NicodemusAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Alphabet:", bg = ButtonColour)
            self.NicodemusAlphabetLabel.place(x = 10, y = 90)
            self.CipherBoxWidgets.append(self.NicodemusAlphabetLabel)

            self.NicodemusChunkSizeEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.NicodemusChunkSizeEntry.place(x = 160, y = 200)
            self.NicodemusChunkSizeEntry.insert(0, "5")
            self.CipherBoxWidgets.append(self.NicodemusChunkSizeEntry)
            
            self.NicodemusChunkSizeLabel = tkinter.Label(self.SolveAsFrame, text = "Chunk Size:", bg = ButtonColour)
            self.NicodemusChunkSizeLabel.place(x = 50, y = 200)
            self.CipherBoxWidgets.append(self.NicodemusChunkSizeLabel)


        elif CipherType == "Cadenus":

            self.CadenusSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveCadenusCommand)
            self.CadenusSolveButton.place(x = 200, y = 250)
            self.CipherBoxWidgets.append(self.CadenusSolveButton)

            self.CadenusColumnNumEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.CadenusColumnNumEntry.place(x = 160, y = 150)
            self.CipherBoxWidgets.append(self.CadenusColumnNumEntry)
            
            self.CadenusColumnNumLabel = tkinter.Label(self.SolveAsFrame, text = "No. Of Columns:", bg = ButtonColour)
            self.CadenusColumnNumLabel.place(x = 50, y = 150)
            self.CipherBoxWidgets.append(self.CadenusColumnNumLabel)

            self.CadenusVerticalAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            self.CadenusVerticalAlphabetEntry.place(x = 30, y = 120)
            self.CadenusVerticalAlphabetEntry.insert(0, "azyxvutsrqponmlkjihgfedcb")
            self.CipherBoxWidgets.append(self.CadenusVerticalAlphabetEntry)

            self.CadenusVerticalAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Vertical Alphabet:", bg = ButtonColour)
            self.CadenusVerticalAlphabetLabel.place(x = 10, y = 90)
            self.CipherBoxWidgets.append(self.CadenusVerticalAlphabetLabel)


        elif CipherType == "Progressive Key":

            self.ProgKeyAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            self.ProgKeyAlphabetEntry.place(x = 30, y = 120)
            self.ProgKeyAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz")
            self.CipherBoxWidgets.append(self.ProgKeyAlphabetEntry)

            self.ProgKeyAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Plaintext Alphabet:", bg = ButtonColour)
            self.ProgKeyAlphabetLabel.place(x = 10, y = 90)
            self.CipherBoxWidgets.append(self.ProgKeyAlphabetLabel)

            self.SolveProgKeyButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveProgKeyCommand)
            self.SolveProgKeyButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.SolveProgKeyButton)

            self.ProgKeyPeriodEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.ProgKeyPeriodEntry.place(x = 160, y = 150)
            self.CipherBoxWidgets.append(self.ProgKeyPeriodEntry)
            
            self.ProgKeyPeriodLabel = tkinter.Label(self.SolveAsFrame, text = "Period:", bg = ButtonColour)
            self.ProgKeyPeriodLabel.place(x = 50, y = 150)
            self.CipherBoxWidgets.append(self.ProgKeyPeriodLabel)

            self.ProgKeyProgressionIndexEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.ProgKeyProgressionIndexEntry.place(x = 160, y = 180)
            self.ProgKeyProgressionIndexEntry.insert(0, "-1")
            self.CipherBoxWidgets.append(self.ProgKeyProgressionIndexEntry)
            
            self.ProgKeyProgressionIndexLabel = tkinter.Label(self.SolveAsFrame, text = "Progression Index:", bg = ButtonColour)
            self.ProgKeyProgressionIndexLabel.place(x = 20, y = 180)
            self.CipherBoxWidgets.append(self.ProgKeyProgressionIndexLabel)


        elif CipherType == "Ragbaby":

            self.SolveRagbabyButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveRagbabyCommand)
            self.SolveRagbabyButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.SolveRagbabyButton)

            self.RagbabyAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            self.RagbabyAlphabetEntry.place(x = 30, y = 120)
            self.RagbabyAlphabetEntry.insert(0, "abcdefghiklmnopqrstuvwyz")
            self.CipherBoxWidgets.append(self.RagbabyAlphabetEntry)

            self.RagbabyAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Alphabet:", bg = ButtonColour)
            self.RagbabyAlphabetLabel.place(x = 10, y = 90)
            self.CipherBoxWidgets.append(self.RagbabyAlphabetLabel)

            self.RagbabyStartIndexEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.RagbabyStartIndexEntry.place(x = 160, y = 150)
            #self.RagbabyStartIndexEntry.insert(0, "-1")
            self.RagbabyStartIndexEntry.insert(0, "1")
            self.CipherBoxWidgets.append(self.RagbabyStartIndexEntry)
            
            self.RagbabyStartIndexLabel = tkinter.Label(self.SolveAsFrame, text = "Start Index:", bg = ButtonColour)
            self.RagbabyStartIndexLabel.place(x = 50, y = 150)
            self.CipherBoxWidgets.append(self.RagbabyStartIndexLabel)


        elif CipherType == "Interrupted Key":

            self.InterruptKeySolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolveInterruptKeyCommand)
            self.InterruptKeySolveButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.InterruptKeySolveButton)

            self.InterruptKeyAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            self.InterruptKeyAlphabetEntry.place(x = 30, y = 120)
            self.InterruptKeyAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz")
            self.CipherBoxWidgets.append(self.InterruptKeyAlphabetEntry)

            self.InterruptKeyAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Alphabet:", bg = ButtonColour)
            self.InterruptKeyAlphabetLabel.place(x = 10, y = 90)
            self.CipherBoxWidgets.append(self.InterruptKeyAlphabetLabel)


        elif CipherType == "Polybius + Vigenère":

            self.PolybVigenSolveButton = tkinter.Button(self.SolveAsFrame, text = "Solve", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SolvePolybVigenCommand)
            self.PolybVigenSolveButton.place(x = 110, y = 250)
            self.CipherBoxWidgets.append(self.PolybVigenSolveButton)
            
            self.PolybVigenNEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            #self.PolybVigenNEntry.place(x = 120, y = 115)
            self.PolybVigenNEntry.place(x = 130, y = 115)
            self.CipherBoxWidgets.append(self.PolybVigenNEntry)

            self.PolybVigenNLabel = tkinter.Label(self.SolveAsFrame, text = "N-Graph Length:", bg = ButtonColour)
            self.PolybVigenNLabel.place(x = 30, y = 115)
            self.CipherBoxWidgets.append(self.PolybVigenNLabel)

            self.PolybVigenPeriodEntry = tkinter.Entry(self.SolveAsFrame, width = 7)
            self.PolybVigenPeriodEntry.place(x = 120, y = 140)
            self.CipherBoxWidgets.append(self.PolybVigenPeriodEntry)

            self.PolybVigenPeriodLabel = tkinter.Label(self.SolveAsFrame, text = "Period:", bg = ButtonColour)
            self.PolybVigenPeriodLabel.place(x = 50, y = 140)
            self.CipherBoxWidgets.append(self.PolybVigenPeriodLabel)

            self.PolybVigenAlphabetEntry = tkinter.Entry(self.SolveAsFrame, width = 40)
            self.PolybVigenAlphabetEntry.place(x = 30, y = 200)
            self.PolybVigenAlphabetEntry.insert(0, "abcdefghijklmnopqrstuvwxyz")
            self.CipherBoxWidgets.append(self.PolybVigenAlphabetEntry)

            self.PolybVigenAlphabetLabel = tkinter.Label(self.SolveAsFrame, text = "Alphabet:", bg = ButtonColour)
            self.PolybVigenAlphabetLabel.place(x = 10, y = 170)
            self.CipherBoxWidgets.append(self.PolybVigenAlphabetLabel)
            



            ###########################
        ### Cipher Type Tab Edit Marker ###
            ###########################



    def ClearCipherBox(self):

        for widget in self.CipherBoxWidgets:

            widget.destroy()



    def TransposeText(self):

        print ("Let's TRANSPOSE!")

        #RowOrColumn = ["Row", "Column"][self.RowsOrColumns.get()]
        #RowOrColumn = ["Row", "Column"][self.RowsOrColumns.get()-1]
        RowOrColumn = ["Row", "Column", "Switch Columns"][self.RowsOrColumns.get()-1]

        if RowOrColumn in {"Row", "Column"}:

            Length = int(self.RowColumnLengthEntryButton.get())

        else:

            Length = self.RowColumnLengthEntryButton.get()

        Msg = self.InputBox.get("1.0", tkinter.END)

        Msg = Transpose(Msg, RowOrColumn, Length)

        self.OutputBox.delete("1.0", tkinter.END)

        self.OutputBox.insert("1.0", Msg)

        pass

        return


    def ChangePage(self, Amount):

        self.UpdateKey()

        self.SaveCurrentKey()

        self.PageNum += Amount

        if self.PageNum < 0:

            self.PageNum = 0

        elif self.PageNum >= len(self.Keys):

            self.AddKey()

        #self.UpdateKeyNum()

        self.UpdateCurrentKey()

        self.UpdateKeyDisplay()

        self.UpdatePageNum()


    def AddKey(self):

        self.Keys.append({})

        for x in alphabetlist:

            #self.Keys[-1][x] = ""
            self.Keys[-1][x] = x


    def UpdateCurrentKey(self):

        self.Key = self.Keys[self.PageNum]


    def SaveCurrentKey(self):

        self.Keys[self.PageNum] = self.Key


    def UpdatePageNum(self):

        self.PageNumLabel.delete(0, tkinter.END)

        self.PageNumLabel.insert(0, str(self.PageNum+1))


    def AnalyseColumns(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        Report = AnalyseColumns(Msg)

        self.AnalyseTextBox.delete("1.0", tkinter.END)
        self.AnalyseTextBox.insert("1.0", Report)


    def SolveSubstitutionCipher(self):

        self.UpdateKey()

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        self.CipherTypeOutput.delete("1.0", tkinter.END)

        #self.CipherTypeOutput.insert("1.0", "Analysing...")
        self.CipherTypeOutput.insert("1.0", "Solving...")

        #time.sleep(0.1)
        #time.sleep(1)

        self.GetDictionary()

        SolveMethod = self.SolveMonoSubMethod.get()

        if SolveMethod == 1:

            SolveMethod = "Words"

        elif SolveMethod == 2:

            SolveMethod = "Quadgrams"

        elif SolveMethod == 3:

            SolveMethod = "Fast Bigrams"

        #Result = SolveSubstitutionCipher(Msg, self.Key, self.Dictionary())
        #Result = SolveSubstitutionCipher(Msg, self.Key, self.Dictionary)
        #SolveAttempt = AttemptToSolve2(Msg, self.Key, self.Dictionary)
        SolveAttempt = AttemptToSolve2(Msg, self.Key, self.Dictionary, SolveMethod)

        #if Result != False:
        if SolveAttempt != False:

            #self.Key = Result
            self.Key = SolveAttempt

            self.UpdateKeyDisplay()

        #self.CipherTypeOutput.insert("1.0", "Done!")
        self.PlaceText("Done!", self.CipherTypeOutput)



    def Reverse(self):

        #Msg = self.InputBox.get("1.0", tkinter.END)
        Msg = self.InputBox.get("1.0", tkinter.END).strip(" ").strip("\n")

        ReversedMsg = Reverse(Msg)

        #self.AnalyseTextBox.delete("1.0", tkinter.END)
        #self.AnalyseTextBox.insert("1.0", ReversedMsg)
        #self.InputBox.delete("1.0", tkinter.END)
        #self.InputBox.insert("1.0", ReversedMsg)
        self.OutputBox.delete("1.0", tkinter.END)
        self.OutputBox.insert("1.0", ReversedMsg)



    def HideKey(self):

        for entrybox in self.KeyEntries:

            #if isinstance(self.Key, dict):
            if isinstance(entrybox, list) or isinstance(entrybox, tuple):

                for entity in entrybox:

                    entity.destroy()

            else:

                entrybox.destroy()

            """#self.KeyEntries[entrybox][0].destroy()
            entrybox[0].destroy()

            #self.KeyEntries[entrybox][0].destroy()
            #entrybox[0].destroy()
            entrybox[1].destroy()"""

                #entity.destroy()

        del self.KeyEntries

        self.PageNumLabel.destroy()

        self.PageRight.destroy()

        self.PageLeft.destroy()

        self.PageRemove.destroy()

        if self.KeyBox != None:

            self.KeyBox.destroy()

            self.KeyBox = None



    def ShowKey(self):

        self.KeyEntries = []

        MaxPerRow = 5

        Width = 100

        Height = 50

        EntryWidth = 10

        for letter in range(0, len(alphabetlist)):
            
            self.KeyEntries.append((tkinter.Entry(self.EditKeyFrame, width = EntryWidth),
                                    tkinter.Label(self.EditKeyFrame, bg = BGColour, text = alphabetlist[letter] + ":")))
            
            self.KeyEntries[-1][0].insert(0, self.Key[alphabetlist[letter]])

            x = letter%MaxPerRow*Width+5

            y = letter//MaxPerRow*Height+10

            self.KeyEntries[-1][1].place(x = x, y = y)
            self.KeyEntries[-1][0].place(x = x+20, y = y)


        self.PageNumLabel = tkinter.Entry(self.EditKeyFrame, bg = ButtonColour, width = 2, font = tkinter.font.Font(size = 15, weight = "normal"))
        #self.PageNumLabel.insert(0, "1")
        #self.PageNumLabel.insert(0, str(self.PageNum))
        self.PageNumLabel.insert(0, str(self.PageNum+1))
        self.PageNumLabel.place(x = 400, y= 250)

        self.PageLeft = tkinter.Button(self.EditKeyFrame, text = "<", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.ChangePage(-1))
        self.PageLeft.place(x = 435, y = 250)

        self.PageRight = tkinter.Button(self.EditKeyFrame, text = ">", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.ChangePage(1))
        self.PageRight.place(x = 470, y = 250)

        self.PageRemove = tkinter.Button(self.EditKeyFrame, text = "x", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.RemovePage())
        self.PageRemove.place(x = 365, y = 250)


    def ShowFrequencies(self):

        if self.ShowFrequenciesChart == False:
            
            self.UpdateKey()

            self.HideKey()

            self.ShowFreqChart()

            self.ShowFrequenciesChart = True

        elif self.ShowFrequenciesChart == True:

            self.HideFreqChart()

            self.ShowKey()

            self.UpdateKeyDisplay()

            self.ShowFrequenciesChart = False


    def ShowFreqChart(self):

        #BarChart = pyplot.figure()

        #self.Figure = pyplot.figure()
        #self.Figure = pyplot.figure(size = (10, 10))
        #self.Figure = pyplot.figure(figsize = (10, 10))
        #self.Figure = pyplot.figure(figsize = (1, 1))
        #self.Figure = pyplot.figure(figsize = (3, 2))
        #self.Figure = pyplot.figure(figsize = (5, 5))
        #self.Figure = pyplot.figure(figsize = (5, 4))
        self.Figure = pyplot.figure(figsize = (5, 3))

        CipherType = self.SolveAsMenu.get()

        if CipherType == "Vigenère":

            pass

            #KeyWordLength = int(self.KeyWordLengthEntry.get())
            #KeyWordLetter = int(self.KeyWordLetterEntry.get())
            KeyWordLength = int(self.KeyWordLengthEntryButton.get())
            KeyWordLetter = int(self.KeyWordLetterEntryButton.get())

        else:

            KeyWordLength = 1

            #KeyWordLetter = 0
            KeyWordLetter = 1

        #self.Figure.width =

        xplot = alphabetlist

        yplot = []

        y2plot = []

        BarWidth = 0.4

        #Msg = self.InputBox.get("1.0", tkinter.END)
        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        if len(RemoveSpaces(RemovePunctuation(Msg))) > 0:

            #LetterFreqs = LetterFrequencies(Msg)

            LetterFreqs = LetterFrequencies(Msg, KeyWordLength, KeyWordLetter)

            Length = len(RemoveSpaces(RemovePunctuation(Msg)))

            #yplot = []

            for letter in xplot:

                for searchletter in LetterFreqs:

                    if searchletter[0] == letter:

                        #yplot.append(searchletter[1])
                        #yplot.append(searchletter[1]/Length*100)
                        #yplot.append(searchletter[2])
                        yplot.append(searchletter[2]*100)

            #self.BarChart = pyplot.bar(xplot, yplot)

            #self.Figure.show()

        else:

            #yplot = []

            for letter in xplot:

                yplot.append(0)

        for letter in alphabetlist:

            y2plot.append(averageletterfrequencies[letter])


        #self.Figure, self.Axis = pyplot.subplot(1, 1, 1, figure = self.Figure)
        #self.Axis = self.Figure.subplot(1, 1, 1)
        self.Axis = pyplot.subplot(1, 1, 1)

        #self.BarChart = pyplot.bar(xplot, yplot)
        #self.Figure.bar(xplot-BarWidth//2, yplot, width = BarWidth, color = "b")
        #self.Figure.bar(xplot+BarWidth//2, yplot, color = "r")
        #self.Axis.bar(xplot-BarWidth//2, yplot, width = BarWidth, color = "b")
        #self.Axis.bar(xplot+BarWidth//2, yplot, color = "r")
        #self.Axis.bar(xplot, yplot, width = BarWidth, color = "b", align = "edge")
        self.Axis.bar(xplot, yplot, width = -BarWidth, color = "b", align = "edge")
        #self.Axis.bar(xplot, yplot, width = -BarWidth, color = "r", align = "edge")
        #self.Axis.bar(xplot, y2plot, width = -BarWidth, color = "r", align = "edge")
        self.Axis.bar(xplot, y2plot, width = BarWidth, color = "r", align = "edge")

        #self.EmbeddedFigure = FigureCanvasTkAgg(self.Figure, master = self.KeyFrame)
        self.EmbeddedFigure = FigureCanvasTkAgg(self.Figure, master = self.EditKeyFrame)
        #self.EmbeddedFigure.show()
        #self.Figure.show()
        #self.EmbeddedFigure.place(x = 5, y = 5)
        #self.EmbeddedFigure.get_tk_widget().place(x = 5, y = 5)
        #self.EmbeddedFigure.get_tk_widget().place(x = 0, y = 0)
        #self.EmbeddedFigure.get_tk_widget().place(x = 0, y = -5)
        self.EmbeddedFigure.get_tk_widget().place(x = 0, y = -15)
        #self.EmbeddedFigure.show()
        #self.Figure.show()

        pyplot.ylabel("Frequency (%)")
        #pyplot.xlabel("Letter")


    def HideFreqChart(self):

        #self.EmbeddedFigure.destroy()
        self.EmbeddedFigure.get_tk_widget().destroy()


    def ShowFreqChartWindow(self, event):

        self.WindowFigure = pyplot.figure()

        self.WindowFigure.suptitle("Letter Frequencies And Expected Letter Frequencies")

        #self.WindowFigure.xlabel("Frequency (%)")

        #self.WindowFigure.ylabel("Letter")

        xplot = alphabetlist

        yplot = []

        y2plot = []

        BarWidth = 0.4

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        if len(RemoveSpaces(RemovePunctuation(Msg))) > 0:

            LetterFreqs = LetterFrequencies(Msg)

            Length = len(RemoveSpaces(RemovePunctuation(Msg)))

            for letter in xplot:

                for searchletter in LetterFreqs:

                    if searchletter[0] == letter:

                        yplot.append(searchletter[1]/Length*100)

        else:

            for letter in xplot:

                yplot.append(0)

        for letter in alphabetlist:

            y2plot.append(averageletterfrequencies[letter])

        self.Axis = pyplot.subplot(1, 1, 1)

        self.Axis.bar(xplot, yplot, width = -BarWidth, color = "b", align = "edge", label = "Current")
        self.Axis.bar(xplot, y2plot, width = BarWidth, color = "r", align = "edge", label = "Expected")

        #self.Axis.xlabel("Frequency (%)")

        #self.Axis.ylabel("Letter")

        #pyplot.xlabel("Frequency (%)")
        #pyplot.ylabel("Letter")

        pyplot.ylabel("Frequency (%)")
        pyplot.xlabel("Letter")

        self.Axis.legend()

        self.WindowFigure.show()


    def SetBindings(self):

        #self.bind("<f>", lambda event: self.ShowFreqChartWindow(event))
        self.bind("<Control-f>", lambda event: self.ShowFreqChartWindow(event))

        self.bind("<Control-Up>", lambda event: self.MoveTextUp(event = event))
        self.bind("<Control-Down>", lambda event: self.MoveTextDown(event = event))



    def PotentialWordsDisplay(self):

        #self.PotentialWordsWindow = tkinter.Tk()
        #self.PotentialWordsWindow = tkinter.TopLevel()
        self.PotentialWordsWindow = tkinter.Toplevel()

        self.PotentialWordsWindow.title("Potential Words")
        self.PotentialWordsWindow.iconbitmap("Images/Code Creaker Icon.ico")
        self.PotentialWordsWindow.geometry("400x700")
        self.PotentialWordsWindow.geometry("400x600")
        self.PotentialWordsWindow.configure(bg = BGColour)

        self.PotentialWordsWindow.resizable(False, False)

        #self.WordInputEntry = tkinter.Entry(self.EditKeyWindow, width = 20, command = self.EditKeyOK, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.WordInputEntry = tkinter.Entry(self.EditKeyWindow, width = 20, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.WordInputEntry = tkinter.Entry(self.PotentialWordsWindow, width = 20)
        self.WordInputEntry = tkinter.Entry(self.PotentialWordsWindow, width = 30)
        #self.WordInputEntry.place(x = 150, y = 20)
        #self.WordInputEntry.place(x = 120, y = 20)
        self.WordInputEntry.place(x = 110, y = 20)

        self.WordInputButton = tkinter.Button(self.PotentialWordsWindow, text = "Find", command = self.FindPotentialWordsFromInput, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.WordInputButton.place(x = 190, y = 60)
        #self.WordInputButton.place(x = 180, y = 60)
        #self.WordInputButton.place(x = 130, y = 60)
        self.WordInputButton.place(x = 180, y = 60)

        #self.WordInputButton = tkinter.Text(self.PotentialWordsWindow, height = 50, width = 40)
        #self.PotentialWordOutputBox = tkinter.Text(self.PotentialWordsWindow, height = 20, width = 40)
        self.PotentialWordOutputBox = tkinter.scrolledtext.ScrolledText(self.PotentialWordsWindow, height = 20, width = 40)
        #self.WordInputButton.place(x = 70, y = 120)
        """self.PotentialWordOutputBox.place(x = 40, y = 120)"""
        #self.PotentialWordOutputBox.place(x = 40, y = 130)
        self.PotentialWordOutputBox.place(x = 40, y = 150)


        self.LargeOrFull = tkinter.IntVar()

        #self.RowRadioButton = tkinter.Radiobutton(self.SolveAsFrame, text = "Large Dictionary", bg = ButtonColour, variable = self.LargeOrFull, value = 1)
        #self.RowRadioButton.place(x = 40, y = 550)
        self.LargeDictionaryRadioButton = tkinter.Radiobutton(self.PotentialWordsWindow, text = "Large Dictionary", bg = ButtonColour, variable = self.LargeOrFull, value = 1)
        #self.LargeDictionaryRadioButton = tkinter.Radiobutton(self.PotentialWordsWindow, text = "Large Dictionary", bg = ButtonColour, variable = self.LargeOrFull, value = 0)
        self.LargeDictionaryRadioButton.place(x = 40, y = 550)

        #self.ColumnRadioButton = tkinter.Radiobutton(self.SolveAsFrame, text = "Full Dictionary", bg = ButtonColour, variable = self.LargeOrFull, value = 2)
        #self.ColumnRadioButton.place(x = 240, y = 550)
        self.FullDictionaryRadioButton = tkinter.Radiobutton(self.PotentialWordsWindow, text = "Full Dictionary", bg = ButtonColour, variable = self.LargeOrFull, value = 2)
        #self.FullDictionaryRadioButton = tkinter.Radiobutton(self.PotentialWordsWindow, text = "Full Dictionary", bg = ButtonColour, variable = self.LargeOrFull, value = 1)
        self.FullDictionaryRadioButton.place(x = 240, y = 550)
        
        self.FullDictionaryRadioButton = tkinter.Radiobutton(self.PotentialWordsWindow, text = "SOWPODS Dictionary", bg = ButtonColour, variable = self.LargeOrFull, value = 3)
        #self.FullDictionaryRadioButton.place(x = 120, y = 550)
        self.FullDictionaryRadioButton.place(x = 120, y = 500)

        self.LargeOrFull.set(1)

        #return

        self.WordAnagramButton = tkinter.Button(self.PotentialWordsWindow, text = "Anagram", command = self.FindPotentialAnagramsFromInput, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.WordAnagramButton.place(x = 177, y = 80)
        #self.WordAnagramButton.place(x = 170, y = 100)
        #self.WordAnagramButton.place(x = 165, y = 100)
        #self.WordAnagramButton.place(x = 162, y = 100)
        #self.WordAnagramButton.place(x = 100, y = 100)
        self.WordAnagramButton.place(x = 140, y = 100)

        self.WordAnagramButton = tkinter.Button(self.PotentialWordsWindow, text = "Words That Contain", command = self.FindPotentialContainAnagramsFromInput, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.WordAnagramButton.place(x = 170, y = 100)
        #self.WordAnagramButton.place(x = 200, y = 100)
        self.WordAnagramButton.place(x = 240, y = 100)

        #self.WordAnagramButton = tkinter.Button(self.PotentialWordsWindow, text = "Find Names", command = self.FindPotentialNamesCommand, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.WordAnagramButton = tkinter.Button(self.PotentialWordsWindow, text = "Find Keywords", command = self.FindPotentialNamesCommand, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.WordAnagramButton.place(x = 220, y = 60)
        self.WordAnagramButton.place(x = 250, y = 60)

        self.LetterOrderButton = tkinter.Button(self.PotentialWordsWindow, text = "Match Letter Order", command = self.FindLetterOrderCommand, font = tkinter.font.Font(size = 12, weight = "bold"))
        self.LetterOrderButton.place(x = 10, y = 60)

        self.EnglishWordsButton = tkinter.Button(self.PotentialWordsWindow, text = "Find English Words", command = self.FindEnglishWordsCommand, font = tkinter.font.Font(size = 12, weight = "bold"))
        #self.EnglishWordsButton.place(x = 10, y = 140)
        self.EnglishWordsButton.place(x = 10, y = 100)



    def FindPotentialWordsFromInput(self):

        #WordInput = self.WordInputEntry.get("1.0", tkinter.END)
        WordInput = self.WordInputEntry.get()

        DictionaryType = self.LargeOrFull.get()

        #print (DictionaryType)

        if DictionaryType == 1:

            DictionaryType = "Large"

        elif DictionaryType == 2:

            DictionaryType = "Full"

        elif DictionaryType == 3:

            DictionaryType = "SOWPODS"

        Dictionary = open(DictionaryType + " Dictionary.txt", "r").readlines()

        for word in range(0, len(Dictionary)):

            Dictionary[word] = RemovePunctuation(Dictionary[word]).lower()

        Dictionary = set(Dictionary)

        #PotentialWords = FindPotentialWords(WordInput)
        #PotentialWords = FindPotentialWords(WordInput, DictionaryType)
        PotentialWords = FindPotentialWords(WordInput, Dictionary)

        #print (PotentialWords)

        Output = ""

        if len ( PotentialWords ) > 0 :

            for word in PotentialWords:

                Output = Output + word + "\n"

        self.PotentialWordOutputBox.delete("1.0", tkinter.END)
        self.PotentialWordOutputBox.insert("1.0", Output)



    def AnalyseCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        Report = CipherSpecificAnalyse(Msg)

        self.AnalyseTextBox.delete("1.0", tkinter.END)
        self.AnalyseTextBox.insert("1.0", Report)


    #def ReplacePolybiusCipher():
    def ReplacePolybiusCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        NGramLength = int(self.PolybiusNGramLengthEntry.get())

        #NewMsg = MakePolybiusSubstitution(Msg)
        NewMsg = MakePolybiusSubstitution(Msg, NGramLength)

        #self.InputBox.delete("1.0", tkinter.END)
        #self.InputBox.insert("1.0", NewMsg)

        self.OutputBox.delete("1.0", tkinter.END)
        self.OutputBox.insert("1.0", NewMsg)


    def SolvePlayfairCipher(self):

        self.UpdateKey()

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

##        #Temperature = int(self.TemperatureEntryButton.get())
##        Temperature = float(self.TemperatureEntryButton.get())
##
##        #Step = int(self.StepEntryButton.get())
##        Step = float(self.StepEntryButton.get())
##
##        Count = int(self.CountEntryButton.get())
##
##        #self.CipherTypeOutput.insert("1.0", "Solving...")
##
##        Thread = threading.Thread(target=SolvePlayfair, args=(Msg, Key, False, Temperature, Step, Count))
##        #Thread = threading.Thread(target=SolvePlayfair, args=(Msg, Key, True, Temperature, Step, Count))
##        Thread.start()

        #Result = SolvePlayfair(Msg, Key)
        #Result = SolvePlayfair(Msg, Key, False)
        #Result = SolvePlayfair(Msg, Key, False, Temperature, Step)
        """Result = SolvePlayfair(Msg, Key, False, Temperature, Step, Count)

        if Result != False:

            #self.Key = Result

            self.UpdateKeyDisplay()"""

        #self.CipherTypeOutput.insert("1.0", "Done!")
        """"""
        """#WritePlayfairCrackFile(Msg, Key, DecodeAsDoubleLetter, Temperature, Step, Count)
        #WritePlayfairCrackFile(Msg, Key, False, Temperature, Step, Count)"""
        
        """self.PlaceText("Done!", self.CipherTypeOutput)"""

        alphabet = self.PlayfairAlphabetEntry.get()
        height = int(self.PlayfairHeightEntry.get())
        width = int(self.PlayfairWidthEntry.get())

        SolvePlayfairCSharp(Msg, alphabet, height, width)



    def PlaceText(self, Text, TextBox):

        TextBox.delete("1.0", tkinter.END)
        #TextBox.insert("1.0", Text)
        TextBox.insert("1.0", Text.rstrip("\n"))



    def ClearKeyEntries(self):

        self.KeyEntries = []



    def ShowPlayfairKey(self):
    #def ShowDigraphSubKey(self):

        self.KeyEntries = []

        Width = 100

        Height = 50

        EntryWidth = 10

        for X in range(0, self.Key.GetWidth()):

            for Y in range(0, self.Key.GetHeight()):
            
                self.KeyEntries.append(tkinter.Entry(self.EditKeyFrame, width = EntryWidth))
                
                self.KeyEntries[-1].insert(0, self.Key.GetKeyItem(X, Y))

                x = X*Width+5

                y = Y*Height+10

                self.KeyEntries[-1].place(x = x, y = y)


        self.UpdatePageDisplay()


    def UpdatePageDisplay(self):

        self.PageNumLabel = tkinter.Entry(self.EditKeyFrame, bg = ButtonColour, width = 2, font = tkinter.font.Font(size = 15, weight = "normal"))
        self.PageNumLabel.insert(0, str(self.PageNum+1))
        self.PageNumLabel.place(x = 400, y= 250)

        self.PageLeft = tkinter.Button(self.EditKeyFrame, text = "<", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.ChangePage(-1))
        self.PageLeft.place(x = 435, y = 250)

        self.PageRight = tkinter.Button(self.EditKeyFrame, text = ">", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.ChangePage(1))
        self.PageRight.place(x = 470, y = 250)

        self.UpdatePageNum()

        self.PageRemove = tkinter.Button(self.EditKeyFrame, text = "x", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = lambda: self.RemovePage())
        self.PageRemove.place(x = 365, y = 250)


    def ClearKeyDisplay(self):

        #self.ClearKeyEntries()

        self.HideKey()

        self.ClearKeyEntries()

        self.UpdatePageDisplay()


    def CreatePlayfairKey(self):

        self.Key = PlayfairKey(5, 5, "j")

        self.Key.DisplayKey()

        self.UpdateKeyDisplay()


    def SplitIntoWords(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        #SplitMsg = SplitIntoWords(Msg)
        #SplitMsg = SplitIntoWords(Msg, "Full")
        #SplitMsg = SplitIntoWords(Msg, "Large")
        #SplitMsg = SplitIntoWords(Msg, "Medium")
        #SplitMsg = SplitIntoWords(Msg, "SOWPODS")
        #SplitMsg = SplitIntoWords(Msg, "Cipher Challenge")
        #SplitMsg = SplitIntoWords(Msg, "Cipher Challenge 2019 0-5B")
        #SplitMsg = SplitIntoWords(Msg, "Small")
        #SplitMsg = SplitIntoWords(Msg, "Cipher Challenge 2019 0-8B Dict")
        SplitMsg = SplitIntoWords(Msg, "Cipher Challenge 2019 0-8B")

        #self.PlaceText(Msg, self.OutputBox)
        self.PlaceText(SplitMsg, self.OutputBox)


    def Solve2x2HillCipher(self):

        self.UpdateKey()

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        #self.CipherTypeOutput.insert("1.0", "Solving...")

        Thread = threading.Thread(target = Solve2x2Hill, args = (Msg, Key))
        Thread.start()

        """Result = Solve2x2Hill(Msg, Key)

        if Result != False:

            #self.Key = Result

            self.UpdateKeyDisplay()
        
        #self.PlaceText("Done!", self.CipherTypeOutput)"""


    def SolveMod26Simultaneous(self):

        """x1 = int(self.SolveModX1Label.get())
        y1 = int(self.SolveModY1Label.get())
        c1 = int(self.SolveModC1Label.get())

        x2 = int(self.SolveModX2Label.get())
        y2 = int(self.SolveModY2Label.get())
        c2 = int(self.SolveModC2Label.get())"""

        x1 = int(self.SolveModX1Entry.get())
        y1 = int(self.SolveModY1Entry.get())
        c1 = int(self.SolveModC1Entry.get())

        x2 = int(self.SolveModX2Entry.get())
        y2 = int(self.SolveModY2Entry.get())
        c2 = int(self.SolveModC2Entry.get())

        Result = ModularSimultaneous(x1, y1, c1, x2, y2, c2)

        if Result == False:
        
            #self.PlaceText("Can't solve that!", self.CipherTypeOutput)
            self.PlaceText("Can't solve that! Try another linear equation...", self.CipherTypeOutput)

        else:

            OutputMsg = ""

            OutputMsg = "x = " + str(Result[0]) + "\ny = " + str(Result[1])

            #self.PlaceText(Result, self.CipherTypeOutput)
            self.PlaceText(OutputMsg, self.CipherTypeOutput)

        #self.PlaceText("Done!", self.CipherTypeOutput)


    def AddAffineKey(self):

        a = int(self.AffineAEntry.get())
        b = int(self.AffineBEntry.get())

        self.Key = AddAffineKey(self.Key, a, b)

        self.UpdateKeyDisplay()


    def SolveMod26Linear(self):

        """x = int(self.SolveModX1Entry.get())
        b = int(self.SolveModY1Entry.get())
        c = int(self.SolveModC1Entry.get())"""
        x = int(self.SolveModXEntry.get())
        b = int(self.SolveModBEntry.get())
        c = int(self.SolveModCEntry.get())

        Result = ModularLinear(x, b, c)

        if Result == False:
            
            self.PlaceText("Can't solve that! Try another linear equation...", self.CipherTypeOutput)

        else:

            #OutputMsg = "x = " + str(Result))
            OutputMsg = "x = " + str(Result)

            self.PlaceText(OutputMsg, self.CipherTypeOutput)


    def ReplaceNihilistCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        NewMsg = MakeNihilistSubstitution(Msg)

        self.PlaceText(NewMsg, self.OutputBox)


    def CreateVignereFreqKey(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        KeyWordLength = int(self.KeyWordLengthEntryButton.get())

        KeyWordLetter = int(self.KeyWordLetterEntryButton.get())

        self.Key = CreateVigenereFreqKey(Msg, KeyWordLength, KeyWordLetter)

        self.UpdateKeyDisplay()


    def SolveVigenereCipher(self):

        self.UpdateKey()

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        #self.CipherTypeOutput.insert("1.0", "Solving...")

        KeyWorldLength = int(self.KeyWordLengthEntryButton.get())

        Thread = threading.Thread(target = SolveVigenere, args = (Msg, Key, KeyWorldLength))
        Thread.start()

        """Result = SolveVigenere(Msg, Key, KeyWorldLength)

        if Result != False:

            #self.Key = Result

            self.UpdateKeyDisplay()
        
        self.PlaceText("Done!", self.CipherTypeOutput)"""


    def ReplaceBifidCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        PeriodLength = int(self.BifidPeriodLengthEntry.get())

        #NewMsg = MakeBifidSubstitution(Msg)
        NewMsg = MakeBifidSubstitution(Msg, PeriodLength)

        self.OutputBox.delete("1.0", tkinter.END)
        self.OutputBox.insert("1.0", NewMsg)


    def ReplaceLetterNum(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        NewMsg = LettersToNum(Msg)

        self.OutputBox.delete("1.0", tkinter.END)
        self.OutputBox.insert("1.0", NewMsg)


    def ReplaceNumLetter(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        NewMsg = NumsToLetter(Msg)

        self.OutputBox.delete("1.0", tkinter.END)
        self.OutputBox.insert("1.0", NewMsg)


    #def ReplaceNumLetter(self):
    def CipherTranspositionDistance(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        #NewMsg = TranspositionDistance(Msg)
        #NewMsg = TranspositionDistance(Msg, 1)

        #NewMsg = str(NewMsg)
        #NewMsg = str(NewMsg) + ", " + str(TranspositionDistance(Msg, 3))

        NewMsg = ""

        #for x in range(0, 10):
        #for x in range(1, 10):
        for x in range(1, 11):

            #NewMsg = str(NewMsg) + ", " + str(TranspositionDistance(Msg, x))
            NewMsg = str(NewMsg) + str(TranspositionDistance(Msg, x))

            NewMsg = NewMsg + ", "

        NewMsg = NewMsg[:-2]

        self.CipherTypeOutput.delete("1.0", tkinter.END)
        self.CipherTypeOutput.insert("1.0", NewMsg)


    #def SolveTransposeButton(self):
    #def SolveTransposeCipher(self):
    def CrackTransposeCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        Length = int(self.RowColumnLengthEntryButton.get())

        RowOrColumn = ["Row", "Column", "Switch Columns"][self.RowsOrColumns.get()-1]

        #NewMsg = SolveTransposition(Msg, RowOrColumn, Length)
        NewMsg = CrackTransposition(Msg, RowOrColumn, Length)

        self.CipherTypeOutput.delete("1.0", tkinter.END)
        self.CipherTypeOutput.insert("1.0", NewMsg)


    def SolveTransposeCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        #Thread = threading.Thread(target = SolveTransposition, args = (Msg))
        Thread = threading.Thread(target = SolveTransposition, args = (Msg,))
        Thread.start()

        """NewMsg = SolveTransposition(Msg)

        self.CipherTypeOutput.delete("1.0", tkinter.END)
        self.CipherTypeOutput.insert("1.0", NewMsg)"""


    def SolveTransposeCSharpCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        Thread = threading.Thread(target = SolveTranspositionCSharp, args = (Msg,))
        Thread.start()



    def SolveAutokeyCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        RangeStart = int(self.AutokeyRangeStartEntry.get())
        RangeEnd = int(self.AutokeyRangeEndEntry.get())

        #NewMsg = SolveAutoKey(Msg)
        #NewMsg = SolveAutokey(Msg)
        NewMsg = SolveAutokey(Msg, RangeStart, RangeEnd)

        self.CipherTypeOutput.delete("1.0", tkinter.END)
        #self.CipherTypeOutput.insert("1.0", NewMsg)
        self.CipherTypeOutput.insert("1.0", "Key: " + NewMsg)


    def ReplaceBeaufortCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        NewMsg = ReplaceBeaufort(Msg)

        self.OutputBox.delete("1.0", tkinter.END)
        self.OutputBox.insert("1.0", NewMsg)


    def MoveTextUp(self, event = None):

        self.PreviousInputBoxMsg = self.InputBox.get("1.0", tkinter.END)

        self.PlaceText(self.OutputBox.get("1.0", tkinter.END), self.InputBox)

    def MoveTextDown(self, event = None):

        self.PlaceText(self.InputBox.get("1.0", tkinter.END), self.OutputBox)

        self.PlaceText(self.PreviousInputBoxMsg, self.InputBox)


    def Solve4SquareCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        UseNormalAlphabet = bool(self.UseNormalAlphabetButton.get())

        #NewMsg = Solve4Square(Msg)
        #NewMsg = Solve4Square(Msg, UseNormalAlphabet)

        Thread = threading.Thread(target = Solve4Square, args = (Msg, UseNormalAlphabet))
        Thread.start()

        #self.CipherTypeOutput.delete("1.0", tkinter.END)
        #self.CipherTypeOutput.insert("1.0", NewMsg)


    def SolveDigraphSubCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        NewMsg = SolveDigraphSubstitution(Msg)
#
#
        self.CipherTypeOutput.delete("1.0", tkinter.END)
        self.CipherTypeOutput.insert("1.0", NewMsg)


    def CreateDigraphKey(self):

        self.Key = DigraphSubKey()

        self.UpdateKeyDisplay()


    #def ShowPlayfairKey(self):
    def ShowDigraphSubKey(self):

        self.KeyEntries = []

        #BoxHeight = 50
        #BoxHeight = 30
        #BoxHeight = 14
        BoxHeight = 17

        BoxWidth = 10

        Colour = "#BBBB11"

        #self.InputBox = tkinter.Text(self.EditKeyFrame, width = BoxWidth, height = BoxHeight, bg = ButtonColour)
        #self.InputBox.place(x = 10, y = 10)
        #self.KeyBox = tkinter.Text(self.EditKeyFrame, width = BoxWidth, height = BoxHeight, bg = Colour)
        self.KeyBox = tkinter.scrolledtext.ScrolledText(self.EditKeyFrame, width = BoxWidth, height = BoxHeight, bg = Colour)
        self.KeyBox.place(x = 10, y = 10)

        self.KeyBox.insert("1.0", self.Key.GetKeyText())

        self.UpdatePageDisplay()


        
    def RemovePage(self):

        #if len(Keys) > 1:
        if len(self.Keys) > 1:

            del self.Keys[self.PageNum]

            if self.PageNum == len(self.Keys):

                #self.ChangePage(-1)

                self.PageNum -= 1

                self.UpdatePageNum()

            self.UpdateCurrentKey()

            self.UpdateKeyDisplay()


    #def RearrangeTranspoVigenCipher(self):
    def RearrangeVigenTranspoCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        #print (Msg)

        #KeyLength = int(KeyLengthEntryButton.get())
        #KeyLength = int(self.KeyLengthEntryButton.get())
        KeyLength = int(self.VigenTranspoColumnNumEntry.get())

        #TranspoType = TranspoVigenTypeBox.get()
        #TranspoType = self.TranspoVigenTypeBox.get()

        #PossibleKeys = RearrangeTranspoVigen(Msg)
        PossibleKeys = RearrangeTranspoVigen(Msg, KeyLength)
        #PossibleKeys = RearrangeTranspoVigen(Msg, KeyLength, TranspoType)

        #self.OutputBox.delete("1.0", tkinter.END)
        #self.OutputBox.insert("1.0", PossibleKeys)
        self.CipherTypeOutput.delete("1.0", tkinter.END)
        self.CipherTypeOutput.insert("1.0", PossibleKeys)


    def DecodeTrithemiusCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        Mode = ["Normal", "Reversed"][self.ThrithemiusMode.get()]

        DMsg = DecodeTrithemius(Msg, Mode)

        self.PlaceText(DMsg, self.OutputBox)


    def IOCCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        #KeyLength = int(self.IOCKeyLength.get())
        KeyLength = self.IOCKeyLength.get()

        #if "-" in Str
        if "-" in KeyLength:

            KeyLength = KeyLength.split("-")

            DMsg = ""

            for ioc in range(int(KeyLength[0]), int(KeyLength[1])+1):

                #DMsg = DMsg + IOCKeyLength(Msg, ioc) + "\n"
                DMsg = DMsg + str(ioc) + ": " + str(IOCKeyLength(Msg, ioc)) + "\n"

        else:

            KeyLength = int(KeyLength)

            #DMsg = IOCKeyLength(Msg, KeyLength)
            DMsg = str(KeyLength) + ": " + str(IOCKeyLength(Msg, KeyLength))

        self.PlaceText(DMsg, self.CipherTypeOutput)


    def SolveRunTotCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        DMsg = SolveRunningTotal(Msg)

        self.PlaceText(DMsg, self.CipherTypeOutput)


    def Solve2SquareCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        Horizontal = bool(self.Horizontal2Square.get())

        SwapDigrams = bool(self.SwapDigrams2Square.get())

        Thread = threading.Thread(target = Solve2Square, args = (Msg, Horizontal, SwapDigrams))
        Thread.start()


    #def IOCCipher(self):
    def NGramIOCCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        KeyLength = self.NGramIOCKeyLength.get()

        #if "-" in Str
        if "-" in KeyLength:

            KeyLength = KeyLength.split("-")

            DMsg = ""

            for ioc in range(int(KeyLength[0]), int(KeyLength[1])+1):

                DMsg = DMsg + str(ioc) + ": " + str(NGramIOC(Msg, ioc)) + "\n"

        else:

            KeyLength = int(KeyLength)

            DMsg = str(KeyLength) + ": " + str(NGramIOC(Msg, KeyLength))

        self.PlaceText(DMsg, self.CipherTypeOutput)


    def Solve3SquareCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()
        
        Order = ""
        Order = Order + self.ThreeSquareOrderOption1.get()
        Order = Order + self.ThreeSquareOrderOption2.get()
        Order = Order + self.ThreeSquareOrderOption3.get()

        #print (Order)

        #Thread = threading.Thread(target = Solve2Square, args = (Msg, Order))
        Thread = threading.Thread(target = Solve3Square, args = (Msg, Order))
        Thread.start()


    def SteppedBigramGraph(self):

        #Period = int(self.BifidPeriodLengthEntry.get())

        Start = 0

        End = 20

        #self.WindowFigure = pyplot.figure()
        #self.WindowFigure = pyplot.figure(figsize = (30, 5))
        #self.WindowFigure = pyplot.figure(figsize = (18, 4))
        #self.WindowFigure = pyplot.figure(figsize = (10, 4))
        self.WindowFigure = pyplot.figure(figsize = (8, 5))

        #self.WindowFigure.figsize = (10, 2)#

        #self.WindowFigure.suptitle("Stepped Bigram Variance For Period Of " + str(Period))
        #self.WindowFigure.suptitle("Stepped Bigram Variance For Steps From " + str(Start) + " To " + str(End))
        self.WindowFigure.suptitle("Stepped Bigram Variance For Steps From " + str(Start) + " To " + str(End-1))

        #xplot = list(range(Start, End+1))
        xplot = []

        #for x in range(Start, End+1):
        for x in range(Start+1, End+1):

            xplot.append(x)

        yplot = []

        BarWidth = 0.4

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        ####WOAH AN ACTUAL COMMENT! Yeah, I know I've already .lower()ed it, but mleh!"
        Msg = RemoveSpaces(RemovePunctuation(Msg.lower()))

        if len(Msg) > 0:

            #for step in range(Start, End+1):
            for step in range(Start, End):

                #yplot.append(BigramVariance(Msg, step)
                yplot.append(BigramVariance(Msg, step))

        else:

            for letter in xplot:

                yplot.append(0)

        self.Axis = pyplot.subplot(1, 1, 1)
        #self.Axis = pyplot.subplot(2, 1, 1)
        #self.Axis = pyplot.subplot(1, 2, 1)
        #self.Axis = pyplot.subplot(1, 1, 2)

        #self.Axis.bar(xplot, yplot, width = -BarWidth, color = "b", align = "edge", label = "MLEHAHUARRRR!!!!")
        #self.Axis.bar(xplot, yplot, width = BarWidth, color = "b", align = "centre", label = "MLEHAHUARRRR!!!!")
        self.Axis.bar(xplot, yplot, width = BarWidth, color = "b", align = "center", label = "MLEHAHUARRRR!!!!")

        #FigureSize = pyplot.rcParams["figure.figsize"]

        #FigureSize[0] = 20
        #FigureSize[0] = 40

        #pyplot.rcParams["figure.figsize"] = FigureSize

        pyplot.ylabel("Variance")
        #pyplot.xlabel("Step")
        pyplot.xlabel("Step + 1")

        #pyplot.xticks(numpy.arrange(min(xplot), max(xplot), 1.0))
        #pyplot.xticks(numpy.arange(min(xplot), max(xplot), 1.0))
        pyplot.xticks(numpy.arange(min(xplot), max(xplot)+1, 1.0))

        self.Axis.legend()

        self.WindowFigure.show()


    def SolveBifidCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        Period = int(self.BifidPeriodLengthEntry.get())

        Thread = threading.Thread(target = SolveBifid, args = (Msg, Period))
        Thread.start()


    #def ProgrammableUseButton(self):
    def ProgrammableUseCommand(self):

        print ("HI!")

        msg = self.InputBox.get("1.0", tkinter.END).strip()

        newMsg = ""

        for i in range(0, len(msg)):

            if i % 5 == 0:

                newMsg = newMsg + str(BaseNToBaseM(msg[i:i+5], 2, 10)) + " "

        self.PlaceText(newMsg, self.OutputBox)


    def ProgrammableUseCommand2(self):

        print ("HI! 2")

        msg = self.InputBox.get("1.0", tkinter.END).strip()

        newMsg = ""

        for i in range(0, len(msg)):

            if i % 3 == 0:

                newMsg = newMsg + str(BaseNToBaseM(msg[i:i+3], 3, 10)) + " "

        self.PlaceText(newMsg, self.OutputBox)


    def ProgrammableUseCommand3(self):

        print ("HI! 3")

        msg = self.InputBox.get("1.0", tkinter.END).strip()

        self.PlaceText(str("22" in msg), self.CipherTypeOutput)


    def ProgrammableUseCommand4(self):

        print ("HI! 4")

        msg = self.InputBox.get("1.0", tkinter.END).strip()

        startIndex = 1

        newMsg = ""

        for word in msg.split():

            newWord = ""

            for letter in word:

                newLetter = alphabetlist[(alphabetlist.index(letter) - startIndex) % 26]

                newWord = newWord + newLetter

            newMsg = newMsg + newWord + " "

            startIndex += 1

        newMsg = newMsg.strip()

        self.PlaceText(newMsg, self.OutputBox)


    def ProgrammableUseCommand5(self):

        print ("HI! 5")


    def SolveDoubleTranspoCipher(self):

        #####
        Msg = self.InputBox.get("1.0", tkinter.END)

        Length1 = int(self.DoubleTranspoLengthBox1.get())
        Length2 = int(self.DoubleTranspoLengthBox2.get())

        Type1 = self.DoubleTranspoTypeBox1.get()
        Type2 = self.DoubleTranspoTypeBox2.get()

        print (Type1, Length1, Type2, Length2)

        Thread = threading.Thread(target = SolveDoubleTransposition, args = (Msg, Type1, Length1, Type2, Length2))
        Thread.start()


    def BruteDoubleTranspoCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        Length1 = int(self.DoubleTranspoLengthBox1.get())
        Length2 = int(self.DoubleTranspoLengthBox2.get())

        Type1 = self.DoubleTranspoTypeBox1.get()
        Type2 = self.DoubleTranspoTypeBox2.get()

        print (Type1, Length1, Type2, Length2)

        Thread = threading.Thread(target = BruteForceDoubleTransposition, args = (Msg, Type1, Length1, Type2, Length2))
        Thread.start()


    def NGramVigenereIOCCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        KeyLength = self.NGramIOCKeyLength.get()

        NgramLength = int(self.NGramLength.get())

        #From = int(self.NGramLetterFrom.get())
        From = int(self.NGramIOCKeyLetterFrom.get())

        #To = int(self.NGramLetterTo.get())
        #To = int(self.NGramIOCKeyLetterTo.get())
        To = self.NGramIOCKeyLetterTo.get()
        
        if To != "":
            
            To = int(To)

        if "-" in KeyLength:

            KeyLength = KeyLength.split("-")

            DMsg = ""

            for ioc in range(int(KeyLength[0]), int(KeyLength[1])+1):

                #DMsg = DMsg + str(ioc) + "-Gram: " + str(NGramVigenereIOC(Msg, ioc, NgramLength)) + "\n"
                #DMsg = "Key Length " + DMsg + str(ioc) + ": " + str(NGramVigenereIOC(Msg, ioc, NgramLength)) + "\n"
                #DMsg = DMsg + "Key Length " + str(ioc) + ": " + str(NGramVigenereIOC(Msg, ioc, NgramLength)) + "\n"
                #DMsg = DMsg + str(ioc) + ": " + str(NGramVigenereIOC(Msg, ioc, NgramLength)) + "\n"
                #if self.NGramIOCKeyLetterTo.get() == "":
                if To == "":

                    DMsg = DMsg + str(ioc) + ": " + str(NGramVigenereIOC(Msg, ioc, NgramLength, From, ioc)) + "\n"
                    #DMsg = DMsg + str(ioc) + ": " + str(NGramVigenereIOC(Msg, ioc, NgramLength, From, ioc-1)) + "\n"

                else:
                    
                    DMsg = DMsg + str(ioc) + ": " + str(NGramVigenereIOC(Msg, ioc, NgramLength, From, To)) + "\n"

        else:

            KeyLength = int(KeyLength)

            #DMsg = str(KeyLength) + "-Gram: " + str(NGramIOC(Msg, KeyLength, NgramLength))
            #~DMsg = "Key Length " + str(KeyLength) + ": " + str(NGramVigenereIOC(Msg, KeyLength, NgramLength))
            #DMsg = str(KeyLength) + ": " + str(NGramVigenereIOC(Msg, KeyLength, NgramLength))
            DMsg = str(KeyLength) + ": " + str(NGramVigenereIOC(Msg, KeyLength, NgramLength, From, To))

        self.PlaceText(DMsg, self.CipherTypeOutput)


    def FindPotentialAnagramsFromInput(self):

        WordInput = self.WordInputEntry.get()

        DictionaryType = self.LargeOrFull.get()

        if DictionaryType == 1:

            DictionaryType = "Large"

        elif DictionaryType == 2:

            DictionaryType = "Full"

        elif DictionaryType == 3:

            DictionaryType = "SOWPODS"

        Dictionary = open(DictionaryType + " Dictionary.txt", "r").readlines()

        for word in range(0, len(Dictionary)):

            Dictionary[word] = RemovePunctuation(Dictionary[word]).lower()

        Dictionary = set(Dictionary)

        PotentialWords = FindPotentialAnagrams(WordInput, Dictionary)

        Output = ""

        if len ( PotentialWords ) > 0 :

            for word in PotentialWords:

                Output = Output + word + "\n"

        self.PotentialWordOutputBox.delete("1.0", tkinter.END)
        self.PotentialWordOutputBox.insert("1.0", Output)


    def StraddleCheckerboardCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        ##Thread = threading.Thread(target = SolveStraddleCheckerboard, args = (Msg))
        ##Thread = threading.Thread(target = SolveStraddleCheckerboard, args = tuple((Msg)))
        #Thread = threading.Thread(target = SolveStraddleCheckerboard, args = (Msg,))
        Thread = threading.Thread(target = SolveStraddleCheckerboard, args = (Msg,True))
        Thread.start()


    #def SolveBifidCipher(self):
    def SolveTrifidCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        Period = int(self.TrifidPeriodLengthEntry.get())

        Thread = threading.Thread(target = SolveTrifid, args = (Msg, Period))
        Thread.start()


    #def SteppedBigramGraph(self):
    def SteppedTrigramGraph(self):
        
        Start = 0

        End = 20

        self.WindowFigure = pyplot.figure(figsize = (8, 5))

        self.WindowFigure.suptitle("Stepped Trigram Variance For Steps From " + str(Start) + " To " + str(End-1))

        xplot = []

        #for x in range(Start+1, End+1):
        for x in range(Start+2, End+2):

            xplot.append(x)

        yplot = []

        BarWidth = 0.4

        Msg = self.InputBox.get("1.0", tkinter.END)

        #Msg = RemoveSpaces(RemovePunctuation(Msg.lower()))
        Msg = RemoveSpaces(Msg.lower())

        if len(Msg) > 0:

            for step in range(Start, End):

                yplot.append(TrigramVariance(Msg, step))

        else:

            for letter in xplot:

                yplot.append(0)

        self.Axis = pyplot.subplot(1, 1, 1)

        #self.Axis.bar(xplot, yplot, width = BarWidth, color = "b", align = "center", label = "MLEHAHUARRRR!!!!")
        self.Axis.bar(xplot, yplot, width = BarWidth, color = "b", align = "center", label = "DOOPYDOPPYDOOO! !!")

        pyplot.ylabel("Variance")
        #pyplot.xlabel("Step + 1")
        pyplot.xlabel("Step + 2")

        pyplot.xticks(numpy.arange(min(xplot), max(xplot)+1, 1.0))

        self.Axis.legend()

        self.WindowFigure.show()


    def SolveSerialPlayfairCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        Period = int(self.SerialPlayfairPeriodLengthEntry.get())

        Thread = threading.Thread(target = SolveSeriatedPlayfair, args = (Msg, Period))
        Thread.start()


    #def SteppedTrigramGraph(self):
    def SteppedNGramGraph(self):

        #NGramLength = int(NGramLengthEntry.get())
        NGramLength = int(self.NGramLengthEntry.get())
        
        Start = 0

        End = 20

        self.WindowFigure = pyplot.figure(figsize = (8, 5))

        self.WindowFigure.suptitle("Stepped N-Gram Variance For Steps From " + str(Start) + " To " + str(End-1))

        xplot = []

        for x in range(Start+NGramLength-1, End+NGramLength-1):

            xplot.append(x)

        yplot = []

        BarWidth = 0.4

        Msg = self.InputBox.get("1.0", tkinter.END)

        Msg = RemoveSpaces(Msg.lower())

        if len(Msg) > 0:

            for step in range(Start, End):

                yplot.append(NGramVariance(Msg, NGramLength, step))

        else:

            for letter in xplot:

                yplot.append(0)

        self.Axis = pyplot.subplot(1, 1, 1)

        self.Axis.bar(xplot, yplot, width = BarWidth, color = "b", align = "center", label = "DOOPYDOPPYDOOO! !!")

        pyplot.ylabel("Variance")
        pyplot.xlabel("Step + " + str(NGramLength-1))

        pyplot.xticks(numpy.arange(min(xplot), max(xplot)+1, 1.0))

        self.Axis.legend()

        self.WindowFigure.show()


    def ChunkCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        Period = int(self.ChunkLengthEntry.get())

        NewMsg = CutIntoChunks(Msg, Period)

        #PlaceText(NewMsg, self.OutputBox)
        self.PlaceText(NewMsg, self.OutputBox)


    def ReplaceBaseNLetter(self):

        pass

        Msg = self.InputBox.get("1.0", tkinter.END)

        A = int(self.AEqualsOption.get())

        Base = int(self.BaseEntry.get())

        StringLength = int(self.StringLengthEntry.get())

        NewMsg = BaseNToLetter(Msg, Base, StringLength, A)

        self.PlaceText(NewMsg, self.OutputBox)

    def ReplaceLetterBaseN(self):

        pass


    def TextBoxDisplay(self, text = ""):

        self.TextBoxWindow = tkinter.Toplevel()

        self.TextBoxWindow.title("Text Box")
        self.TextBoxWindow.iconbitmap("Images/Code Creaker Icon.ico")
        self.TextBoxWindow.geometry("800x600")
        self.TextBoxWindow.configure(bg = BGColour)

        self.TextBoxWindow.resizable(False, False)

        #self.TextBoxWindowTextBox = tkinter.Text(self.PotentialWordsWindow, height = 750, width = 550)
        #self.TextBoxWindowTextBox = tkinter.Text(self.TextBoxWindow, height = 750, width = 550)
        #self.TextBoxWindowTextBox = tkinter.Text(self.TextBoxWindow, height = 150, width = 50)
        #self.TextBoxWindowTextBox = tkinter.Text(self.TextBoxWindow, height = 300, width = 30)
        #self.TextBoxWindowTextBox = tkinter.Text(self.TextBoxWindow, height = 30, width = 100)
        #self.TextBoxWindowTextBox = tkinter.Text(self.TextBoxWindow, height = 36, width = 90)
        #self.TextBoxWindowTextBox = tkinter.Text(self.TextBoxWindow, height = 34, width = 92)
        #self.TextBoxWindowTextBox = tkinter.Text(self.TextBoxWindow, height = 34, width = 93)
        self.TextBoxWindowTextBox = tkinter.scrolledtext.ScrolledText(self.TextBoxWindow, height = 34, width = 93)
        self.TextBoxWindowTextBox.place(x = 25, y = 25)

        self.TextBoxWindowTextBox.insert("1.0", text)


    def ReverseWordsCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        NewMsg = ReverseWords(Msg)

        self.PlaceText(NewMsg, self.OutputBox)


    def EncodeHuttonCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

#        Key = self.HuttonKeyEntry.get()
        Key = self.HuttonKeyEntry.get().lower()

        #Password = self.HuttonPasswordEntry.get()
        Password = self.HuttonPasswordEntry.get().lower()

        Alphabet = CreateKeyedAlphabet(Password)

        NewMsg = EncodeHutton(Msg, Alphabet, Key)

        self.PlaceText(NewMsg, self.OutputBox)


    #def EncodeHuttonCipher(self):
    def DecodeHuttonCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        Key = self.HuttonKeyEntry.get().lower()

        Password = self.HuttonPasswordEntry.get().lower()

        Alphabet = CreateKeyedAlphabet(Password)

        NewMsg = DecodeHutton(Msg, Alphabet, Key)

        self.PlaceText(NewMsg, self.OutputBox)

    def ReplaceCharCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        With = self.ReplaceCharWithEntry.get()

        #if With == "\\n":

            #With = "\n"
        With = With.replace("\\n", "\n")

        Char = self.ReplaceCharCharEntry.get()

        #if Char == "\\n":

            #Char = "\n"
        Char = Char.replace("\\n", "\n")

        NewMsg = ReplaceChar(Msg, Char, With)

        self.PlaceText(NewMsg, self.OutputBox)

    def ChiSquaredCipher(self):

        #Msg = self.InputBox.get("1.0", tkinter.END)
        #Msg = RemoveSpaces(RemovePunctuation(self.InputBox.get("1.0", tkinter.END)))
        Msg = RemoveSpaces(RemovePunctuation(self.InputBox.get("1.0", tkinter.END).lower()))

        AgainstDistribution = self.ChiDistributionOption.get()

##        if AgainstDistribution == "English":
##
##            #print ("Mmm hmmm")
##
##            #AgainstDistribution = averageletterfrequencies
##            AgainstDistribution = copy.deepcopy(averageletterfrequencies)
##
##        for x in AgainstDistribution:
##
##            #AgainstDistribution[x] *= len(Msg)
##            AgainstDistribution[x] *= len(Msg) / 100
##
##        #TextDistributionStart = LetterFrequencies(Msg)
##        #TextDistributionStart = LetterCount(Msg)
##        TextDistribution = LetterCount(Msg)
##
##        """for x in TextDistribution:
##
##            TextDistribution[x] *= 100 / len(Msg)"""
##
##        #print (TextDistribution)
##        #print (AgainstDistribution)
##
##        #TextDistribution = {}
##
##        #for x in TextDistributionStart:
##
##            #TextDistribution[x[0]] = x[2] * 100
##            #TextDistribution[x[0]] = x[2] * len(Msg)
##
##        #print (AgainstDistribution)

        #NewMsg, AcceptNullHyp = ChiSquared(TextDistribution, AgainstDistribution)
        NewMsg, AcceptNullHyp = TextChiSquared(Msg, AgainstDistribution)

        #OutputMsg = "χ2 = " + NewMsg + "\n"
        OutputMsg = "χ2 = " + str(NewMsg) + "\n"

        if AcceptNullHyp:

            OutputMsg = OutputMsg + "The distributions likely match."

        else:

            OutputMsg = OutputMsg + "The distributions likely do not match."

        #self.PlaceText(NewMsg, self.OutputBox)
        #self.PlaceText(NewMsg, self.CipherTypeOutputBox)
        #self.PlaceText(NewMsg, self.CipherTypeOutput)
        self.PlaceText(OutputMsg, self.CipherTypeOutput)


    def SolveAutokeyCipherCSharp(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        RangeStart = int(self.AutokeyRangeStartEntry.get())
        RangeEnd = int(self.AutokeyRangeEndEntry.get())

        alphabet = self.AutokeyAlphabetEntry.get()

        #NewMsg = SolveAutokeyCSharp(Msg, RangeStart, RangeEnd)
        for keyLength in range(RangeStart, RangeEnd+1):

            #NewMsg = SolveAutokeyCSharp(Msg, keyLength)
            NewMsg = SolveAutokeyCSharp(Msg, keyLength, alphabet)

    def RemovePunctAndSpace(self):
        
        self.PlaceText(RemoveSpaces(RemovePunctuation(self.InputBox.get("1.0", tkinter.END))), self.OutputBox)

    def SolveADFGXCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        ColumnNum = int(self.ADFGXKeyLengthEntry.get())

        missingLetter = self.ADFGXMissingLetterEntry.get()

        #SolevADFGX(Msg, ColumnNum)
        #SolveADFGX(Msg, ColumnNum)
        SolveADFGX(Msg, ColumnNum, missingLetter)

    def SolveNormalVigenereCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        KeyWorldLength = int(self.KeyWordLengthEntryButton.get())

        SolveNormalVigenere(Msg, Key, KeyWorldLength)


    def IdentifyCipherButtonCommand(self):

        #Msg = self.InputBox.get("1.0", tkinter.END).lower()
        Msg = self.InputBox.get("1.0", tkinter.END)

        Report, PotentialCiphers = IdentifyCipher(Msg)

        self.AnalyseTextBox.delete("1.0", tkinter.END)
        self.AnalyseTextBox.insert("1.0", Report)


    def SampleTextCommand(self):

        n = max([int(file[:-4]) for file in os.listdir("Sample Texts") if os.path.isfile(os.path.join("Sample Texts", file))])

        #print (n)
        index = random.randint(0, n)

        #text = open(str(index) + ".txt", "r").read()
        #text = open("Sample Texts/" + str(index) + ".txt", "r").read()
        text = open("Sample Texts\\" + str(index) + ".txt", "r").read()

        #TextBoxDisplay(text)
        self.TextBoxDisplay(text)


    def AutoSolveCommand(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        Report, PotentialCiphers = IdentifyCipher(Msg)

        Report = AutoSolve(Msg, PotentialCiphers)

        self.AnalyseTextBox.delete("1.0", tkinter.END)
        self.AnalyseTextBox.insert("1.0", Report)


    def OpenCipherChallengeWebsite(self, year, page = "challenges"):

        extension = ""

        if page == "challenges":

            #extension = "challenges"
            extension = "schedule"

        if year == "Archive":

            webbrowser.open("https://github.com/themaddoctor/BritishNationalCipherChallenge", new = 2)

        elif year == "Drive":

            webbrowser.open("https://drive.google.com/drive/u/0/folders/1k2RA7g9itoJOd-xqOrFpW8QywxYXLs7m", new = 2)

        else:

            if year == CURRENTCIPHERCHALLENGEYEAR:

                #webbrowser.open("www.cipherchallenge.org", new = 2)
                #webbrowser.get("mozilla").open("www.cipherchallenge.org", new = 2)
                #webbrowser.get("firefox").open("www.cipherchallenge.org", new = 2)
                #webbrowser.get().open("www.cipherchallenge.org", new = 2)
                #webbrowser.open("http://www.cipherchallenge.org", new = 2)

                domain = "www"

            else:

                #webbrowser.open(str(year) + ".cipherchallenge.org", new = 2)
                #webbrowser.get("mozilla").open(str(year) + ".cipherchallenge.org", new = 2)
                #webbrowser.get("firefox").open(str(year) + ".cipherchallenge.org", new = 2)
                #webbrowser.get().open(str(year) + ".cipherchallenge.org", new = 2)
                #webbrowser.get().open("http://" + str(year) + ".cipherchallenge.org", new = 2)
                #webbrowser.open("http://" + str(year) + ".cipherchallenge.org", new = 2)

                domain = str(year)

            webbrowser.open("http://" + domain + ".cipherchallenge.org/" + extension, new = 2)


    def SolveNxNHillCommand(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        N = int(self.NxNHillKeyLengthEntry.get())

        SolveNxNHill(Msg, N)


    def QuadgramScoreButtonCommand(self):

        #Msg = self.InputBox.get("1.0", tkinter.END)
        Msg = RemoveSpaces(RemovePunctuation(self.InputBox.get("1.0", tkinter.END).lower()))

        QuadgramFrequencies = LoadQuadgramFrequencyTable("Dictionary", "All")

        Score = QuadgramScore(Msg, QuadgramFrequencies)

        #self.AnalyseTextBox.delete("1.0", tkinter.END)
        self.CipherTypeOutput.delete("1.0", tkinter.END)
        #self.AnalyseTextBox.insert("1.0", str(Score))
        self.CipherTypeOutput.insert("1.0", str(Score))


    def CopyOutput(self):

        #Msg = self.OutputBox.get("1.0", tkinter.END)
        Msg = self.OutputBox.get("1.0", tkinter.END).rstrip("\n")

        pyperclip.copy(Msg)

    def PasteInput(self):

        self.PlaceText(pyperclip.paste(), self.InputBox)


    #def UploadChallenge(self):
    def UploadChallengeCommand(self):

        print ("Not implemented yet!")

        #msg = self.ChallengeTextBox.get("1.0", tkinter.END).rstrip("\n")

        #chaYear = int(self.ChallengeYearEntry.get())

        #chaNum = int(self.ChallengeNumEntry.get())

        #chaPart = ["A", "B"][self.ChallengePartOption.get() - 1]

        #UploadChallenge(msg, chaYear, chaNum, chaPart)

    #def DownloadChallenge(self):
    def DownloadChallengeCommand(self):

        #print ("Downloading challenge")

        textType = self.ChallengeTextTypeOption.get()

        chaYear = int(self.ChallengeYearEntry.get())

        chaNum = int(self.ChallengeNumEntry.get())

        chaPart = ["A", "B"][self.ChallengePartOption.get() - 1]

        #print ("Downloading challenge", str(chaNum) + chaPart)
        #print ("Downloading challenge " + str(chaNum) + chaPart + "...")

##        """if chaYear == 2019:
##
##            extension = ""
##
##            #if self.chaNum == 0:
##            if chaNum == 0:
##
##                extension = "introduction"
##                print ("Downloading introduction...")
##
##            else:
##
##                print ("Downloading challenge " + str(chaNum) + chaPart + "...")
##                print ("Need to add it to work for challenges other than introduction!")
##
##            #url = "http://www.cipherchallenge.org/challenge/" + extension
##            url = "https://www.cipherchallenge.org/challenge/" + extension
##
##            print ("URL:", url)
##
##            #url = "www.google.co.uk"
##            #url = "http://www.google.co.uk"
##
##            user_agent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.7) Gecko/2009021910 Firefox/3.0.7'
##            headers = {'User-Agent': user_agent}
##
##            #html = urllib3.open(url)
##            #html = urllib.request.urlopen(url, None, headers).read()
##            html = urllib.request.urlopen(urllib.request.Request(url, None, headers)).read()
##
##            #print (html)
##
##            #soup = BeautifulSoup(html)
##            #soup = BeautifulSoup(html, features = "html-parser")
##            soup = BeautifulSoup(html, features = "html.parser")
##
##            #print (soup.prettify())
##
##            #print (soup.body.find("div", attrs = {"class": "challenge__content " + chaPart.lower()}).text)
##
##            try:
##                
##                ChallengeText = soup.body.find("div", attrs = {"class": "challenge__content " + chaPart.lower()}).text.strip("\n")
##
##            except:
##
##                ChallengeText = "Unable to download."
##
##        else:
##            
##            ChallengeText = "Cannot yet retrieve that year's challenges.""""

        #ChallengeText = DownloadChallenge(chaYear, chaNum, chaPart)
        ChallengeText = DownloadChallenge(textType, chaYear, chaNum, chaPart)

        self.PlaceText(ChallengeText, self.ChallengeTextBox)


    def PutChallengeInInputButtonCommand(self):
        
        self.PlaceText(self.ChallengeTextBox.get("1.0", tkinter.END), self.InputBox)


    def SolveRailFenceButtonCommand(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        maxRowNum = int(self.RailFenceMaxRowNumEntry.get())

        startAt = self.RailFenceStartAtOption.get()

        solution = SolveRailFence(Msg, maxRowNum, startAt)

        self.CipherTypeOutput.delete("1.0", tkinter.END)
        self.CipherTypeOutput.insert("1.0", solution)


    def StartAutoSolveTimer(self):

##        """while True:
##
##            #if self.ChallengeTimerActiveCheckbox.get() == 0:
##            if self.ChallengeTimerActiveCheckboxOption.get() == 0:
##
##                self.AutoSolveTimerActivated = False
##
##            elif not self.AutoSolveTimerActivated and datetime.datetime.now() > datetime.datetime.now().replace(hour = int(self.ChallengeTimerHourEntry.get()), minute = int(self.ChallengeTimerMinEntry.get()), second = 0, microsecond = 0):
##
##                print ("Starting timer-activated auto-solve...")
##
##                self.AutoSolveTimerActivated = True
##
##                self.DownloadChallenge()
##
##                self.PutChallengeInInputButtonCommand()
##
##                self.AutoSolveCommand()
##        """

        self.ChallengeTimerMin = int(self.ChallengeTimerMinEntry.get())
        self.ChallengeTimerHour = int(self.ChallengeTimerHourEntry.get())

        self.ChallengeTimerYear = int(self.ChallengeYearEntry.get())
        self.ChallengeTimerNum = int(self.ChallengeNumEntry.get())
        self.ChallengeTimerPart = ["A", "B"][self.ChallengePartOption.get() - 1]

        #challengeInfo = str(self.ChallengeTimerYear) + " " + str(self.ChallengeTimerNum) + str(self.ChallengeTimerPart) + " for " + str(self.ChallengeTimerHour) + ":" + str(self.ChallengeTimerMin)
        challengeTimerInfo = str(self.ChallengeTimerYear) + " " + str(self.ChallengeTimerNum) + str(self.ChallengeTimerPart) + " for " + str(self.ChallengeTimerHour) + ":" + str(self.ChallengeTimerMin)

        #print ("Timer set for: " + str(self.ChallengeTimerHour) + ":" + str(self.ChallengeTimerMin))
        #print ("Timer set for challenge " + str(self.ChallengeTimerYear) + " " + str(self.ChallengeTimerNum) + str(self.ChallengeTimerPart) + " for " + str(self.ChallengeTimerHour) + ":" + str(self.ChallengeTimerMin))
        #print ("Timer set for challenge " + challengeInfo)
        print ("Timer set for challenge " + challengeTimerInfo)

        #self.ChallengeCurrentTimerInfoLabel.text = challengeInfo
        #self.ChallengeCurrentTimerInfoLabel.text = challengeTimerInfo
        self.ChallengeCurrentTimerInfoLabel["text"] = challengeTimerInfo

        if not self.AutoSolveTimerActivated:

            self.AutoSolveTimerActivated = True

            Thread = threading.Thread(target = self.RunAutoSolveTimer)
            Thread.start()

        else:

            print ("Overridden old timer")


    def CancelAutoSolveTimer(self):

        self.AutoSolveTimerActivated = False

        #self.ChallengeCurrentTimerInfoLabel.insert(0, "None")
        #self.ChallengeCurrentTimerInfoLabel.text = "None"
        self.ChallengeCurrentTimerInfoLabel["text"] = "Cancelled"

        print ("Cancelled timer")


    def RunAutoSolveTimer(self):

        while self.AutoSolveTimerActivated:

            #time.sleep(5)

            if datetime.datetime.now() > datetime.datetime.now().replace(hour = self.ChallengeTimerHour, minute = self.ChallengeTimerMin, second = 0, microsecond = 0):

                print ("Starting timer-activated auto-solve...")

                #self.AutoSolveTimerActivated = True
                self.AutoSolveTimerActivated = False
                #self.CancelAutoSolveTimer()
                #self.ChallengeCurrentTimerInfoLabel["text"] = "Finished"

                #self.DownloadChallenge()

                #self.PutChallengeInInputButtonCommand()

                #self.AutoSolveCommand()

                #ChallengeText = self.DownloadChallenge(self.ChallengeTimerYear, self.ChallengeTimerNum, self.ChallengeTimerPart)
                #ChallengeText = DownloadChallenge(self.ChallengeTimerYear, self.ChallengeTimerNum, self.ChallengeTimerPart)
                ChallengeText = DownloadChallenge("ciphertext", self.ChallengeTimerYear, self.ChallengeTimerNum, self.ChallengeTimerPart)

                Report, PotentialCiphers = IdentifyCipher(ChallengeText)

                Report = AutoSolve(ChallengeText, PotentialCiphers)

                print (Report)

            else:

                time.sleep(5)

        #print ("Timer stopped")
        print ("Timer finished")


    def ClearChallengeButtonCommand(self):

        self.PlaceText("", self.ChallengeTextBox)

    #def def ClearInputButtonCommand(self):
    def ClearInputButtonCommand(self):

        self.PlaceText("", self.InputBox)

    #def def ClearOutputButtonCommand(self):
    def ClearOutputButtonCommand(self):

        self.PlaceText("", self.OutputBox)


    def DecryptVICCommand(self):

        print ("Not implemented yet.")


    def EncryptVICCommand(self):

        #print ("Not implemented yet.")
        msg = self.InputBox.get("1.0", tkinter.END).lower()

        keyphrase = RemoveSpaces(RemovePunctuation(self.VICKeyPhraseEntry.get()))

        date = RemoveSpaces(self.VICDateEntry.get())
        #date = [int(x) for x in date if x.is_digit()]
        date = [int(x) for x in date if x in digitset]

        indic = RemoveSpaces(self.VICMessageIndicatorEntry.get())
        indic = [int(x) for x in indic]

        personalNum = int(self.VICPersonalNumberEntry.get())

        checkerboardKey = self.VICCheckerboardKeyEntry.get()

        encryptedVIC = EncryptVIC(msg, keyphrase, date, indic, personalNum, checkerboardKey)

        self.PlaceText(encryptedVIC, self.OutputBox)


    def WordCountButtonCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        length = WordCount(msg)

        self.CipherTypeOutput.delete("1.0", tkinter.END)
        self.CipherTypeOutput.insert("1.0", "Length: " + str(length))


    def EncodeMorseCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        dot = self.MorseDotEntry.get()
        #delim = self.MorseDelimEntry.get()
        charDelim = self.MorseCharDelimEntry.get()
        dash = self.MorseDashEntry.get()

        #morse = EncodeMorse(msg, dot, dash, delim)
        morse = EncodeMorse(msg, dot, dash, charDelim)

        self.PlaceText(morse, self.OutputBox)

    def DecodeMorseCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        dot = self.MorseDotEntry.get()
        #delim = self.MorseDelimEntry.get()
        dash = self.MorseDashEntry.get()

        charDelim = self.MorseCharDelimEntry.get()

        #plainMorse = DecodeMorse(msg, dot, dash, delim)
        plainMorse = DecodeMorse(msg, dot, dash, charDelim)

        self.PlaceText(plainMorse, self.OutputBox)


    def FindPotentialContainAnagramsFromInput(self):

        WordInput = self.WordInputEntry.get()

        DictionaryType = self.LargeOrFull.get()

        if DictionaryType == 1:

            DictionaryType = "Large"

        elif DictionaryType == 2:

            DictionaryType = "Full"

        elif DictionaryType == 3:

            DictionaryType = "SOWPODS"

        Dictionary = open(DictionaryType + " Dictionary.txt", "r").readlines()

        for word in range(0, len(Dictionary)):

            Dictionary[word] = RemovePunctuation(Dictionary[word]).lower()

        Dictionary = set(Dictionary)

        PotentialWords = FindPotentialContainAnagrams(WordInput, Dictionary)

        Output = ""

        if len ( PotentialWords ) > 0 :

            for word in PotentialWords:

                Output = Output + word + "\n"

        self.PotentialWordOutputBox.delete("1.0", tkinter.END)
        self.PotentialWordOutputBox.insert("1.0", Output)


    def LoadInfoCommand(self):

        infoToLoad = self.InfoMenu.get()

        if infoToLoad not in self.InfoOptions:

            print ("Finding closest match in list of infos for: " + infoToLoad)

            infoToLoad = MatchToClosestString(infoToLoad, self.InfoOptions)

        if infoToLoad == None:

            pass
            print ("No close enough match found.")

        else:

            print ("Matched to: " + infoToLoad)

            self.InfoMenu.delete(0, tkinter.END)
            self.InfoMenu.insert(0, infoToLoad)

            self.infoPage = 0

            self.LoadInfoPageCommand()

    def LoadInfoPageCommand(self):

        infoToLoad = self.InfoMenu.get()

        info = None

        if infoToLoad == "Morse Code":

            #self.PlaceText(self.InfoBox, GetMorseInfo())
            #self.PlaceText(GetMorseInfo(self.infoPage)[1], self.InfoBox)
            info = GetMorseInfo(self.infoPage)

        elif infoToLoad == "VIC Cipher":

            #self.PlaceText(self.InfoBox, GetVICInfo())
            #self.PlaceText(GetVICInfo(self.infoPage)[1], self.InfoBox)
            info = GetVICInfo(self.infoPage)

        elif infoToLoad == "Websites":

            #self.PlaceText(GetWebsitesInfo(self.infoPage)[1], self.InfoBox)
            info = GetWebsitesInfo(self.infoPage)

        elif infoToLoad == "William's Super Awesome Code Creaker":

            #self.PlaceText(GetWSACCInfo(self.infoPage)[1], self.InfoBox)
            info = GetWSACCInfo(self.infoPage)

        elif infoToLoad == "Levenshtein Metric":

            #self.PlaceText(GetLevenshInfo(self.infoPage)[1], self.InfoBox)
            info = GetLevenshInfo(self.infoPage)

        elif infoToLoad == "Enigma":

            #self.PlaceText(GetEnigmaInfo(self.infoPage)[1], self.InfoBox)
            info = GetEnigmaInfo(self.infoPage)

        else:

            info = GetInfo(infoToLoad, self.infoPage)

        if info != None:

            self.PlaceText(info[1], self.InfoBox)

            self.InfoPageTitleLabel.config(text = info[0])


    def ChangeInfoPage(self, amount = 0):

        self.infoPage += amount

        if self.infoPage < 0:

            self.infoPage = 0

        #self.LoadPageInfoCommand()
        self.LoadInfoPageCommand()


    def EncryptEnigmaCommand(self):

        #print ("Not implemented yet!")

        #self.DecryptEnigma()
        self.DecryptEnigmaCommand()


    def DecryptEnigmaCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END).lower()

        rotorOrder = RemoveSpaces(self.EnigmaRotorOrderEntry.get())
        rotorOrder = [int(x) for x in rotorOrder if x in digitset]

        rotorPositions = RemoveSpaces(self.EnigmaRotorPositionsEntry.get())
        rotorPositions = [x.lower() for x in rotorPositions if x.lower() in alphabetset]

        ring = RemoveSpaces(self.EnigmaRingKeyEntry.get())
        ring = [x.lower() for x in ring if x.lower() in alphabetset]

        plugboard = self.EnigmaPlugboardEntry.get()
        #plugboard = [(plugboard[i], plugboard[i+1]) for i in range(0, len(plugboard)) if i % 2 == 0]
        #plugboard = [(plugboard[i], plugboard[i+1]) for i in range(0, len(plugboard)) if i % 3 == 0]
        plugboard = [(plugboard[i].lower(), plugboard[i+1].lower()) for i in range(0, len(plugboard)) if i % 3 == 0]

        reflector = self.EnigmaReflectorOption.get()

        decryptedEnigma = DecryptEnigma(msg, rotorOrder, rotorPositions, ring, plugboard, reflector)

        self.PlaceText(decryptedEnigma, self.OutputBox)


    def CipherTypeInfoCommand(self):

        self.InfoMenu.delete(0, tkinter.END)
        self.InfoMenu.insert(0, self.SolveAsMenu.get())

        self.LoadInfoCommand()


    def CipherMachineInfoCommand(self):

        self.InfoMenu.delete(0, tkinter.END)
        self.InfoMenu.insert(0, self.CipherMachineOption.get())

        self.LoadInfoCommand()


    def ChangeCipherMachine(self, event = None):

        #print ("Not implemented yet")
        #print ("Changing cipher machines has not been implemented yet.")
        self.ChangeCipherMachineType(event=event)


    def ChangeCipherMachineType(self, event=None):

        CipherType = self.CipherMachineOption.get()

        self.ClearCipherMachineBox()

        if CipherType == "Enigma":

            self.EnigmaInputLabel = tkinter.Label(self.CipherMachineFrame, text = "Input:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
            self.EnigmaInputLabel.place(x = 10, y = 50)
            self.CipherMachineBoxWidgets.append(self.EnigmaInputLabel)

            self.EnigmaInputBox = tkinter.Text(self.CipherMachineFrame, width = 20, height = 10, bg = "#ffffff")
            self.EnigmaInputBox.place(x = 10, y = 80)
            self.CipherMachineBoxWidgets.append(self.EnigmaInputBox)


            self.EnigmaCribLabel = tkinter.Label(self.CipherMachineFrame, text = "Crib:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
            self.EnigmaCribLabel.place(x = 200, y = 50)
            self.CipherMachineBoxWidgets.append(self.EnigmaCribLabel)

            self.EnigmaCribEntry = tkinter.Entry(self.CipherMachineFrame, width = 30)
            self.EnigmaCribEntry.place(x = 200, y = 80)
            self.CipherMachineBoxWidgets.append(self.EnigmaCribEntry)

            #self.SlideEnigmaCribButton = tkinter.Button(self.CipherMachineFrame, text = "Slide", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SlideEnigmaCribCommand)
            self.SlideEnigmaCribButton = tkinter.Button(self.CipherMachineFrame, text = "Drag", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SlideEnigmaCribCommand)
            self.SlideEnigmaCribButton.place(x = 200, y = 110)
            self.CipherMachineBoxWidgets.append(self.SlideEnigmaCribButton)

        elif CipherType == "Running Key":

            #self.RunningKeyCiphertextLabel = tkinter.Label(self.CipherMachineFrame, text = "Ciphertext:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
            #self.RunningKeyCiphertextLabel = tkinter.Label(self.CipherMachineFrame, text = "Ciphertext:\nKey:\nPlaintext:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), justify = "left")
            self.RunningKeyCiphertextLabel = tkinter.Label(self.CipherMachineFrame, text = "Ciphertext:\nKey:\nPlaintext:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), justify = "right")
            self.RunningKeyCiphertextLabel.place(x = 10, y = 50)
            self.CipherMachineBoxWidgets.append(self.RunningKeyCiphertextLabel)

            """self.RunningKeyKeyLabel = tkinter.Label(self.CipherMachineFrame, text = "Key:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
            self.RunningKeyKeyLabel.place(x = 10, y = 80)
            self.CipherMachineBoxWidgets.append(self.RunningKeyKeyLabel)

            self.RunningKeyPlaintextLabel = tkinter.Label(self.CipherMachineFrame, text = "Plaintext:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
            self.RunningKeyPlaintextLabel.place(x = 10, y = 110)
            self.CipherMachineBoxWidgets.append(self.RunningKeyPlaintextLabel)"""

            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 20, height = 1, bg = "#ffffff", wrap = None)
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 20, height = 1, bg = "#ffffff", wrap = tkinter.NONE)
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 200, height = 1, bg = "#ffffff", wrap = tkinter.NONE)
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 100, height = 1, bg = "#ffffff", wrap = tkinter.NONE)
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 120, height = 1, bg = "#ffffff", wrap = tkinter.NONE)
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 110, height = 1, bg = "#ffffff", wrap = tkinter.NONE)
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 105, height = 1, bg = "#ffffff", wrap = tkinter.NONE)
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 108, height = 1, bg = "#ffffff", wrap = tkinter.NONE)
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 109, height = 1, bg = "#ffffff", wrap = tkinter.NONE)
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 110, height = 1, bg = "#ffffff", wrap = tkinter.NONE)
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 110, height = 3, bg = "#ffffff", wrap = tkinter.NONE, font = tkinter.font.Font(size = 12, weight = "bold"))
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 110, height = 3, bg = "#ffffff", wrap = tkinter.NONE, font = tkinter.font.TextFont(size = 12, weight = "bold"))
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 110, height = 3, bg = "#ffffff", wrap = tkinter.NONE, font = tkinter.font.Font(family = "tkDefaultFont", size = 12, weight = "bold"))
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 110, height = 3, bg = "#ffffff", wrap = tkinter.NONE, font = tkinter.font.Font("tkTextFont", 12, "bold"))
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 110, height = 3, bg = "#ffffff", wrap = tkinter.NONE, font = tkinter.font.Font("hel", 12, "bold"))
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 110, height = 3, bg = "#ffffff", wrap = tkinter.NONE, font = tkinter.font.Font(family = "helvetica", size = 12, weight = "bold"))
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 110, height = 3, bg = "#ffffff", wrap = tkinter.NONE, font = tkinter.font.Font(family = "times new roman", size = 12, weight = "bold"))
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 110, height = 3, bg = "#ffffff", wrap = tkinter.NONE)
            #self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 85, height = 1, bg = "#ffffff", wrap = tkinter.NONE)
            self.RunningKeyCiphertextBox = tkinter.Text(self.CipherMachineFrame, width = 85, height = 5, bg = "#ffffff", wrap = tkinter.NONE)
            #print(self.RunningKeyCiphertextBox["font"])
            #self.RunningKeyCiphertextBox.configure(font = tkinter.font.Font(family = "TkFixedFont", size = 12, weight = "bold"))
            #self.RunningKeyCiphertextBox.configure(font = tkinter.font.Font(family = "TkFixedFont", size = 12))
            self.RunningKeyCiphertextBox.configure(font = tkinter.font.Font(family = "courier", size = 12))
            #self.RunningKeyCiphertextBox.configure(font = tkinter.font.Font(family = "courier", size = 12, weight = "bold"))
            #self.RunningKeyCiphertextBox.place(x = 120, y = 50)
            #self.RunningKeyCiphertextBox.place(x = 115, y = 50)
            #self.RunningKeyCiphertextBox.place(x = 110, y = 50)
            self.RunningKeyCiphertextBox.place(x = 110, y = 52)
            #self.RunningKeyCiphertextBox.place(x = 110, y = 55)
            #self.RunningKeyCiphertextBox.place(x = 110, y = 50)
            self.CipherMachineBoxWidgets.append(self.RunningKeyCiphertextBox)
            #self.PlaceText(RemovePunctuation(RemoveSpaces(self.InputBox.get("1.0", tkinter.END))) + "\n" * 4, self.RunningKeyCiphertextBox)
            self.PlaceText(RemovePunctuation(RemoveSpaces(self.InputBox.get("1.0", tkinter.END))).upper(), self.RunningKeyCiphertextBox)

            #self.RunningKeyTextEditFlag = False
            #self.ClearRunningKeyEditFlag()
            #self.RunningKeyCiphertextBox.bind("<<Modified>>", self.RunningKeyTextEdited)
            #self.RunningKeyCiphertextBox.bind_all("<<Modified>>", self.RunningKeyTextEdited)

            """self.RunningKeyKeyBox = tkinter.Text(self.CipherMachineFrame, width = 85, height = 1, bg = "#ffffff", wrap = tkinter.NONE, font = tkinter.font.Font(family = "courier", size = 12))
            self.RunningKeyKeyBox.place(x = 110, y = 80)
            self.CipherMachineBoxWidgets.append(self.RunningKeyKeyBox)
            self.PlaceText(RemovePunctuation(" " * len(self.RunningKeyCiphertextBox.get("1.0", tkinter.END).rstrip("\n"))), self.RunningKeyKeyBox)

            self.RunningKeyPlaintextBox = tkinter.Text(self.CipherMachineFrame, width = 85, height = 1, bg = "#ffffff", wrap = tkinter.NONE, font = tkinter.font.Font(family = "courier", size = 12))
            self.RunningKeyPlaintextBox.place(x = 110, y = 110)
            self.CipherMachineBoxWidgets.append(self.RunningKeyPlaintextBox)
            self.PlaceText(RemovePunctuation(" " * len(self.RunningKeyCiphertextBox.get("1.0", tkinter.END).rstrip("\n"))), self.RunningKeyPlaintextBox)"""

            self.RunningKeyScrollbar = tkinter.Scrollbar(self, orient = "horizontal", command = self.RunningKeyCiphertextBox.xview)
            #self.RunningKeyScrollbar = tkinter.Scrollbar(self, orient = "horizontal", command = self.RunningKeyTextScrollBars)
            #self.RunningKeyScrollbar = tkinter.Scrollbar(self, orient = "horizontal")
            #self.RunningKeyScrollbar = tkinter.Scrollbar(self, orient = "horizontal", command = self.RunningKeyCiphertextBox.xview)
            self.RunningKeyCiphertextBox.configure(xscrollcommand = self.RunningKeyScrollbar.set)
            #self.RunningKeyPlaintextBox.configure(xscrollcommand = self.RunningKeyScrollbar.set)
            #self.RunningKeyKeyBox.configure(xscrollcommand = self.RunningKeyScrollbar.set)
            self.RunningKeyScrollbar.pack(side = "bottom", fill = "x")
            self.CipherMachineBoxWidgets.append(self.RunningKeyScrollbar)


        if CipherType == "Homophonic Substitution":

            self.WHomoSubKeyLabel = tkinter.Label(self.CipherMachineFrame, text = "Key:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
            self.WHomoSubKeyLabel.place(x = 10, y = 50)
            self.CipherMachineBoxWidgets.append(self.WHomoSubKeyLabel)

            #self.WHomoSubKeyBox = tkinter.scrolledtext.ScrolledText(self.CipherMachineFrame, width = 20, height = 10, bg = "#ffffff")
            #self.WHomoSubKeyBox = tkinter.scrolledtext.ScrolledText(self.CipherMachineFrame, width = 8, height = 10, bg = "#ffffff")
            self.WHomoSubKeyBox = tkinter.scrolledtext.ScrolledText(self.CipherMachineFrame, width = 8, height = 13, bg = "#ffffff")
            self.WHomoSubKeyBox.place(x = 10, y = 80)
            self.CipherMachineBoxWidgets.append(self.WHomoSubKeyBox)

            self.WHomoSubOutputLabel = tkinter.Label(self.CipherMachineFrame, text = "Output:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
            self.WHomoSubOutputLabel.place(x = 130, y = 50)
            self.CipherMachineBoxWidgets.append(self.WHomoSubOutputLabel)

            #self.WHomoSubOutputBox = tkinter.scrolledtext.ScrolledText(self.CipherMachineFrame, width = 70, height = 10, bg = "#ffffff")
            self.WHomoSubOutputBox = tkinter.scrolledtext.ScrolledText(self.CipherMachineFrame, width = 90, height = 13, bg = "#ffffff")
            #self.WHomoSubOutputBox.place(x = 60, y = 80)
            #self.WHomoSubOutputBox.place(x = 80, y = 80)
            #self.WHomoSubOutputBox.place(x = 100, y = 80)
            self.WHomoSubOutputBox.place(x = 130, y = 80)
            self.CipherMachineBoxWidgets.append(self.WHomoSubOutputBox)

            self.WHomoSubDecryptButton = tkinter.Button(self.CipherMachineFrame, text = "Decrypt", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.DecryptWHomoSubCommand)
            #self.WHomoSubDecryptButton.place(x = 400, y = 80)
            #self.WHomoSubDecryptButton.place(x = 800, y = 80)
            #self.WHomoSubDecryptButton.place(x = 860, y = 80)
            #self.WHomoSubDecryptButton.place(x = 880, y = 80)
            self.WHomoSubDecryptButton.place(x = 900, y = 80)
            self.CipherMachineBoxWidgets.append(self.WHomoSubDecryptButton)

            self.WHomoSubShowCiphertextOption = tkinter.IntVar()

            self.WHomoSubShowCiphertextCheckButton = tkinter.Checkbutton(self.CipherMachineFrame, text = "Show Symbols", bg = ButtonColour, font = tkinter.font.Font(size = 10, weight = "bold"), variable = self.WHomoSubShowCiphertextOption)
            self.WHomoSubShowCiphertextCheckButton.place(x = 870, y = 20)
            self.CipherMachineBoxWidgets.append(self.WHomoSubShowCiphertextCheckButton)

            self.WHomoSubShowCiphertextOption.set(1)

            self.WHomoSubSortKeyButton = tkinter.Button(self.CipherMachineFrame, text = "Sort Key", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.WHomoSubSortKeyCommand)
            #self.WHomoSubSortKeyButton.place(x = 800, y = 50)
            #self.WHomoSubSortKeyButton.place(x = 800, y = 30)
            self.WHomoSubSortKeyButton.place(x = 750, y = 30)
            self.CipherMachineBoxWidgets.append(self.WHomoSubSortKeyButton)


        if CipherType == "Translation":

            self.TranslateInputLabel = tkinter.Label(self.CipherMachineFrame, text = "Input:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
            self.TranslateInputLabel.place(x = 10, y = 50)
            self.CipherMachineBoxWidgets.append(self.TranslateInputLabel)

            self.TranslateInputBox = tkinter.scrolledtext.ScrolledText(self.CipherMachineFrame, width = 30, height = 13, bg = "#ffffff")
            self.TranslateInputBox.place(x = 10, y = 80)
            self.CipherMachineBoxWidgets.append(self.TranslateInputBox)

            self.TranslateOutputLabel = tkinter.Label(self.CipherMachineFrame, text = "Output:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
            self.TranslateOutputLabel.place(x = 300, y = 50)
            self.CipherMachineBoxWidgets.append(self.TranslateOutputLabel)

            self.TranslateOutputBox = tkinter.scrolledtext.ScrolledText(self.CipherMachineFrame, width = 36, height = 13, bg = "#ffffff")
            self.TranslateOutputBox.place(x = 300, y = 80)
            self.CipherMachineBoxWidgets.append(self.TranslateOutputBox)

            #self.LangOptions = ["English", "French", "German"]
            self.LangOptions = [i.capitalize() for i in LANGUAGETOLANGCODES.keys()]

            self.SrcLangOption = tkinter.StringVar(self)
            self.SrcLangOption.set("German")

            self.SrcLangMenu = ttk.Combobox(self.CipherMachineFrame, textvariable = self.SrcLangOption, values = self.LangOptions)
            self.SrcLangMenu.place(x = 620, y = 50)
            self.CipherMachineBoxWidgets.append(self.SrcLangMenu)

            self.SrcLangLabel = tkinter.Label(self.CipherMachineFrame, text = "Source Language:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
            self.SrcLangLabel.place(x = 620, y = 10)
            self.CipherMachineBoxWidgets.append(self.SrcLangLabel)

            self.DestLangOption = tkinter.StringVar(self)
            self.DestLangOption.set("English")

            self.DestLangMenu = ttk.Combobox(self.CipherMachineFrame, textvariable = self.DestLangOption, values = self.LangOptions)
            self.DestLangMenu.place(x = 800, y = 50)
            self.CipherMachineBoxWidgets.append(self.DestLangMenu)

            self.DestLangLabel = tkinter.Label(self.CipherMachineFrame, text = "Destination Language:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
            self.DestLangLabel.place(x = 800, y = 10)
            self.CipherMachineBoxWidgets.append(self.DestLangLabel)

            self.TranslateButton = tkinter.Button(self.CipherMachineFrame, text = "Translate", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.TranslateText)
            self.TranslateButton.place(x = 500, y = 20)
            self.CipherMachineBoxWidgets.append(self.TranslateButton)

            self.SwapLangsButton = tkinter.Button(self.CipherMachineFrame, text = "<->", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.SwapLangs)
            self.SwapLangsButton.place(x = 400, y = 20)
            self.CipherMachineBoxWidgets.append(self.SwapLangsButton)

            self.SpecialCharsList = ["ß", "ä", "ö", "ü"]

            self.SpecialCharsLabel = tkinter.Label(self.CipherMachineFrame, text = "Special Characters:", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"))
            self.SpecialCharsLabel.place(x = 650, y = 100)
            self.CipherMachineBoxWidgets.append(self.SpecialCharsLabel)

            self.SpecialCharsBox = tkinter.scrolledtext.ScrolledText(self.CipherMachineFrame, width = 20, height = 5, bg = "#ffffff", font = tkinter.font.Font(family = "courier", size = 18))
            self.SpecialCharsBox.place(x = 650, y = 130)
            self.CipherMachineBoxWidgets.append(self.SpecialCharsBox)

            self.PlaceText("".join(self.SpecialCharsList), self.SpecialCharsBox)

            self.DetectLangButton = tkinter.Button(self.CipherMachineFrame, text = "Detect Language", bg = ButtonColour, font = tkinter.font.Font(size = 12, weight = "bold"), command = self.DetectLanguageCommand)
            self.DetectLangButton.place(x = 80, y = 40)
            self.CipherMachineBoxWidgets.append(self.DetectLangButton)


    #def RunningKeyTextScrollBars(self, *args):

        #self.RunningKeyCiphertextBox.xview(*args)
        #self.RunningKeyKeyBox.xview(*args)
        #self.RunningKeyPlaintextBox.xview(*args)


    def ClearCipherMachineBox(self):

        for widget in self.CipherMachineBoxWidgets:

            widget.destroy()


    def SlideEnigmaCribCommand(self):

        #print ("Not implemented yet.")

        #crib = EnigmaCribEntry.get()
        crib = self.EnigmaCribEntry.get()
        #ciphertext = EnigmaInputBox.get("1.0", tkinter.END)
        ciphertext = self.EnigmaInputBox.get("1.0", tkinter.END)

        possiblePositions = SlideEnigmaCrib(ciphertext, crib)

        if len(possiblePositions) == 0:

            report = "That crib does not work anywhere."

        else:

            #report = "The crib works in positions: "
            report = "The crib works in (zero-based) positions: "

            for i in range(0, len(possiblePositions)):

                #report = report + possiblePositions[i] + ", "
                report = report + str(possiblePositions[i]) + ", "

            report = report[:-2]

        self.PlaceText(report, self.CipherTypeOutput)


    def ChangeCustomSubAlphabetCommand(self, event =None):

        alphabetSelected = self.CustomSubAlphabetOption.get().lower()

        if alphabetSelected in ALPHABETS:

            self.CustomSubAlphabetEntry.delete(0, tkinter.END)
            self.CustomSubAlphabetEntry.insert(0, ALPHABETS[alphabetSelected])

        else:

            print ("Unknown alphabet:", alphabetSelected + ".")


    def DecryptCustomSubCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        alphabet = self.CustomSubAlphabetEntry.get()
        alphabet = alphabet.replace("\\n", "\n")
        
        key = self.CustomSubKeyEntry.get()
        key = key.replace("\\n", "\n")

        caseSensitive = bool(self.CustomSubCaseSensitiveOption.get())

        if not caseSensitive:

            msg = msg.lower()

        newMsg = DecryptCustomSubstitution(msg, alphabet, key)

        self.PlaceText(newMsg,self.OutputBox)


    def EncryptCustomSubCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        alphabet = self.CustomSubAlphabetEntry.get()
        alphabet = alphabet.replace("\\n", "\n")
        
        key = self.CustomSubKeyEntry.get()
        key = key.replace("\\n", "\n")

        caseSensitive = bool(self.CustomSubCaseSensitiveOption.get())

        if not caseSensitive:

            msg = msg.lower()

        newMsg = EncryptCustomSubstitution(msg, alphabet, key)

        self.PlaceText(newMsg,self.OutputBox)


    def SolveCustomSubCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        alphabet = self.CustomSubAlphabetEntry.get()
        alphabet = alphabet.replace("\\n", "\n")

        caseSensitive = bool(self.CustomSubCaseSensitiveOption.get())

        numOfTrials = int(self.CustomSubTrialNumEntry.get())

        if not caseSensitive:

            msg = msg.lower()

        #key = SolveCustomSubstitution(msg, alphabet)
        key = SolveCustomSubstitution(msg, alphabet, numOfTrials)

        self.CustomSubKeyEntry.delete(0, tkinter.END)
        self.CustomSubKeyEntry.insert(0, key)


    def GetRandomCustomSubKeyCommand(self):

        alphabet = self.CustomSubAlphabetEntry.get()
        alphabet = alphabet.replace("\\n", "\n")

        key = CreateRandomKey(alphabet)

        self.CustomSubKeyEntry.delete(0, tkinter.END)
        self.CustomSubKeyEntry.insert(0, key)


    def SolveADFGVXCipher(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        ColumnNum = int(self.ADFGVXKeyLengthEntry.get())

        #transpoType = int(self.ADFGVXTranspoTypeOption.get())
        transpoType = ["row", "column"].index(self.ADFGVXTranspoTypeOption.get())

        #SolveADFGX(Msg, ColumnNum)
        SolveADFGVX(Msg, ColumnNum, transpoType)

    def BruteADFGVXCommand(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        ColumnNum = int(self.ADFGVXKeyLengthEntry.get())

        transpoType = ["row", "column"].index(self.ADFGVXTranspoTypeOption.get())

        BruteADFGVX(Msg, ColumnNum, transpoType)


    def BaseNToBaseMCommand(self):

        #num = int(self.BaseNToBaseMNumberEntry.get())
        num = self.BaseNToBaseMNumberEntry.get()

        baseN = int(self.BaseNToBaseMBaseNEntry.get())

        baseM = int(self.BaseNToBaseMBaseMEntry.get())

        newNum = BaseNToBaseM(num, baseN, baseM)

        self.PlaceText(newNum, self.CipherTypeOutput)


    def FindPotentialNamesCommand(self):

        WordInput = self.WordInputEntry.get()

        DictionaryType = self.LargeOrFull.get()

        if DictionaryType == 1:

            DictionaryType = "Large"

        elif DictionaryType == 2:

            DictionaryType = "Full"

        elif DictionaryType == 3:

            DictionaryType = "SOWPODS"

        Dictionary = open(DictionaryType + " Dictionary.txt", "r").readlines()

        for word in range(0, len(Dictionary)):

            Dictionary[word] = RemovePunctuation(Dictionary[word]).lower()

        Dictionary = set(Dictionary)

        PotentialWords = FindPotentialNames(WordInput, Dictionary)

        Output = ""

        if len ( PotentialWords ) > 0 :

            for word in PotentialWords:

                Output = Output + word + "\n"

        else:

            Output = "No potential names identified."

        self.PotentialWordOutputBox.delete("1.0", tkinter.END)
        self.PotentialWordOutputBox.insert("1.0", Output)


    def RunningKeyTextEdited(self, event = None):        

        if self.RunningKeyTextEditFlag == True:

            return

        else:

            print (self.RunningKeyTextEditFlag)

            #self.RunningKeyCiphertextBox.bind("<<Modified>>", self.RunningKeyTextEdited)
            #self.ClearRunningKeyEditFlag()

            self.RunningKeyTextEditFlag = True

            try:

                self.RunningKeyCiphertextBox.tk.call(self.RunningKeyCiphertextBox._w, 'edit', 'modified', 0)

            finally:

                print (self.RunningKeyTextEditFlag, "Yes")

                self.RunningKeyTextEditFlag = False

            print ("Edited running key text")
            print (event)


    def RunningKeyWorkspaceCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        LaunchRunningKeyWorkspace(msg)

    def RemovePunctCommand(self):
        
        self.PlaceText(RemovePunctuation(self.InputBox.get("1.0", tkinter.END)), self.OutputBox)

    def RemoveSpacesCommand(self):
        
        self.PlaceText(RemoveSpaces(self.InputBox.get("1.0", tkinter.END)), self.OutputBox)

    def FindLetterOrderCommand(self):

        letterOrder = [int(x) for x in self.WordInputEntry.get().split(",")]

        dictionaryType = self.LargeOrFull.get()

        PotentialWords = FindLetterOrder(letterOrder, dictionaryType)

        Output = ""

        if len ( PotentialWords ) > 0 :

            for word in PotentialWords:

                Output = Output + word + "\n"

        else:

            Output = "No potential words identified."

        self.PotentialWordOutputBox.delete("1.0", tkinter.END)
        self.PotentialWordOutputBox.insert("1.0", Output)

    def PercentageCorrectCommand(self):

        text1 = self.PercentageCorrectText1Entry.get()
        text2 = self.PercentageCorrectText2Entry.get()

        percentage = str(PercentageCorrect(text1, text2)) + " %"

        self.PlaceText(percentage, self.CipherTypeOutput)

    def SolveHomoSubCommand(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        SolveHomoSub(Msg)

    def SolveTranspoSubCommand(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        ColumnNum = int(self.TranspoSubColumnNumEntry.get())

        #transpoType = ["row", "column"].index(self.TranspoSubTranspoTypeOption.get())
        #transpoType = ["row", "column", "myszkowksi", "amsco"].index(self.TranspoSubTranspoTypeOption.get())
        #transpoType = ["row", "column", "myszkowsi", "amsco"].index(self.TranspoSubTranspoTypeOption.get())
        transpoType = ["row", "column", "myszkowski", "amsco"].index(self.TranspoSubTranspoTypeOption.get())

        SolveTranspoSub(Msg, ColumnNum, transpoType)


    def SolveTranspoVigenCommand(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        ColumnNum = int(self.TranspoVigenColumnNumEntry.get())

        transpoType = ["row", "column"].index(self.TranspoVigenTranspoTypeOption.get())

        period = int(self.TranspoVigenPeriodEntry.get())

        SolveTranspoVigen(Msg, ColumnNum, transpoType, period)


    def BruteTranspoVigenCommand(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        ColumnNum = int(self.VigenTranspoColumnNumEntry.get())

        transpoType = ["row", "column"].index(self.VigenTranspoTranspoTypeOption.get())

        BruteVigenTranspo(Msg, ColumnNum, transpoType)

    #def SolveTranspoVigenCommand(self):
    def SolveVigenTranspoCommand(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        ColumnNum = int(self.VigenTranspoColumnNumEntry.get())

        transpoType = ["row", "column"].index(self.VigenTranspoTranspoTypeOption.get())

        SolveVigenTranspo(Msg, ColumnNum, transpoType)

    #def LongSolveHomoSubCommand(self):
    def SolveHomoSubQuadgramCommand(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        #LongSolveHomoSub(Msg)
        SolveHomoSubQuadgram(Msg)


    def DecryptWHomoSubCommand(self):

        keyString = self.WHomoSubKeyBox.get("1.0", tkinter.END).split()

        key = {}

        for i in range(0, len(keyString)):

            if i % 2 == 0:

                key[keyString[i]] = keyString[i+1]

        msg = self.InputBox.get("1.0", tkinter.END)

        if self.WHomoSubShowCiphertextOption.get() == 0:

            decryptedMsg = DecryptHomoSub(msg, key)

        else:

            decryptedMsg = DecryptHomoSubShowSymbols(msg, key)

        self.PlaceText(decryptedMsg, self.WHomoSubOutputBox)


    def WHomoSubSortKeyCommand(self):

        key = self.WHomoSubKeyBox.get("1.0", tkinter.END)

        key = key.strip(" ").strip("\n")

        newKey = SortHomoSubKey(key)

        self.PlaceText(newKey, self.WHomoSubKeyBox)


    def SolveMyszCommand(self):

        Msg = self.InputBox.get("1.0", tkinter.END)

        ColumnNum = int(self.MyszColumnNumEntry.get())

        SolveMyszTranspo(Msg, ColumnNum)


    def SolveAMSCOCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        columnNum = int(self.AMSCOColumnNumEntry.get())

        chunkSize = int(self.AMSCOChunkSizeEntry.get())

        SolveAMSCO(msg, columnNum, chunkSize)

    def SolveStraddleVigenereCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        rowNum = int(self.StraddleVigenereHeightEntry.get())
        columnNum = int(self.StraddleVigenereWidthEntry.get())
        period = int(self.StraddleVigenerePeriodEntry.get())
        #alphabet = int(self.StraddleVigenereAlphabetEntry.get())
        alphabet = self.StraddleVigenereAlphabetEntry.get()

        SolveStraddleVigenere(msg, period, rowNum, columnNum, alphabet)


    def ExamineTextCommand(self):

        #msg = self.InputBox.get("1.0", tkinter.END)
        msg = self.InputBox.get("1.0", tkinter.END)

        #if msg[-2:] == "\n":
        if msg[-1] == "\n":

            #msg = msg[:-2]
            msg = msg[:-1]

        report = ExamineText(msg)

        #self.AnalyseTextBox.delete("1.0", tkinter.END)
        #self.AnalyseTextBox.insert("1.0", report)
        self.PlaceText(report, self.AnalyseTextBox)


    def SolveNGraphVigenereCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        n = int(self.NGraphVigenereNEntry.get())
        #period = int(self.NgraphVigenerePeriodEntry.get())
        period = int(self.NGraphVigenerePeriodEntry.get())
        alphabet = self.NGraphVigenereAlphabetEntry.get()

        SolveNGraphVigenere(msg, n, period, alphabet)


    def SolvePolluxCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        alphabet = self.PolluxAlphabetEntry.get()
        numDash = int(self.PolluxNumDashEntry.get())
        numDot = int(self.PolluxNumDotEntry.get())
        numSep = int(self.PolluxNumSepEntry.get())

        SolvePollux(msg, alphabet, numDash, numDot, numSep)

    def BruteABCDEFGHIKCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        columnNum = int(self.ABCDEFGHIKKeyLengthEntry.get())

        transpoType = ["row", "column"].index(self.ABCDEFGHIKTranspoTypeOption.get())

        alphabet = self.ABCDEFGHIKAlphabetEntry.get()

        ngramLength = int(self.ABCDEFGHIKNGramLengthEntry.get())

        #BruteABCDEFGHIK(msg, columnNum, transpoType, alphabet)
        BruteABCDEFGHIK(msg, columnNum, transpoType, alphabet, ngramLength)


    def NormaliseNihilistCommand(self):

        Msg = self.InputBox.get("1.0", tkinter.END).lower()

        NewMsg = NormaliseNihilist(Msg)

        self.PlaceText(NewMsg, self.OutputBox)


    def SolvePolyalphabeticCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        period = int(self.PolyalphabeticPeriodEntry.get())

        alphabet = self.PolyalphabeticAlphabetEntry.get()

        step = float(self.PolyalphabeticStepEntry.get())

        alphabetChangePeriod = int(self.PolyalphabeticAlphabetChangePeriodEntry.get())

        #SolvePolyalphabetic(msg, period, alphabet)
        #SolvePolyalphabetic(msg, period, alphabet, step)
        SolvePolyalphabetic(msg, period, alphabet, step, alphabetChangePeriod)


    def LowerInputCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        msg = msg.lower()

        self.PlaceText(msg, self.OutputBox)


    def SolveTranspoCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        columnNum = int(self.TranspoColumnNumEntry.get())

        transpoType = ["row", "column", "myszkowski", "amsco"].index(self.TranspoTranspoTypeOption.get())

        SolveSpecificTransposition(msg, columnNum, transpoType)


    def SolveBazeriesCommand(self):

        alphabet = self.BazeriesAlphabetEntry.get()

        msg = self.InputBox.get("1.0", tkinter.END)

        SolveBazeries(msg, alphabet)

    def SolveNicodemusCommand(self):

        alphabet = self.NicodemusAlphabetEntry.get()

        columnNum = int(self.NicodemusColumnNumEntry.get())

        chunkSize = int(self.NicodemusChunkSizeEntry.get())

        msg = self.InputBox.get("1.0", tkinter.END)

        SolveNicodemus(msg, alphabet, columnNum, chunkSize)

    def SolveCadenusCommand(self):

        vertAlphabet = self.CadenusVerticalAlphabetEntry.get()

        columnNum = int(self.CadenusColumnNumEntry.get())

        msg = self.InputBox.get("1.0", tkinter.END)

        SolveCadenus(msg, vertAlphabet, columnNum)

    def SolveProgKeyCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        period = int(self.ProgKeyPeriodEntry.get())

        alphabet = self.ProgKeyAlphabetEntry.get()

        #progressionIndex = float(self.ProgKeyProgressionIndexEntry.get())
        progressionIndex = int(self.ProgKeyProgressionIndexEntry.get())

        SolveProgressiveKey(msg, period, alphabet, progressionIndex)

    def SolveRagbabyCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        startIndex = int(self.RagbabyStartIndexEntry.get())

        alphabet = self.RagbabyAlphabetEntry.get()

        SolveRagbaby(msg, alphabet, startIndex)

    def SolveInterruptKeyCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        alphabet = self.InterruptKeyAlphabetEntry.get()

        SolveInterruptedKey(msg, alphabet)

    def FindCommand(self):

        lookingFor = self.FindEntry.get()

        #self.InputBox.tag_add(tkinter.SEL, "1.0", tkinter.END)

        text = self.InputBox.get("1.0", tkinter.END)

        print("Looking for:", lookingFor)

        if lookingFor in text:
        
            #self.InputBox.tag_add(tkinter.SEL, str(text.index(lookingFor)), str(text.index(lookingFor) + len(lookingFor)))
            #self.InputBox.tag_add(tkinter.SEL, str(float(text.index(lookingFor))), str(float(text.index(lookingFor) + len(lookingFor))))
            #self.InputBox.search(lookingFor, "1.0", stopindex = "end")

            #self.InputBox.force_focus()
            self.InputBox.focus_set()

            countVar = tkinter.StringVar()
            pos = self.InputBox.search(lookingFor, "1.0", stopindex = "end", count = countVar)

            #self.InputBox.tag_add(tkinter.SEL, pos, "%s + %sc" (pos, countVar.get()))
            self.InputBox.tag_add(tkinter.SEL, pos, "%s + %sc" % (pos, countVar.get()))

            print ("Found.")

        else:

            print ("Not found.")


    def SolveCustomSubCSharpCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        alphabet = self.CustomSubAlphabetEntry.get()
        alphabet = alphabet.replace("\\n", "\n")

        caseSensitive = bool(self.CustomSubCaseSensitiveOption.get())

        numOfTrials = int(self.CustomSubTrialNumEntry.get())

        if not caseSensitive:

            msg = msg.lower()

        SolveCustomSubstitutionCSharp(msg, alphabet, numOfTrials)


    def SolvePolybVigenCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        n = int(self.PolybVigenNEntry.get())
        period = int(self.PolybVigenPeriodEntry.get())
        alphabet = self.PolybVigenAlphabetEntry.get()

        SolvePolybiusVigenere(msg, n, period, alphabet)

    def RemoveNewLines(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        newMsg = msg.replace("\n", "").replace(" ", "")

        self.PlaceText(newMsg, self.OutputBox)


    def TranslateText(self):

        text = self.TranslateInputBox.get("1.0", tkinter.END)

        srcLang = LANGUAGETOLANGCODES[self.SrcLangOption.get().lower()]
        destLang = LANGUAGETOLANGCODES[self.DestLangOption.get().lower()]

        translation = WordFunctions.Translate(text, srcLang, destLang)

        self.PlaceText(translation, self.TranslateOutputBox)


    def SwapLangs(self):

        temp = self.SrcLangOption.get()
        self.SrcLangOption.set(self.DestLangOption.get())
        self.DestLangOption.set(temp)

        temp = self.TranslateInputBox.get("1.0", tkinter.END)
        self.PlaceText(self.TranslateOutputBox.get("1.0", tkinter.END), self.TranslateInputBox)
        self.PlaceText(temp, self.TranslateOutputBox)

    def DetectLanguageCommand(self):

        text = self.TranslateInputBox.get("1.0", tkinter.END)

        language = GetKeyOfValue(WordFunctions.DetectLanguage(text), LANGUAGETOLANGCODES).capitalize()

        self.PlaceText(language, self.TranslateOutputBox)

    def FindEnglishWordsCommand(self):

        self.GetDictionary()

        words = self.WordInputEntry.get().lower().split()

        english = set()

        for word in words:

            print (word)

            if word in self.Dictionary:

                english.add(word)

        report = ""

        for i in english:
            
            report = report + i + "\n"

        report = report.strip()

        self.PlaceText(report, self.PotentialWordOutputBox)


    def ASCIIToLetterCommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        base = int(self.BaseEntry.get())

        self.PlaceText(ASCIIToLetter(msg, base), self.OutputBox)

    def LetterToASCIICommand(self):

        msg = self.InputBox.get("1.0", tkinter.END)

        base = int(self.BaseEntry.get())

        self.PlaceText(LetterToASCII(msg, base), self.OutputBox)
        

###Run Window

Window()


#if True:
#
#    print (TwitterHandler.GetLatestTweet())
#
